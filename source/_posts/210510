




协同执行
在Daccosim中，可以在执行协同仿真图时，选择如何推进时间步长。 时间步长主要有两类：
+	常量 
+	变量 



7. Step

恒定步进器提前的时间每次都是相同的,可能无法提供良好的计算/精度比：为步长选择较小的值会导致大量的计算步骤，而较大的值可能无法捕获模拟变量中的某些变化。

根据FMU的功能，Daccosim NG还可以实施几种可变的步进策略。在模拟第i步后，每个FMU都会检查其输出，并估计它们与精确值的距离。 Daccosim-NG实现了两种算法：
+	基于Euler方法的算法
+	基于Adams Bashforth方法的算法。

它们的原理是：将导数的值存储在连续的通信点上，以便下一次迭代时推断出一个估值；如果发现该数在接受范围之内，则引擎将建议以更大的步长执行下一步。否则，将取消最后一步，并以较小的步长值重做。自从FMI 2.0版引入FMU状态的概念以来，便可以进行回滚，从而允许在执行模拟步骤之前对FMU状态进行序列化，并在必要时恢复保存的状态。该开源软件提供了一个GUI，以方便设计，开发和执行协同仿真图。




8. Matryoshka

Matryoshka
该功能（Galtier等人，2017）允许将协同仿真图存储到FMU中，以用于Dymola等其他协同仿真环境或Daccosim NG本身（Evora等，a）。其中，FMU是由FMI规范提倡的一种仿真文件格式。当由其他工具打开时，存储在FMU中的协同仿真图被视为单个FMU。 每当主算法出于任何目的使用此FMU时，Matryoshka FMU都会将命令分派给相应的内部FMU。

例如，如果主设备通过doStep方法向 Matryoshka-FMU 发出模拟进阶命令，则此FMU将对包含的所有FMU执行doStep，并将按照共同仿真图中的说明在FMU之间交换值。同时，可以在另一个协同仿真图中嵌入一个Matryoshka FMU，然后将此图导出到具有多层FMUsembedded的Ma-tryoshka FMU中。


支持将FMU导出是由好处的：

+	FMU可以导入到任何FMI兼容的仿真工具中，该工具也可以处理Daccosim NG无法直接交互的非FMI组件。
+	利用Daccosim NG高效的多线程步长控制解决方案，有助于在传统的单线程模拟工具中模拟更快的大型模型。
+	借助Daccosim NG广义协初始化算法，可以在Matryoshka中处理复杂图形的初始化。复杂的仿真图可以直接重用，而无需重写任何内容，并且没有泄露工业和知识产权的风险。
+	可以对协同仿真过程进行微调：通常，当求解器仅对整个模型使用一个精度目标时，Daccosim NG允许用户为每个FMU的每个输出和内部变量定义不同的公差值



“Fmu”对象实例的属性为：
+	Label：在协同仿真图中命名FMU。该字段是可编辑的，将用于标识结果文件中的内部变量
+	“...”按钮：重新加载相同的FMU，这在更新FMU或加载另一个要附加到当前FMU块的FMU时很有用
+	static（静态）：此复选框允许以静态模式执行FMU。此模式为此FMU提供了特定的行为，包括在整个模拟执行过程中将FMU保持在初始化模式。也就是说，其他FMU可能会以STEPPER模式更新它的时间，而该FMU将一直保持其初始化模式，即允许在特殊场景下使用纯静态编译模型，而系统的其余部分会随着时间的推移而变化。
+	FMU初始化列表的变量表，该表由四个名为 ‘Type’, ‘Mode’,‘Variable name’and ‘Init value’的列组成。
	+	Type：是当前变量的类型（实型，布尔型，整数，字符串）
	+	Mode：定义当前变量的初始化模式（“ Before”或“ In Init”）
		+	“Before”：被赋予在进入初始化模式之前，即文件存在以下变量配置：
			+	variability = "fixed/tunable" 和 causality = "parameter"
			+	variability = "fixed/tunable" 和 causality = "calculated parameter/local" 以及 initial = "approx"
			+	variability = "discrete/continuous" 和 causality = "local" 以及 initial = "exact/approx"
		+	“In Init”：只能在初始化阶段初始化的变量
			+	causality = "input"
	+	Variable：当前变量的名称
	+	Init value：当前变量的默认值（FMU的modelDescription.xml文件中可用）

> 还要注意，输入到输出的传播是按照每个FMU在其modelDescription.xml文件中定义的配置执行的。当FMU不公开内部依赖关系时，将假定每个外部输出都依赖于FMU的所有外部输入（这些默认依赖项不能由用户修改）。

