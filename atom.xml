<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>微言术语</title>
  
  
  <link href="http://zws6672.top/atom.xml" rel="self"/>
  
  <link href="http://zws6672.top/"/>
  <updated>2021-06-20T15:26:37.175Z</updated>
  <id>http://zws6672.top/</id>
  
  <author>
    <name>古城烟雨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>swagger2 通过OpenAPI文件生成JAVA代码</title>
    <link href="http://zws6672.top/2021/06/20/swagger2-1/"/>
    <id>http://zws6672.top/2021/06/20/swagger2-1/</id>
    <published>2021-06-20T15:25:38.000Z</published>
    <updated>2021-06-20T15:26:37.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、使用Swagger－codegen生成代码-推荐"><a href="#一、使用Swagger－codegen生成代码-推荐" class="headerlink" title="一、使用Swagger－codegen生成代码(推荐)"></a>一、使用Swagger－codegen生成代码(推荐)</h1><p>Swagger CodeGen是一个REST 客户端生成工具，它可以从Open API的规范定义文件中生成对应的REST Client代码。推荐的OpenAPI 文档名字通常为openapi.json 或者 openapi.yaml，所以这个工具支持json或者是yaml后缀的文件。可以在官方下载相应<a href="https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.20/swagger-codegen-cli-2.4.20.jar" target="_blank" rel="noopener">工具包</a>， 使用<a href="https://petstore.swagger.io/v2/swagger.json" target="_blank" rel="noopener">官方例子</a> 进行测试。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar swagger-codegen-cli-<span class="number">3.0</span>.26.jar generate -i D:\cos.yaml --api-<span class="keyword">package</span> com.simtek.cosimcloud.openapi.api --model-<span class="keyword">package</span> com.simtek.cosimcloud.openapi.model --invoker-<span class="keyword">package</span> com.simtek.cosimcloud.openapi.invoker --group-id com.simtek --artifact-id cosimCloud --artifact-version <span class="number">0.0</span>.1-SNAPSHOT -l spring --library spring-mvc -o cos</span><br></pre></td></tr></table></figure><ul><li>-i 表示openapi文件地址</li><li>–api-package, –model-package, –invoker-package 指定了生成类的路径</li><li>–group-id, –artifact-id, –artifact-version 指定生成的maven 项目的属性</li><li>-l 指明生成的代码编程语言</li><li>–library 指定了实际的实现框架</li><li>-o 输出文件跟目录</li></ul><p>Swagger Codegen 支持如下的Java 库：</p><ul><li>jersey1 – Jersey1+Jackson</li><li>jersey2 – Jersey2+Jackson</li><li>feign – OpenFeign+Jackson</li><li>okhttp-gson – OkHttp+Gson</li><li>retrofit (Obsolete) – Retrofit1/OkHttp+Gson</li><li>retrofit2 – Retrofit2/OkHttp+Gson</li><li>rest-template – Spring RestTemplate+Jackson</li><li>rest-easy – Resteasy+Jackson</li></ul><p>如果 library选择的是<code>spring-mvc</code>，那么生成的包是swagger，可以直接复制到项目中去。</p><h1 id="二、使用-OpenAPI-Generator-生成-REST-客户端"><a href="#二、使用-OpenAPI-Generator-生成-REST-客户端" class="headerlink" title="二、使用 OpenAPI Generator 生成 REST 客户端"></a>二、使用 OpenAPI Generator 生成 REST 客户端</h1><p>OpenAPI Generator 是 Swagger Codegen 的一个分支，能够从任何 OpenAPI 规范 2.0/3.x 文档生成多个客户端。Swagger Codegen 由 SmartBear 维护，而 OpenAPI Generator 由一个社区维护，该社区包括 Swagger Codegen 的 40 多位顶级贡献者和模板创建者作为创始团队成员。</p><ol><li>在linux安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install @openapitools/openapi-generator-cli -g</span><br><span class="line">wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/4.2.3/openapi-generator-cli-4.2.3.jar \</span><br><span class="line">  -O openapi-generator-cli.jar</span><br></pre></td></tr></table></figure><ol start="2"><li>在windows安装</li></ol><p>下载<a href="https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/" target="_blank" rel="noopener">相关JARb包</a>;<br>OpenAPI Generator 的选项与 Swagger Codegen 的选项几乎相同；最明显的区别是将-l语言标志替换为-g生成器标志，它将生成客户端的语言作为参数；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -jar openapi-generator-cli.jar generate -i D:\OpenAPI.yaml --api-package com.simtek.cosimcloud.swagger.api --model-package com.simtek.cosimcloud.swagger.model --invoker-package com.simtek.cosimcloud.swagger.invoker --group-id com.simtek --artifact-id cosimCloud --artifact-version 0.0.1-SNAPSHOT -g java -p java8=true --library resttemplate -o cosimCloud</span><br><span class="line">  </span><br><span class="line">-- 列出相关命令：</span><br><span class="line">java -jar openapi-generator-cli.jar config-help -g java</span><br></pre></td></tr></table></figure><p>支持的库如下所示：</p><ul><li>jersey1 – Jersey1 +Jackson</li><li>jersey2 – Jersey2 +Jackson</li><li>feign – OpenFeign +Jackson</li><li>okhttp-gson – OkHttp +Gson</li><li>retrofit (Obsolete) – Retrofit1/OkHttp +Gson</li><li>retrofit2 – Retrofit2/OkHttp +Gson</li><li>resttemplate – Spring RestTemplate +Jackson</li><li>webclient – Spring 5 WebClient +Jackson (OpenAPI Generator only)</li><li>resteasy – Resteasy +Jackson</li><li>vertx – VertX +Jackson</li><li>google-api-client – Google API Client +Jackson</li><li>rest-assured – rest-assured +Jackson/Gson (Java 8 only)</li><li>native – Java native HttpClient +Jackson (Java 11 only; OpenAPI Generator only)</li><li>microprofile – Microprofile client +Jackson (OpenAPI Generator only)</li></ul><ol start="3"><li>生成Spring Boot项目</li></ol><p>添加maven依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baeldung&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-swagger-codegen-api-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h1><blockquote><p><a href="https://www.baeldung.com/spring-boot-rest-client-swagger-codegen" target="_blank" rel="noopener">Generate Spring Boot REST Client with Swagger</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、使用Swagger－codegen生成代码-推荐&quot;&gt;&lt;a href=&quot;#一、使用Swagger－codegen生成代码-推荐&quot; class=&quot;headerlink&quot; title=&quot;一、使用Swagger－codegen生成代码(推荐)&quot;&gt;&lt;/a&gt;一、使用Swa</summary>
      
    
    
    
    
    <category term="springboot" scheme="http://zws6672.top/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>rust安装与初试</title>
    <link href="http://zws6672.top/2021/06/16/rustInstall/"/>
    <id>http://zws6672.top/2021/06/16/rustInstall/</id>
    <published>2021-06-16T08:43:10.000Z</published>
    <updated>2021-06-20T15:34:44.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-安装"><a href="#一、-安装" class="headerlink" title="一、 安装"></a>一、 安装</h1><p>官方文档：<a href="https://doc.rust-lang.org/book/" target="_blank" rel="noopener">https://doc.rust-lang.org/book/</a></p><p>1.编译环境选择</p><p>rust底层是依赖C环境，所以需要先安装C/C++编译环境, 有两种选择:</p><ul><li>安装微软的<a href="https://visualstudio.microsoft.com/zh-hans/downloads/" target="_blank" rel="noopener">C++ build tools</a>，即 Visual Studio 2019 生成工具；</li><li>安装<a href="https://sourceforge.net/projects/mingw-w64/files/" target="_blank" rel="noopener">mingw</a>/cygwin（模拟linux） ，需要配置 gnu toolchain开发环境（stable-x86_64-pc-windows-gnu）：<ul><li>Cygwin 提供了Windows下的类Unix环境（Window）；</li><li>MinGW 是提供用于开发Window应用的开发环境（Linux）。</li></ul></li></ul><h1 id="二、配置Cygwin"><a href="#二、配置Cygwin" class="headerlink" title="二、配置Cygwin"></a>二、配置Cygwin</h1><ol><li>初始化与更新 Cygwin 包</li></ol><p>为 64 位版本的 Windows 安装和更新 Cygwin：当您想要更新或安装适用于 64 位 Windows 的 <a href="https://cygwin.com/setup-x86_64.exe" target="_blank" rel="noopener">Cygwin 软件包</a> 时，请运行setup-x86_64.exe。该签名的设置，x86_64.exe可以用来验证这个二进制文件的有效性。</p><p>注意事项：</p><ul><li>首次安装软件包时，安装程​​序 不会安装每个软件包。 默认情况下只安装 Cygwin 发行版中的最小基础包，大约占用 100 MB。<br>单击安装程序包安装屏幕中的类别和包，您可以选择安装或更新的内容。像bash、gcc、less等单独的包是独立于 Cygwin DLL 发布的，因此 Cygwin DLL 版本作为通用的 Cygwin 版本号没有用处。安装程序会跟踪所有已安装组件的版本，并提供用于安装或更新此站点上 Cygwin 可用所有内容的机制。</li></ul><p>不提供apt, yum：</p><ul><li>不使用功能更全的包管理器的原因是这样的程序需要完全访问 Cygwin 的所有 POSIX 功能。然而，这在没有 Cygwin 的环境中很难提供，例如需要第一次安装时就存在。此外，Windows 不允许覆盖正在使用的可执行文件，因此在包管理器使用 DLL 时安装新版本的 Cygwin DLL 是有问题的。</li></ul><p>验证安装程序的签名（例子）：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg --recv-key 1A698DE9E2E56300</span><br><span class="line">gpg --keyid-format=long --with-fingerprint --verify setup-x86_64.exe.sig setup-x86_64.exe</span><br></pre></td></tr></table></figure></li></ul><p>通过Cygwin Setup 可以更新包，为了能够通过命令安装软件，可以先使用该程序添加GIT。</p><ul><li>打开后，直接下一步即可；</li><li>到了包管理页面找到GIT选择版本号即可；</li><li>再通过GIT安装apt-cyg。<ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/transcode-open/apt-cyg.git</span><br><span class="line">cd apt-cyg/</span><br><span class="line">chmod +x apt-cyg</span><br><span class="line">cp apt-cyg /bin</span><br><span class="line">apt-cyg install wget</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>注：wget安装会提示缺少lynx，需要通过Cygwin安装程序安装。</p><ol start="2"><li>在windows命令下使用cygwin</li></ol><p>需要添加环境变量，Path 添加 <code>D:\cygwin64\bin</code>,刷新环境变量<code>set PATH=C</code>。</p><p>在Window下通过以下命令可以进入类unix环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\Environment\Rust&gt;bash</span><br><span class="line">86178@LAPTOP-KFPIFLPS /cygdrive/d/Environment/Rust</span><br><span class="line">86178@LAPTOP-KFPIFLPS /cygdrive/d/Environment/Rust <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><ol start="3"><li>为了通过 Cygwin配置Rustup，需要通过Cygwin安装程序安装以下包：</li></ol><ul><li>httpd</li><li>make</li><li>ls</li><li>curl</li></ul><h1 id="三、Rustup"><a href="#三、Rustup" class="headerlink" title="三、Rustup"></a>三、Rustup</h1><p>Rustup是Rust 安装程序和版本管理工具，<a href="https://www.rust-lang.org/learn/get-started" target="_blank" rel="noopener">相关资源</a></p><ol><li>配置环境变量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CARGO_HOME=D:\Environment\Rust\.cargo</span><br><span class="line">RUSTUP_HOME=D:\Environment\Rust\.rustup</span><br><span class="line">RUSTUP_UPDATE_ROOT=http://mirrors.ustc.edu.cn/rust-static/rustup</span><br><span class="line">RUSTUP_DIST_SERVER=http://mirrors.ustc.edu.cn/rust-static</span><br><span class="line">path 添加%CARGO_HOME%\bin</span><br><span class="line"></span><br><span class="line">set PATH=C</span><br></pre></td></tr></table></figure><ol start="2"><li>安装程序</li></ol><p>打开rustup-init.exe文件，输入2，自定义安装选项，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">host triple：x86_64-pc-windows-gnu 版本</span><br><span class="line">default toolchain：stable 稳定版</span><br><span class="line">profile: complete 表示完全安装</span><br><span class="line">modify PATH variable：y 表示按照环境变量定义的路径安装</span><br></pre></td></tr></table></figure><p>查看安装结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\86178&gt;cargo version</span><br><span class="line">cargo 1.52.0 (69767412a 2021-04-21)</span><br></pre></td></tr></table></figure><p>查看版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\86178&gt;rustup show</span><br><span class="line">Default host: x86_64-pc-windows-gnu</span><br><span class="line">rustup home:  D:\Environment\Rust\.rustup</span><br><span class="line"></span><br><span class="line">installed toolchains</span><br><span class="line">--------------------</span><br><span class="line"></span><br><span class="line">stable-x86_64-pc-windows-gnu (default)</span><br><span class="line">stable-x86_64-pc-windows-msvc</span><br><span class="line"></span><br><span class="line">active toolchain</span><br><span class="line">----------------</span><br><span class="line"></span><br><span class="line">stable-x86_64-pc-windows-gnu (default)</span><br><span class="line">rustc 1.52.1 (9bc8c42bb 2021-05-09)</span><br></pre></td></tr></table></figure><ol start="3"><li>Hello World</li></ol><p>一个Hello World的例子。</p><p>3.1 配置</p><p>在windows配置项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; mkdir &quot;%USERPROFILE%\projects&quot;</span><br><span class="line">&gt; cd /d &quot;%USERPROFILE%\projects&quot;</span><br><span class="line">&gt; mkdir hello_world</span><br><span class="line">&gt; cd hello_world</span><br></pre></td></tr></table></figure><p>创建一个新的源文件并将其命名为main.rs。Rust 文件总是以.rs扩展名结尾。如果您在文件名中使用多个单词，请使用下划线将它们分开。例如，使用hello_world.rs而不是 helloworld.rs。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello, world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：将左大括号与函数声明放在同一行是一种很好的风格，中间加一个空格。如果你想在 Rust 项目中坚持标准风格，你可以使用一个自动格式化工具<code>rustfmt</code>来以特定的风格格式化你的代码.</p><ul><li>Rust 风格是缩进四个空格，而不是一个制表符;</li><li><code>println!</code>调用一个 Rust 宏。如果它改为调用函数，则输入为println（不带!）</li><li>大多数 Rust 代码行都以分号结尾。</li></ul><p>3.2 编译与运行</p><p>在运行 Rust 程序之前，您必须使用 Rust 编译器通过输入<code>rustc</code>命令并将源文件的名称传递给它来编译它</p><p>运行方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- Linux</span><br><span class="line">$ rustc main.rs  # 编译</span><br><span class="line">$ ./main  # 运行</span><br><span class="line">Hello, world!</span><br><span class="line"></span><br><span class="line">-- Window</span><br><span class="line">&gt; rustc main.rs</span><br><span class="line">&gt; .\main.exe</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><p>Rust 是一种提前编译语言，这意味着您可以编译程序并将可执行文件提供给其他人，他们甚至可以在没有安装 Rust 的情况下运行它。如果你给某人一个.rb、.py或 .js文件，他们需要安装一个 Ruby、Python 或 JavaScript 实现（分别）。但是在这些语言中，您只需要一个命令来编译和运行您的程序。一切都是语言设计的权衡。</p><h1 id="四、Cargo"><a href="#四、Cargo" class="headerlink" title="四、Cargo"></a>四、Cargo</h1><p>Cargo 是 Rust 的构建系统和包管理器。大多数 Rustaceans 使用这个工具来管理他们的 Rust 项目，因为 Cargo 为你处理了很多任务，比如构建代码、下载代码依赖的库以及构建这些库。（我们将您的代码需要的库称为依赖项。）</p><ol><li>Cargo创建项目</li></ol><p>查看是否安装cargo：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo --version</span><br></pre></td></tr></table></figure><p>使用 Cargo 创建项目：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cargo new hello_cargo</span><br><span class="line">$ cd hello_cargo</span><br><span class="line"></span><br><span class="line">-- 使用现成的git存储库创建项目</span><br><span class="line">cargo new --vcs=git.</span><br></pre></td></tr></table></figure><ol start="2"><li>文件结构</li></ol><p>生成以下文件</p><ul><li>src<ul><li>main.rs</li></ul></li><li>Cargo.toml</li><li>.gitignore</li><li>.git  Git存储库</li></ul><p>Cargo.toml（<code>Tom&#39;s Obvious, Minimal Language</code>）的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[package]</span><br><span class="line">name = &quot;hello_cargo&quot;</span><br><span class="line">version = &quot;0.1.0&quot;</span><br><span class="line">authors = [&quot;ws6672 &lt;ws6672s@gmail.com&gt;&quot;]</span><br><span class="line">edition = &quot;2018&quot;</span><br><span class="line"></span><br><span class="line"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span><br><span class="line"></span><br><span class="line">[dependencies]</span><br></pre></td></tr></table></figure><p>Cargo 希望您的源文件位于src目录中。顶级项目目录仅用于 README 文件、许可证信息、配置文件以及与您的代码无关的任何其他内容。使用 Cargo 可以帮助您组织项目。一切都有一个地方，一切都在它的位置。</p><ol start="3"><li>编译与运行项目</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cargo build</span><br><span class="line">   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)</span><br><span class="line">    Finished dev [unoptimized + debuginfo] target(s) in 2.85 secs</span><br><span class="line">$ cargo run</span><br><span class="line"></span><br><span class="line">// 此命令会快速检查您的代码以确保它可以编译但不生成可执行文件</span><br><span class="line">$ cargo check </span><br><span class="line"></span><br><span class="line">// 为发布而构建</span><br><span class="line">cargo build --release</span><br></pre></td></tr></table></figure><ol start="4"><li>相关实例</li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io; <span class="comment">//使用use 语句将该类型显式引入作用域</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello, world!"</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Guess Number"</span>);</span><br><span class="line">    <span class="comment">// 存储用户输入</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> guess = <span class="built_in">String</span>::new();</span><br><span class="line">    <span class="comment">// stdin函数返回 的一个实例std::io::Stdin，它是一种表示终端标准输入句柄的类型。</span></span><br><span class="line">    <span class="comment">// read_line 表示读取一行到缓冲区guess</span></span><br><span class="line">    <span class="comment">// expect 表示异常处理</span></span><br><span class="line">    io::stdin()</span><br><span class="line">        .read_line(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">        .expect(<span class="string">"faild"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"You guessed: &#123;&#125;"</span>, guess);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>read_line函数源码如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[stable(feature = <span class="meta-string">"rust1"</span>, since = <span class="meta-string">"1.0.0"</span>)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">read_line</span></span>(&amp;<span class="keyword">self</span>, buf: &amp;<span class="keyword">mut</span> <span class="built_in">String</span>) -&gt; io::<span class="built_in">Result</span>&lt;<span class="built_in">usize</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">self</span>.lock().read_line(buf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>read_line将用户输入的内容放入我们传递给它的字符串中，但它也返回一个值Result，表示函数运行结果，这个模块有不同的实现，例如<code>io::Result</code>。Result类型是enum，通常被称为枚举。枚举是一种可以具有一组固定值的类型，这些值称为枚举的变体。对于Result，变体是Ok或Err。所述Ok变体指示操作是成功的，并且内部Ok是成功生成值。该Err变种意味着操作失败，并Err包含有关操作如何或为何失败的信息。</p><p>如果您不调用expect，程序将编译，但会收到警告。</p><h1 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h1><blockquote><p><a href="https://www.zhangtiefei.cn/211.html" target="_blank" rel="noopener">Cygwin安装新的软件或者程序</a><br><a href="https://icedream2linxi.github.io/blog/2018/09/29/Windows%E4%B8%8B%E4%B8%8D%E6%B1%A1%E6%9F%93%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85Rust%E7%BC%96%E8%AF%91%E5%99%A8" target="_blank" rel="noopener">Windows 下不污染环境安装 Rust 编译器</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、-安装&quot;&gt;&lt;a href=&quot;#一、-安装&quot; class=&quot;headerlink&quot; title=&quot;一、 安装&quot;&gt;&lt;/a&gt;一、 安装&lt;/h1&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://doc.rust-lang.org/book/&quot; target=&quot;_bl</summary>
      
    
    
    
    
    <category term="rust" scheme="http://zws6672.top/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>接口对接规范</title>
    <link href="http://zws6672.top/2021/06/15/interface-specification/"/>
    <id>http://zws6672.top/2021/06/15/interface-specification/</id>
    <published>2021-06-15T08:45:06.000Z</published>
    <updated>2021-06-22T08:02:31.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前后端正常交互的流程"><a href="#一、前后端正常交互的流程" class="headerlink" title="一、前后端正常交互的流程"></a>一、前后端正常交互的流程</h1><p>1、评审阶段：产品召集前后端进行需求评审，前后端各自捋清楚自己的业务量以及联调之间工作量，从而进行开发时间评估。</p><p>2、开发准备阶段：前后端一起商量需求中需要联调的部分，进行接口的口头协议交流。</p><p>3、接口定义阶段：前后端中的一方根据之前的口头协议拟定出一份详细的接口，并书写API文档，完成后由另一方确认。有疑问的地方重新商量直至双方都没有问题。</p><p>注意：第一份确认并书写好API的接口基本不会大改。</p><p>4、开发阶段：双方根据协商出来的接口为基础进行开发，如在开发过程中发现需要新增或删除一些字段，重复步骤3。</p><p>注意：前端在开发过程中记得跟进接口，mock数据进行本地测试。</p><p>5、联调阶段：双方独自的工作完成，开始前后端联调，如在联调过程发现有疑问，重复步骤3，直至联调完成。</p><p>6、产品体验阶段：将完成的需求交给产品，让其体验，直至产品这边没有问题</p><p>7、提测阶段：将完成的需求提给测试人员，让其对该需求进行测试，如发现问题，及时通知开发并让其修改，直至需求没有bug。</p><p>8、评审单发布阶段：前后端中的一人进行评审单的拟定，发送给对应的领导，表明需求发布的程序，包括影响到的页面及业务，发布的流程，发布的回滚方案等。</p><p>9、发布阶段：前后端双方在保证步骤1-8都没有问题了，进行各自的代码发布，完成后由测试人员在线上进行相应的测试，如果有bug，重复步骤7和9，直至需求成功上线。</p><h1 id="二、后端接口设计思路"><a href="#二、后端接口设计思路" class="headerlink" title="二、后端接口设计思路"></a>二、后端接口设计思路</h1><ol><li>接口类型如何定义</li></ol><p>按接口类型整理接口文档：</p><ul><li>资源接口: 系统涉及到哪些资源, 按照 RESTful 方式定义的细粒度接口</li><li>操作接口: 页面涉及到哪些操作, 例如修改购物车中商品的数量, 更换优惠券等等, 也可以使用 RESTful 方式来定义</li><li>页面接口: 页面涉及到太多接口, 如果是一个个地调用, 会需要很多次请求, 有可以影响到前端的性能和用户感知(特别是首屏的体验), 因此可能需要将这些接口的数据合并到一起, 作成一个聚合型接口提供给前端来使用</li></ul><ol start="2"><li>响应设计</li></ol><p>返回的响应体类型推荐为 <code>Content-Type: application/json; charset=utf-8</code>, 返回的数据包含在 HTTP 响应体中, 是一个 JSON Object. 该 Object 可能包含 3 个字段:</p><ul><li>data：业务数据<ul><li>任意 JSON 数据类型(number/string/boolean/object/array)，推荐始终返回一个 object (即再包一层)以便于扩展字段.</li><li>例如: 用户数据应该返回 {“user”:{“name”:”test”}}, 而不是直接为 {“name”:”test”}</li></ul></li><li>status：状态码<ul><li>必须是 &gt;= 0 的 JSON Number 整数.<ul><li>0 表示请求处理成功, 此时可以省略 status 字段, 省略时和为 0 时表示同一含义.</li><li>非 0 表示发生错误时的错误码, 此时可以省略 data 字段, 并视情况输出 statusInfo 字段作为补充信息</li></ul></li></ul></li><li>statusInfo：状态信息，任意 JSON 数据类型.<ul><li>object 包含 message 和 detail 字段<ul><li>message 字段作为接口处理失败时, 给予用户的友好的提示信息, 即所有给用户的提示信息都统一由后端来处理.</li><li>detail 字段用来放置接口处理失败时的详细错误信息. 只是为了方便排查错误, 前端无需使用</li></ul></li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json; charset=utf-8</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "data": &#123;&#125;,</span><br><span class="line">    "status": 0,</span><br><span class="line">    "statusInfo": &#123;</span><br><span class="line">        "message": "给用户的提示信息",</span><br><span class="line">        "detail": "用于排查错误的详细错误信息"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>响应中状态码的定义</li></ol><p>对于错误码的规范, 参考行业实践, 大致有两种方案</p><p>做显性的类型区分, 快速定位错误的类别, 例如通过字母划分类型: A101, B131</p><ul><li>Standard ISO Response Codes<br>固定位数, 设定区间(例如手机号码, 身份证号码)来划分不同的错误类型</li><li>HTTP Status Code Definitions</li><li>System Error Codes</li></ul><ol start="4"><li>响应码示例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.simtek.cosimcloud.tool;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Http状态码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> HttpStatus &#123;</span><br><span class="line"><span class="comment">//   成功</span></span><br><span class="line">    OK(<span class="number">200</span>, <span class="string">"OK"</span>),</span><br><span class="line">    SERVER_ERROR(<span class="number">1000</span>, <span class="string">"服务器错误"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">//  参数错误：1001-1999</span></span><br><span class="line">    PARAMETER_INVALID(<span class="number">1001</span>, <span class="string">"参数无效"</span>),</span><br><span class="line">    PARAMETER_EMPTY(<span class="number">1002</span>, <span class="string">"参数为空"</span>),</span><br><span class="line">    PARAMETER_TYPE_ERROR(<span class="number">1003</span>, <span class="string">"参数类型错误"</span>),</span><br><span class="line">    PARAMETER_MISSING(<span class="number">1004</span>, <span class="string">"参数缺失"</span>),</span><br><span class="line">    PARAMETER_BAD_CREDENTIALS(<span class="number">1005</span>, <span class="string">"加密错误"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">//  用户错误：2001-2999</span></span><br><span class="line">    USER_NOT_FOUND(<span class="number">2001</span>, <span class="string">"用户名不存在"</span>),</span><br><span class="line">    USER_LOCKED(<span class="number">2002</span>, <span class="string">"账号被停用"</span>),</span><br><span class="line">    USER_ALREADY_EXISTS(<span class="number">2003</span>, <span class="string">"用户已存在"</span>),</span><br><span class="line">    USER_INCORRECT_PASSWORD(<span class="number">2004</span>, <span class="string">"账号不存在或密码错误"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">//    业务错误：3001-3999</span></span><br><span class="line">    PROFESSION_ERROR(<span class="number">3001</span>, <span class="string">"业务错误"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">//    系统错误：4001-4999</span></span><br><span class="line">    SYSTEM_ERROR(<span class="number">4001</span>, <span class="string">"系统繁忙，请稍后重试"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">//    数据错误：5001-5999</span></span><br><span class="line">    DATA_NOT_FOUND(<span class="number">5001</span>, <span class="string">"数据未找到"</span>),</span><br><span class="line">    DATA_ERROR(<span class="number">5002</span>, <span class="string">"数据有误"</span>),</span><br><span class="line">    DATA_EXSITED(<span class="number">5003</span>, <span class="string">"数据已存在"</span>),</span><br><span class="line">    DATA_SEARCH_ERROR(<span class="number">5004</span>, <span class="string">"查询出错"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">//    接口错误：6001-6999</span></span><br><span class="line">    INTERFACE_INTERNAL_SYSTEM_CALL_EXCEPTION(<span class="number">6001</span>, <span class="string">"内部系统接口调用异常"</span>),</span><br><span class="line">    INTERFACE_EXTERNAL_SYSTEM_CALL_EXCEPTION(<span class="number">6002</span>, <span class="string">"外部系统接口调用异常"</span>),</span><br><span class="line">    INTERFACE_FORBIDDEN_ACCESS(<span class="number">6003</span>, <span class="string">"接口禁止访问"</span>),</span><br><span class="line">    INTERFACE_ADDRESS_INVALID(<span class="number">6004</span>, <span class="string">"接口地址无效"</span>),</span><br><span class="line">    INTERFACE_REQUEST_TIMED_OUT(<span class="number">6005</span>, <span class="string">"接口请求超时"</span>),</span><br><span class="line">    INTERFACE_LOAD_IS_TOO_HIGH(<span class="number">6006</span>, <span class="string">"接口负载过高"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">//  权限错误：7001-7999</span></span><br><span class="line"><span class="comment">//    JAVA Web Token</span></span><br><span class="line">    JWT_EXPIRED(<span class="number">7001</span>, <span class="string">"JWT 过期"</span>),</span><br><span class="line">    JWT_SIGNATURE_ERROR(<span class="number">7002</span>, <span class="string">"JWT 错误"</span>),</span><br><span class="line">    JWT_MALFORMED(<span class="number">7003</span>, <span class="string">"JWT 格式错误"</span>),</span><br><span class="line">    USER_FORBIDDEN(<span class="number">7004</span>, <span class="string">"无相关权限，禁止访问"</span>),</span><br><span class="line">    UNAUTHORIZED(<span class="number">7005</span>, <span class="string">"未进行身份认证，无访问权限"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  Integer code;</span><br><span class="line">    <span class="keyword">private</span>  String message;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    HttpStatus(Integer code, String message) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  String detail;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDetail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpStatus <span class="title">setDetail</span><span class="params">(String detail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.detail = detail;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、RESTFUL"><a href="#三、RESTFUL" class="headerlink" title="三、RESTFUL"></a>三、RESTFUL</h1><ol><li>model与entity</li></ol><blockquote><p>MVC是模式，EF是ORM，角色不同。MVC里面的Model是C发给V的。这些Model应该被高度优化，仅仅被对应的View用来显示，额外的数据应该被Model层砍掉以节省磁盘访问、内存占用或者数据库带宽。通常情况下，View的数量都会比你数据库的Entity要多，比如用户要求的各种各样的报表，所以对应的Model也应该比数据访问层的Entity多。假设View和EF的实体类完全一一对应，可以不编写额外的Model。但是随着需求的增多，很难一直使用EF的实体类来做Model。<br>    Entity = Database Table<br>    Model = Entities + Relations<br>    DTO = Entity - Uninteresting Fields<br>    View = DTOs + Relations</p></blockquote><p>Entity是相对数据库而言的，是一个数据实体。而Model是MVC里面的概念，是一个用户所需的最小化视图。</p><ol start="2"><li>Restful中API不同操作的区别</li></ol><p>RESTFUL风格的请求如下：</p><ul><li>GET 获取资源</li><li>POST 创建会话（用户登录）、创建资源、添加资源</li><li>PUT 创建资源、更新资源</li><li>DELETE 删除资源</li><li>PATCH 更新部分资源</li></ul><p>POST与PUT的区别</p><ul><li>在更新资源的操作上，POST 和 PUT 基本相同。在创建资源时，PUT可以指定资源路径，POST无法指定资源路径</li><li>PUT是幂等的操作，即重复操作不会产生变化，10次PUT 的创建请求与1次PUT 的创建请求相同，只会创建一个资源，其实后面9次的请求只是对已创建资源的更新，且更新内容与原内容相同，所以不会产生变化。</li><li>POST 的重复操作截然不同，10次POST请求将会创建10个资源。</li></ul><p>以用户模块为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/user/1 put</span><br><span class="line">/user post</span><br></pre></td></tr></table></figure><p>PUT请求会查询ID为1的用户，如果不存在就创建；如果存在，就更新；POST请求会直接使用数据创建用户，一次请求表示创建一个用户。</p><p>Springboot中相关的注解</p><ul><li>@GetMapping </li><li>@PostMapping </li><li>@PutMapping  </li><li>@DeleteMapping </li><li>@PatchMapping </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/get/&#123;id&#125;&quot;, method = RequestMethod.GET)</span><br><span class="line">===&gt;</span><br><span class="line">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span><br></pre></td></tr></table></figure><ol start="3"><li>RESTFUL URL</li></ol><p>3.1 命名规则</p><p>URL命名通常有三种，驼峰命名法(serverAddress)，蛇形命名法(server_address)，脊柱命名法(server-address)。由于URL是大小写敏感的，如果用驼峰命名在输入的时候就要求区分大小写，一个是增加输入难度，另外也容易输错，报404（aB）。蛇形命名法用下划线（a_b），在输入的时候需要切换shfit，同时下划线容易被文本编辑器的下划线掩盖，支付宝用的是蛇形命名法，stackoverflow.com和github.com用的是脊柱命名法(a-b)</p><ul><li>URL请求采用小写字母，数字，部分特殊符号（非制表符）组成。</li><li>URL请求中不采用大小写混合的驼峰命名方式，尽量采用全小写单词，如果需要连接多个单词，则采用连接符“_”连接单词</li></ul><p>3.2 CRUD请求定义规范</p><p>第一级Pattern为模块,比如组织管理/orgz, 网格化：/grid；<br>第二级Pattern为资源分类或者功能请求，优先采用资源分类；如果为资源分类，则按照RESTful的方式定义第三级Pattern；定义类似如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/orgz/members GET 获取成员列表</span><br><span class="line">/orgz/members/120 GET 获取单个成员</span><br><span class="line">/orgz/members POST 创建成员</span><br><span class="line">/orgz/members/120 PUT 修改成员</span><br><span class="line">/orgz/members PUT 批量修改</span><br><span class="line">/orgz/members/120 PATCH 修改成员的部分属性</span><br><span class="line">/orgz/members/120 DELETE 删除成员</span><br></pre></td></tr></table></figure><h1 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h1><blockquote><p><a href="https://www.zhihu.com/question/61415974/answer/187589565" target="_blank" rel="noopener">前后端接口联调</a><br><a href="https://www.zhihu.com/question/25256772" target="_blank" rel="noopener">什么时候用Model，什么时候用Entity？</a><br><a href="https://www.pianshen.com/article/4262562009/" target="_blank" rel="noopener">RESTFUL URL命名原则</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、前后端正常交互的流程&quot;&gt;&lt;a href=&quot;#一、前后端正常交互的流程&quot; class=&quot;headerlink&quot; title=&quot;一、前后端正常交互的流程&quot;&gt;&lt;/a&gt;一、前后端正常交互的流程&lt;/h1&gt;&lt;p&gt;1、评审阶段：产品召集前后端进行需求评审，前后端各自捋清楚自</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>swagger2的使用</title>
    <link href="http://zws6672.top/2021/06/15/swagger2/"/>
    <id>http://zws6672.top/2021/06/15/swagger2/</id>
    <published>2021-06-15T08:43:10.000Z</published>
    <updated>2021-06-17T14:59:52.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h1><p>API功能的发展是不可避免的，但维护API文档的头痛并非必须如此。Swagger工具可以帮助您完成生成和维护API文档的工作，确保您的文档在API发展过程中保持最新状态。在Swagger团队加入SmartBear并且该规范于2015年被捐赠给OpenAPI计划之后，Swagger规范被重命名为OpenAPI规范（OAS），已成为定义RESTful API的因素标准。</p><blockquote><p>OAS合同描述了API的作用，它的请求参数和响应对象，所有这些都没有任何代码实现的指示。使用OAS定义的Web服务可以相互通信，而不管它们内置的语言，因为OAS是语言&gt;无关的和机器可读的。</p></blockquote><p>而Swagger的优势是可以生成API文档、在线对接口进行测试。</p><p>Swagger组成：</p><ul><li>swagger<ul><li>Swagger Editor：基于浏览器的编辑器，我们可以使用它编写我们 OpenAPI 规范。</li><li>Swagger UI：它会将我们编写的 OpenAPI 规范呈现为交互式的 API 文档，后文我将使用浏览器来查看并且操作我们的 Rest API。</li><li>Swagger Codegen：它可以通过为 OpenAPI（以前称为 Swagger）规范定义的任何 API 生成服务器存根和客户端 SDK 来简化构建过程。</li></ul></li></ul><p>使用步骤</p><ul><li>引入maven包</li><li>编写接口文件</li><li>使用<strong>knife4j</strong>展示，是以前使用的<code>swagger-ui</code>升级版。</li></ul><h1 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h1><ol><li>导包</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置</li></ol><p>定义配置类，定义全局状态。<code>HttpStatus</code>是定义的全局状态类，存放了响应状态码。通过<code>globalResponseMessage</code>方法可以将它设置为全局的响应信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zws</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> swagger配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 17:41 2021/5/28</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConf</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span>  List responseList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Arrays.stream(</span><br><span class="line">                HttpStatus.values()).forEach(</span><br><span class="line">                        status -&gt; responseList.add(</span><br><span class="line">                                <span class="keyword">new</span> ResponseMessageBuilder().code(status.getCode())</span><br><span class="line">                                        .message(status.getMessage())</span><br><span class="line">                                        .responseModel(</span><br><span class="line">                                                <span class="keyword">new</span> ModelRef(status.getMessage()))</span><br><span class="line">                                        .build()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .globalResponseMessage(RequestMethod.GET, responseList)</span><br><span class="line">                .globalResponseMessage(RequestMethod.POST, responseList)</span><br><span class="line">                .globalResponseMessage(RequestMethod.PUT, responseList)</span><br><span class="line">                .globalResponseMessage(RequestMethod.DELETE, responseList)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.simtek.cosimcloud.controller"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .pathMapping(<span class="string">"/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Cosim Cloud 接口文档"</span>)</span><br><span class="line">                .description(<span class="string">"RestFul风格, 创建人：zws"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"https://github.com/cicadasmile"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际使用中，一般会有多个环境，例如开发环境、正式环境；在正式环境中就不应当展示文档界面。我们可以通过以下的方式来切换环境：</p><ul><li>在正式环境注释掉 swagger配置类的注解</li><li>从配置类获取配置</li></ul><p>两种方法中，第二种虽然有一定工作量，但是效果更好，可以快速切换，无需二次编译。如application.yml：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="3"><li>处理资源拦截问题</li></ol><p>在IDEA中如此配置后，还是无法访问，搜索了资料，发现是资源被拦截，定义如下类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntercpetorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置swagger静态资源访问</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>).addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"doc.html"</span>).addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/webjars/**"</span>).addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><p>然后，通过<code>http://localhost:8080/doc.html</code>即可访问了（默认路径是：<a href="http://localhost:8080/swagger-ui.html）。如下图所示：" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html）。如下图所示：</a></p><p><img src="/image/swagger/swagger-ui.png" alt="swagger2示意图"></p><h1 id="三、注解"><a href="#三、注解" class="headerlink" title="三、注解"></a>三、注解</h1><ol><li>使用于API的注解</li></ol><p>1.1 使用在类的注解</p><ul><li>@Api：定义一个API<ul><li>value    url的路径值</li><li>tags    如果设置这个值、value的值会被覆盖</li><li>description    对api资源的描述</li><li>basePath    基本路径</li><li>position    如果配置多个Api 想改变显示的顺序位置</li><li>produces    如, “application/json, application/xml”</li><li>consumes    如, “application/json, application/xml”</li><li>protocols    协议类型，如: http, https, ws, wss.</li><li>authorizations    高级特性认证时配置</li><li>hidden    配置为true ，将在文档中隐藏</li></ul></li></ul><p>1.2 使用在方法的注解</p><ul><li>@ApiOperation：”用在请求的方法上，说明方法的作用”<ul><li>value=”说明方法的作用”</li><li>notes=”方法的备注说明”</li></ul></li><li>@ApiImplicitParams：用在请求的方法上，包含一组参数说明<ul><li>@ApiImplicitParam：对单个参数的说明        <ul><li>name：参数名</li><li>value：参数的说明、描述</li><li>required：参数是否必须必填</li><li>paramType：参数放在哪个地方<ul><li>query –&gt; 请求参数的获取：@RequestParam</li><li>header –&gt; 请求参数的获取：@RequestHeader          </li><li>path（用于restful接口）–&gt; 请求参数的获取：@PathVariable</li><li>body（请求体）–&gt;  @RequestBody User user</li><li>form（普通表单提交）       </li></ul></li><li>dataType：参数类型，默认String，其它值dataType=”Integer”       </li><li>defaultValue：参数的默认值</li></ul></li></ul></li><li>@ApiResponses：方法返回对象的说明<ul><li>@ApiResponse：每个参数的说明<ul><li>code：数字，例如400</li><li>message：信息，例如”请求参数没填好”</li><li>response：抛出异常的类</li></ul></li></ul></li></ul><ol start="2"><li>使用在Model的注解</li></ol><ul><li>@ApiModel：用于JavaBean上面，表示对JavaBean 的功能描述<ul><li>@ApiModelProperty：用在JavaBean类的属性上面，说明属性的含义</li></ul></li></ul><ol start="3"><li>忽略</li></ol><ul><li>@ApiIgnore()用于类，方法，方法参数 <ul><li>表示这个方法或者类被忽略 </li></ul></li></ul><h1 id="四、使用"><a href="#四、使用" class="headerlink" title="四、使用"></a>四、使用</h1><p>控制器的编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"用户接口"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"用户登录接口"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">                <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"mobile"</span>, value = <span class="string">"手机号"</span>, defaultValue = <span class="string">"178XXXXXXXX"</span>, required = <span class="keyword">true</span>),</span><br><span class="line">                <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"password"</span>, value = <span class="string">"密码"</span>, defaultValue = <span class="string">"dfdsfsf"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CosimResponse <span class="title">login</span><span class="params">(String mobile, String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.checkUser(mobile, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"用户注册接口"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户"</span>, required = <span class="keyword">true</span>, paramType = <span class="string">"com.simtek.cosimcloud.dao.entity.User"</span>)</span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CosimResponse <span class="title">register</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"用户信息接口"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CosimResponse <span class="title">getById</span><span class="params">(@PathVariable String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"用户注销接口"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CosimResponse <span class="title">delete</span><span class="params">(@PathVariable String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel</span>(value = <span class="string">"用户"</span>, description = <span class="string">"表示用户的实体类"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties</span>(value = &#123;<span class="string">"hibernateLazyInitializer"</span>,<span class="string">"handler"</span> &#125;)</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"t_user"</span>)</span><br><span class="line"><span class="meta">@org</span>.hibernate.annotations.Table(appliesTo = <span class="string">"t_user"</span>, comment = <span class="string">"用户信息表"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator = <span class="string">"uuid"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"uuid"</span>, strategy = <span class="string">"org.hibernate.id.UUIDGenerator"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户id"</span>)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>, length = <span class="number">36</span>, nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"r_id"</span>, columnDefinition = <span class="string">"tinyint(4) default '1' comment '用户角色：0 管理员，1 用户 '"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"角色类型"</span>)</span><br><span class="line">    <span class="keyword">private</span> Long rid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"register_source"</span>, columnDefinition = <span class="string">"tinyint(4) unsigned default '0' comment '注册来源：0手机号 1邮箱 2用户名 3备用'"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"注册途径"</span>)</span><br><span class="line">    <span class="keyword">private</span> Byte registerSource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"password"</span>, columnDefinition = <span class="string">"varchar(48) comment '密码'"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户密码"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"mobile"</span>, columnDefinition = <span class="string">" varchar(16) default '' comment '手机号'"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户手机号"</span>)</span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"mobile_bind_time"</span>,  columnDefinition = <span class="string">"TIMESTAMP DEFAULT CURRENT_TIMESTAMP comment '手机绑定时间'"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"手机绑定时间"</span>)</span><br><span class="line">    <span class="meta">@Generated</span>(GenerationTime.INSERT)</span><br><span class="line">    <span class="keyword">private</span> java.sql.Timestamp mobileBindTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"email"</span>,  columnDefinition = <span class="string">"varchar(128) default '' comment '邮箱'"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户邮箱"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"email_bind_time"</span>,  columnDefinition = <span class="string">"TIMESTAMP DEFAULT CURRENT_TIMESTAMP comment '邮箱绑定时间'"</span>)</span><br><span class="line">    <span class="meta">@Generated</span>(GenerationTime.INSERT)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户邮箱绑定时间"</span>)</span><br><span class="line">    <span class="keyword">private</span> java.sql.Timestamp emailBindTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"nick_name"</span>, columnDefinition = <span class="string">"varchar(48) comment '用户昵称'"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户昵称"</span>)</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"gender"</span>, columnDefinition = <span class="string">"tinyint(1) default '1' comment '用户性别 0-female 1-male'"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户性别"</span>)</span><br><span class="line">    <span class="keyword">private</span> Byte gender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"birthday"</span>, columnDefinition = <span class="string">"TIMESTAMP DEFAULT CURRENT_TIMESTAMP comment '生日'"</span>)</span><br><span class="line">    <span class="meta">@Generated</span>(GenerationTime.INSERT)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户生辰"</span>)</span><br><span class="line">    <span class="keyword">private</span> java.sql.Timestamp birthday;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"face"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户图片"</span>)</span><br><span class="line">    <span class="keyword">private</span> String face;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"face200"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户图片200*200"</span>)</span><br><span class="line">    <span class="keyword">private</span> String face200;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"is_delete"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"是否删除"</span>)</span><br><span class="line">    <span class="keyword">private</span> Boolean isDelete;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String id, Long rid, Byte registerSource, String password, String mobile, Timestamp mobileBindTime, String email, Timestamp emailBindTime, String nickName, Byte gender, Timestamp birthday, String face, String face200, Boolean isDelete, Timestamp createTime, Timestamp loginTime, Timestamp lastLoginTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.rid = rid;</span><br><span class="line">        <span class="keyword">this</span>.registerSource = registerSource;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.mobile = mobile;</span><br><span class="line">        <span class="keyword">this</span>.mobileBindTime = mobileBindTime;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.emailBindTime = emailBindTime;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">        <span class="keyword">this</span>.face = face;</span><br><span class="line">        <span class="keyword">this</span>.face200 = face200;</span><br><span class="line">        <span class="keyword">this</span>.isDelete = isDelete;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">        <span class="keyword">this</span>.loginTime = loginTime;</span><br><span class="line">        <span class="keyword">this</span>.lastLoginTime = lastLoginTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"create_time"</span>,  columnDefinition = <span class="string">"TIMESTAMP DEFAULT CURRENT_TIMESTAMP comment '绑定时间'"</span>)</span><br><span class="line">    <span class="meta">@Generated</span>(GenerationTime.INSERT)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户创建时间"</span>)</span><br><span class="line">    <span class="keyword">private</span> java.sql.Timestamp createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"login_time"</span>,  columnDefinition = <span class="string">"TIMESTAMP DEFAULT CURRENT_TIMESTAMP comment '登录时间'"</span>)</span><br><span class="line">    <span class="meta">@Generated</span>(GenerationTime.INSERT)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户登陆时间"</span>)</span><br><span class="line">    <span class="keyword">private</span> java.sql.Timestamp loginTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_login_time"</span>,  columnDefinition = <span class="string">"TIMESTAMP DEFAULT CURRENT_TIMESTAMP comment '上次登录时间'"</span>)</span><br><span class="line">    <span class="meta">@Generated</span>(GenerationTime.INSERT)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户最后登陆时间"</span>)</span><br><span class="line">    <span class="keyword">private</span> java.sql.Timestamp lastLoginTime;</span><br><span class="line">`</span><br><span class="line">。。。。忽略的getter/setter方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成文档如下所示：</p><p><img src="/image/swagger/swagger2-user.png" alt="swagger2-user"></p><h1 id="四、导读"><a href="#四、导读" class="headerlink" title="四、导读"></a>四、导读</h1><blockquote><p><a href="https://juejin.im/post/5d4a22aaf265da03ca1154c4" target="_blank" rel="noopener">Spring Boot 2.x（十二）：Swagger2的正确玩法</a><br><a href="https://juejin.im/post/5dcc00c2e51d45105d56306e" target="_blank" rel="noopener">springboot+swagger接口文档企业实践（上）</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、基础&quot;&gt;&lt;a href=&quot;#一、基础&quot; class=&quot;headerlink&quot; title=&quot;一、基础&quot;&gt;&lt;/a&gt;一、基础&lt;/h1&gt;&lt;p&gt;API功能的发展是不可避免的，但维护API文档的头痛并非必须如此。Swagger工具可以帮助您完成生成和维护API文档的工作</summary>
      
    
    
    
    
    <category term="springboot" scheme="http://zws6672.top/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>OpenAPI 3.0</title>
    <link href="http://zws6672.top/2021/06/15/OpenAPI3-0/"/>
    <id>http://zws6672.top/2021/06/15/OpenAPI3-0/</id>
    <published>2021-06-15T08:31:02.000Z</published>
    <updated>2021-06-16T01:15:37.894Z</updated>
    
    <content type="html"><![CDATA[<p>OpenAPI3.0的部分译文，来自于<a href="https://github.com/fishead/OpenAPI-Specification" target="_blank" rel="noopener">Github相关 项目</a> ，存储避免丢失。</p><h1 id="开放API规范"><a href="#开放API规范" class="headerlink" title="开放API规范"></a>开放API规范</h1><h4 id="版本-3-0-0"><a href="#版本-3-0-0" class="headerlink" title="版本 3.0.0"></a>版本 3.0.0</h4><p>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <a href="https://tools.ietf.org/html/bcp14" target="_blank" rel="noopener">BCP 14</a> <a href="https://tools.ietf.org/html/rfc2119" target="_blank" rel="noopener">RFC2119</a> <a href="https://tools.ietf.org/html/rfc8174" target="_blank" rel="noopener">RFC8174</a> when, and only when, they appear in all capitals, as shown here.</p><p>This document is licensed under <a href="http://www.apache.org/licenses/LICENSE-2.0.html" target="_blank" rel="noopener">The Apache License, Version 2.0</a>.</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>OpenAPI 规范（OAS），是定义一个标准的、与具体编程语言无关的RESTful API的规范。OpenAPI 规范使得人类和计算机都能在“不接触任何程序源代码和文档、不监控网络通信”的情况下理解一个服务的作用。如果您在定义您的 API 时做的很好，那么使用 API 的人就能非常轻松地理解您提供的 API 并与之交互了。</p><p>如果您遵循 OpenAPI 规范来定义您的 API，那么您就可以用文档生成工具来展示您的 API，用代码生成工具来自动生成各种编程语言的服务器端和客户端的代码，用自动测试工具进行测试等等。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><!-- TOC depthFrom:1 depthTo:3 withLinks:1 updateOnSave:1 orderedList:0 --><ul><li><a href="#definitions">定义</a><ul><li><a href="#oasDocument">开放API文档</a></li><li><a href="#pathTemplating">路径模板</a></li><li><a href="#mediaTypes">媒体类型</a></li><li><a href="#httpCodes">HTTP 状态码</a></li></ul></li><li><a href="#specification">规范</a><ul><li><a href="#versions">版本</a></li><li><a href="#format">格式</a></li><li><a href="#documentStructure">文档结构</a></li><li><a href="#dataTypes">数据类型</a></li><li><a href="#richText">富文本格式</a></li><li><a href="#relativeReferences">相对引用</a></li><li><a href="#schema">结构</a><ul><li><a href="#oasObject">OpenAPI 对象</a></li><li><a href="#infoObject">Info 对象</a></li><li><a href="#contactObject">Contact 对象</a></li><li><a href="#licenseObject">License 对象</a></li><li><a href="#serverObject">Server 对象</a></li><li><a href="#serverVariableObject">Server Variable 对象</a></li><li><a href="#componentsObject">Components 对象</a></li><li><a href="#pathsObject">Paths 对象</a></li><li><a href="#pathItemObject">Path Item 对象</a></li><li><a href="#operationObject">Operation 对象</a></li><li><a href="#externalDocumentationObject">External Documentation 对象</a></li><li><a href="#parameterObject">Parameter 对象</a></li><li><a href="#requestBodyObject">Request Body 对象</a></li><li><a href="#mediaTypeObject">Media Type 对象</a></li><li><a href="#encodingObject">Encoding 对象</a></li><li><a href="#responsesObject">Responses 对象</a></li><li><a href="#responseObject">Response 对象</a></li><li><a href="#callbackObject">Callback 对象</a></li><li><a href="#exampleObject">Example 对象</a></li><li><a href="#linkObject">Link 对象</a></li><li><a href="#headerObject">Header 对象</a></li><li><a href="#tagObject">Tag 对象</a></li><li><a href="#referenceObject">Reference 对象</a></li><li><a href="#schemaObject">Schema 对象</a></li><li><a href="#discriminatorObject">Discriminator 对象</a></li><li><a href="#xmlObject">XML 对象</a></li><li><a href="#securitySchemeObject">Security Scheme 对象</a></li><li><a href="#oauthFlowsObject">OAuth Flows 对象</a></li><li><a href="#oauthFlowObject">OAuth Flow 对象</a></li><li><a href="#securityRequirementObject">Security Requirement 对象</a></li></ul></li><li><a href="#specificationExtensions">规范扩展</a></li><li><a href="#securityFiltering">Security Filtering</a></li></ul></li><li><a href="#revisionHistory">附录 A: 修订历史</a></li></ul><!-- /TOC --><h2 id="术语定义"><a href="#术语定义" class="headerlink" title="术语定义"></a><a name="definitions"></a>术语定义</h2><h5 id="开放API文档"><a href="#开放API文档" class="headerlink" title="开放API文档"></a><a name="oasDocument"></a>开放API文档</h5><p>一（或多）份用来定义或描述一个API的文档。</p><h5 id="路径模板"><a href="#路径模板" class="headerlink" title="路径模板"></a><a name="pathTemplating"></a>路径模板</h5><p>路径模板指用大括号标记来标记一段URL作为可替换的路径参数。</p><h5 id="媒体类型"><a href="#媒体类型" class="headerlink" title="媒体类型"></a><a name="mediaTypes"></a>媒体类型</h5><p>媒体类型定义分散于多处。<br>媒体类型定义应当符合<a href="http://tools.ietf.org/html/rfc6838" target="_blank" rel="noopener">RFC6838</a>。</p><p>以下是一些媒体类型定义的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">text/plain; charset=utf-8</span><br><span class="line">application/json</span><br><span class="line">application/vnd.github+json</span><br><span class="line">application/vnd.github.v3+json</span><br><span class="line">application/vnd.github.v3.raw+json</span><br><span class="line">application/vnd.github.v3.text+json</span><br><span class="line">application/vnd.github.v3.html+json</span><br><span class="line">application/vnd.github.v3.full+json</span><br><span class="line">application/vnd.github.v3.diff</span><br><span class="line">application/vnd.github.v3.patch</span><br></pre></td></tr></table></figure><h5 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a><a name="httpCodes"></a>HTTP状态码</h5><p>HTTP状态码被用来表示一次请求的被执行状态。<br><a href="http://tools.ietf.org/html/rfc7231#section-6" target="_blank" rel="noopener">RFC7231</a>定义了有效的状态码，可以在<a href="http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml" target="_blank" rel="noopener">IANA Status Code Registry</a>找到已经被注册的状态码的列表。</p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a><a name="specification"></a>规范</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a><a name="versions"></a>版本</h3><p>开放API规范使用符合<a href="http://semver.org/spec/v2.0.0.html" target="_blank" rel="noopener">语义化版本 2.0.0</a>(semver)规范的版本号。</p><p>语义化版本的<code>主版本号</code>、<code>次版本号</code>部分（比如<code>3.0</code>）应当被用来标记开放API规范的特性变动。通常 <em><code>.修订号</code></em> 版本被用来表示本文档文档的错误修正而不是特性变动。支持开放API规范3.0的工具应该兼容所有3.0.*的版本，工具不应当关注修订版本号，比如<code>3.0.0</code>和<code>3.0.1</code>对它来说应该没有任何区别。</p><p>此后开放API规范的相同主版本号下更高次要版本的发布不应当对面向低于此次要版本号开发的工具的造成干扰。因此<code>3.1.0</code>版本的规范应当可以在面向<code>3.0.0</code>版本规范开发的工具内使用。</p><p>任何兼容开放API规范 3.*.* 的文档应当包含一个<a href="#oasVersion"><code>openapi</code></a> 字段用来表明它使用的规范的语义化版本。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a><a name="format"></a>格式</h3><p>一份遵从开放API规范的文档是一个自包含的JSON对象，可以使用JSON或YAML格式编写。</p><p>比如一个字段有一组值，用JSON格式表示为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"field"</span>: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规范内的所有字段名都是<strong>小写</strong>。</p><p>字段分为两种：固定字段和模式字段。固定字段的字段名是确定的，模式字段的字段名需要符合一定的模式。</p><p>如果一个对象里有模式字段，那么在这个对象里的模式字段的名字不能有重复的。</p><p>为了保留在 YAML 和 JSON 格式之间转换的能力，推荐使用<a href="http://www.yaml.org/spec/1.2/spec.html" target="_blank" rel="noopener">1.2</a>版本的YAML格式，而且还需要符合以下限制：</p><ul><li>Tags 必须被限制在<a href="http://www.yaml.org/spec/1.2/spec.html#id2803231" target="_blank" rel="noopener">JSON Schema ruleset</a>允许的范围内。</li><li>Keys 必须是<a href="http://yaml.org/spec/1.2/spec.html#id2802346" target="_blank" rel="noopener">YAML Failsafe schema ruleset</a>规范定义的纯字符串。</li></ul><p><strong>注意：</strong> 虽然API文档是使用 YAML 或 JSON 格式书写的，但是API的请求体和响应体或者其他内容可以是任何格式。</p><h3 id="文档结构"><a href="#文档结构" class="headerlink" title="文档结构"></a><a name="documentStructure"></a>文档结构</h3><p>一份 OpenAPI 文档可以是单个文件也可以被拆分为多个文件， 连接的部分由用户自行决定。在后一种情形下，必须如 <a href="http://json-schema.org" target="_blank" rel="noopener">JSON Schema</a> 中定义的那样使用 <code>$ref</code> 字段来相互引用。</p><p>推荐将根开放API文档命名为<code>openapi.json</code> 或 <code>openapi.yaml</code>。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><a name="dataTypes"></a>数据类型</h3><p>在 OAS 中的原始数据类型是基于 <a href="https://tools.ietf.org/html/draft-wright-json-schema-00#section-4.2" target="_blank" rel="noopener">JSON Schema Specification Wright Draft 00</a> 所支持的类型。注意 <code>integer</code> 也作为一个被支持的类型并被定义为不包含小数或指数部分的 JSON 数字。<br><code>null</code> 不是一个被支持的类型 (查看 <a href="#schemaNullable"><code>nullable</code></a> 来获得替代解决方案)。<br>Models 使用 <a href="#schemaObject">Schema Object</a> 定义，这是一个 JSON Schema Specification Wright Draft 00 的扩展。</p><p><a name="dataTypeFormat"></a>原始类型可以有一个可选的修饰属性：<code>format</code>。<br>OAS 使用多个已知的格式来丰富类型定义。尽管如此，为了文档的需要，<code>format</code> 属性被设计为一个 <code>string</code> 类型的开放属性值，可以包含任意值。比如 <code>&quot;email&quot;</code>, <code>&quot;uuid&quot;</code> 等未被此规范定义的格式也可以被使用。没有被定义的 <code>format</code> 属性类型遵从 JSON Schema 中的类型定义。无法识别某个 <code>format</code> 值的工具应该回退到 <code>type</code> 值，就像 <code>format</code> 未被指定一样。</p><p>被 OAS 定义的格式:</p><table><thead><tr><th>通用名</th><th><a href="#dataTypes"><code>type</code></a></th><th><a href="#dataTypeFormat"><code>format</code></a></th><th>备注</th></tr></thead><tbody><tr><td>integer</td><td><code>integer</code></td><td><code>int32</code></td><td>32 位有符号</td></tr><tr><td>long</td><td><code>integer</code></td><td><code>int64</code></td><td>64 位有符号</td></tr><tr><td>float</td><td><code>number</code></td><td><code>float</code></td><td></td></tr><tr><td>double</td><td><code>number</code></td><td><code>double</code></td><td></td></tr><tr><td>string</td><td><code>string</code></td><td></td><td></td></tr><tr><td>byte</td><td><code>string</code></td><td><code>byte</code></td><td>base64 编码的支付</td></tr><tr><td>binary</td><td><code>string</code></td><td><code>binary</code></td><td>任意 8进制序列</td></tr><tr><td>boolean</td><td><code>boolean</code></td><td></td><td></td></tr><tr><td>date</td><td><code>string</code></td><td><code>date</code></td><td>定义于 <code>full-date</code> - <a href="http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14" target="_blank" rel="noopener">RFC3339</a></td></tr><tr><td>dateTime</td><td><code>string</code></td><td><code>date-time</code></td><td>定义于 <code>date-time</code> - <a href="http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14" target="_blank" rel="noopener">RFC3339</a></td></tr><tr><td>password</td><td><code>string</code></td><td><code>password</code></td><td>告知输入界面不应该明文显示输入信息。</td></tr></tbody></table><h3 id="富文本格式"><a href="#富文本格式" class="headerlink" title="富文本格式"></a><a name="richText"></a>富文本格式</h3><p>整个规范中的 <code>description</code> 字段被标记为支持 CommonMark markdown 格式。<br>OpenAPI 相关的工具在支持 <a href="http://spec.commonmark.org/0.27/" target="_blank" rel="noopener">CommonMark 0.27</a> 中描述的富文本格式方面至少需要支持渲染 markerdown。相关工具为了安全考虑可以选择忽略某些 CommonMark 特性。</p><h3 id="URL的相对引用"><a href="#URL的相对引用" class="headerlink" title="URL的相对引用"></a><a name="relativeReferences"></a>URL的相对引用</h3><p>除非明确指定，所有 URL 类型的属性值都可以是相对地址，就如 <a href="https://tools.ietf.org/html/rfc3986#section-4.2" target="_blank" rel="noopener">RFC3986</a> 中定义的那样以 <a href="#serverObject"><code>Server Object</code></a> 作为 Base URI。</p><p>在 <code>$ref</code> 中的相对引用以 <a href="https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03" target="_blank" rel="noopener">JSON Reference</a> 为依据，以当前文档的 URL 作为 base URI. 同时参考 <a href="#referenceObject">Reference Object</a>。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a><a name="schema"></a>结构</h3><p>在接下来的叙述中，如果一个字段没有被明确的标记为 <strong>必选</strong> 或者被描述为 <strong>必须</strong> 或 <strong>应当</strong>，那么可以认为它是一个 <strong>可选</strong> 字段</p><h4 id="OpenAPI-对象"><a href="#OpenAPI-对象" class="headerlink" title="OpenAPI 对象"></a><a name="oasObject"></a>OpenAPI 对象</h4><p>这是<a href="#oasDocument">OpenAPI document</a>的根文档对象。</p><h5 id="固定字段"><a href="#固定字段" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="oasVersion"></a>openapi</td><td align="center"><code>string</code></td><td><strong>必选</strong>. 这个字符串必须是<a href="#versions">开放API规范版本号</a>提到的符合<a href="http://semver.org/spec/v2.0.0.html" target="_blank" rel="noopener">语义化版本号规范</a>的版本号。<code>openapi</code>字段应该被工具或者客户端用来解释开放API文档。这个值和API <a href="#infoVersion"><code>info.version</code></a>字符串没有关联。</td></tr><tr><td><a name="oasInfo"></a>info</td><td align="center"><a href="#infoObject">Info 对象</a></td><td><strong>必选</strong>。此字段提供API相关的元数据。相关工具可能需要这个字段。</td></tr><tr><td><a name="oasServers"></a>servers</td><td align="center">[<a href="#serverObject">Server 对象</a>]</td><td>这是一个Server对象的数组， 提供到服务器的连接信息。如果没有提供<code>servers</code>属性或者是一个空数组，那么默认为是<a href="#serverUrl">url</a>值为<code>/</code>的 <a href="#serverObject">Server 对象</a> 。</td></tr><tr><td><a name="oasPaths"></a>paths</td><td align="center"><a href="#pathsObject">Paths 对象</a></td><td><strong>必选</strong>。对所提供的API有效的路径和操作。</td></tr><tr><td><a name="oasComponents"></a>components</td><td align="center"><a href="#componentsObject">Components 对象</a></td><td>一个包含多种结构的元素。</td></tr><tr><td><a name="oasSecurity"></a>security</td><td align="center">[<a href="#securityRequirementObject">Security Requirement 对象</a>]</td><td>声明API使用的安全机制。The list of values includes alternative security requirement objects that can be used. 认证一个请求时仅允许使用一种安全机制。单独的操作可以覆盖这里的定义。</td></tr><tr><td><a name="oasTags"></a>tags</td><td align="center">[<a href="#tagObject">Tag 对象</a>]</td><td>提供更多元数据的一系列标签，标签的顺序可以被转换工具用来决定API的顺序。不是所有被<a href="#operationObject">Operation 对象</a>用到的标签都必须被声明。没有被声明的标签可能被工具按自己的逻辑任意整理，每个标签名都应该是唯一的。</td></tr><tr><td><a name="oasExternalDocs"></a>externalDocs</td><td align="center"><a href="#externalDocumentationObject">External Documentation 对象</a></td><td>附加的文档。这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</td></tr></tbody></table><h4 id="Info-对象"><a href="#Info-对象" class="headerlink" title="Info 对象"></a><a name="infoObject"></a>Info 对象</h4><p>这个对象提供API的元数据。如果客户端需要时可能会用到这些元数据，而且可能会被呈现在编辑工具或者文档生成工具中。</p><h5 id="固定字段-1"><a href="#固定字段-1" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="infoTitle"></a>title</td><td align="center"><code>string</code></td><td><strong>必选</strong>. 应用的名称。</td></tr><tr><td><a name="infoDescription"></a>description</td><td align="center"><code>string</code></td><td>对应用的简短描述。 <a href="http://spec.commonmark.org/" target="_blank" rel="noopener">CommonMark syntax</a> 可以被用来表示富文本呈现。</td></tr><tr><td><a name="infoTermsOfService"></a>termsOfService</td><td align="center"><code>string</code></td><td>指向服务条款的URL地址，必须是URL地址格式。</td></tr><tr><td><a name="infoContact"></a>contact</td><td align="center"><a href="#contactObject">Contact Object</a></td><td>所开放的API的联系人信息。</td></tr><tr><td><a name="infoLicense"></a>license</td><td align="center"><a href="#licenseObject">License Object</a></td><td>所开放的API的证书信息。</td></tr><tr><td><a name="infoVersion"></a>version</td><td align="center"><code>string</code></td><td><strong>必选</strong>. API文档的版本信息（注意：这个版本和<a href="#oasVersion">开放API规范版本</a>没有任何关系）。</td></tr></tbody></table><h5 id="Info-对象示例"><a href="#Info-对象示例" class="headerlink" title="Info 对象示例"></a>Info 对象示例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;Sample Pet Store App&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;This is a sample server for a pet store.&quot;,</span><br><span class="line">  &quot;termsOfService&quot;: &quot;http://example.com/terms/&quot;,</span><br><span class="line">  &quot;contact&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;API Support&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;http://www.example.com/support&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;support@example.com&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;license&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;Apache 2.0&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;http://www.apache.org/licenses/LICENSE-2.0.html&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Sample</span> <span class="string">Pet</span> <span class="string">Store</span> <span class="string">App</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">a</span> <span class="string">sample</span> <span class="string">server</span> <span class="string">for</span> <span class="string">a</span> <span class="string">pet</span> <span class="string">store.</span></span><br><span class="line"><span class="attr">termsOfService:</span> <span class="attr">http://example.com/terms/</span></span><br><span class="line"><span class="attr">contact:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">API</span> <span class="string">Support</span></span><br><span class="line"><span class="attr">  url:</span> <span class="attr">http://www.example.com/support</span></span><br><span class="line"><span class="attr">  email:</span> <span class="string">support@example.com</span></span><br><span class="line"><span class="attr">license:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">Apache</span> <span class="number">2.0</span></span><br><span class="line"><span class="attr">  url:</span> <span class="attr">http://www.apache.org/licenses/LICENSE-2.0.html</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">1.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h4 id="Contact-对象"><a href="#Contact-对象" class="headerlink" title="Contact 对象"></a><a name="contactObject"></a>Contact 对象</h4><p>所公开的API的联系人信息</p><h5 id="固定字段-2"><a href="#固定字段-2" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="contactName"></a>name</td><td align="center"><code>string</code></td><td>人或组织的名称。</td></tr><tr><td><a name="contactUrl"></a>url</td><td align="center"><code>string</code></td><td>指向联系人信息的URL地址，必须是URL地址格式。</td></tr><tr><td><a name="contactEmail"></a>email</td><td align="center"><code>string</code></td><td>人或组织的email地址，必须是email地址格式。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="Contact-对象示例"><a href="#Contact-对象示例" class="headerlink" title="Contact 对象示例"></a>Contact 对象示例</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"API Support"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"http://www.example.com/support"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"support@example.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">API</span> <span class="string">Support</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://www.example.com/support</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">support@example.com</span></span><br></pre></td></tr></table></figure><h4 id="License-对象"><a href="#License-对象" class="headerlink" title="License 对象"></a><a name="licenseObject"></a>License 对象</h4><p>公开API的证书信息。</p><h5 id="固定字段-3"><a href="#固定字段-3" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="licenseName"></a>name</td><td align="center"><code>string</code></td><td><strong>必选</strong>. API的证书名。</td></tr><tr><td><a name="licenseUrl"></a>url</td><td align="center"><code>string</code></td><td>指向API所使用的证书的URL地址，必须是URL地址格式。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="License-对象示例"><a href="#License-对象示例" class="headerlink" title="License 对象示例"></a>License 对象示例</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Apache 2.0"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"http://www.apache.org/licenses/LICENSE-2.0.html"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Apache</span> <span class="number">2.0</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://www.apache.org/licenses/LICENSE-2.0.html</span></span><br></pre></td></tr></table></figure><h4 id="Server-对象"><a href="#Server-对象" class="headerlink" title="Server 对象"></a><a name="serverObject"></a>Server 对象</h4><p>表示一个服务器的对象。</p><h5 id="固定字段-4"><a href="#固定字段-4" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="serverUrl"></a>url</td><td align="center"><code>string</code></td><td><strong>必选</strong>. 指向目标主机的URL地址。这个URL地址支持服务器变量而且可能是相对路径，表示主机路径是相对于本文档所在的路径。当一个变量被命名为类似<code>{</code>brackets<code>}</code>时需要替换此变量。</td></tr><tr><td><a name="serverDescription"></a>description</td><td align="center"><code>string</code></td><td>一个可选的字符串，用来描述此URL地址。<a href="http://spec.commonmark.org/" target="_blank" rel="noopener">CommonMark syntax</a>可以被用来呈现富文本格式.</td></tr><tr><td><a name="serverVariables"></a>variables</td><td align="center">Map[<code>string</code>, <a href="#serverVariableObject">Server Variable Object</a>]</td><td>一组变量和值的映射，这些值被用来替换服务器URL地址内的模板参数。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="Server-对象示例"><a href="#Server-对象示例" class="headerlink" title="Server 对象示例"></a>Server 对象示例</h5><p>单个服务器可以这样描述：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"https://development.gigantic-server.com/v1"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Development server"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="attr">https://development.gigantic-server.com/v1</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">Development</span> <span class="string">server</span></span><br></pre></td></tr></table></figure><p>以下内容表示的是有多个服务器时应该如何描述，比如OpenAPI 对象的<a href="#oasServers"><code>servers</code></a>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"servers"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://development.gigantic-server.com/v1"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Development server"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://staging.gigantic-server.com/v1"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Staging server"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://api.gigantic-server.com/v1"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Production server"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">servers:</span></span><br><span class="line"><span class="attr">- url:</span> <span class="attr">https://development.gigantic-server.com/v1</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">Development</span> <span class="string">server</span></span><br><span class="line"><span class="attr">- url:</span> <span class="attr">https://staging.gigantic-server.com/v1</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">Staging</span> <span class="string">server</span></span><br><span class="line"><span class="attr">- url:</span> <span class="attr">https://api.gigantic-server.com/v1</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">Production</span> <span class="string">server</span></span><br></pre></td></tr></table></figure><p>以下内容展示了如何使用变量来配置服务器：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"servers"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://&#123;username&#125;.gigantic-server.com:&#123;port&#125;/&#123;basePath&#125;"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"The production API server"</span>,</span><br><span class="line">      <span class="attr">"variables"</span>: &#123;</span><br><span class="line">        <span class="attr">"username"</span>: &#123;</span><br><span class="line">          <span class="attr">"default"</span>: <span class="string">"demo"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"this value is assigned by the service provider, in this example `gigantic-server.com`"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"port"</span>: &#123;</span><br><span class="line">          <span class="attr">"enum"</span>: [</span><br><span class="line">            <span class="string">"8443"</span>,</span><br><span class="line">            <span class="string">"443"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"default"</span>: <span class="string">"8443"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"basePath"</span>: &#123;</span><br><span class="line">          <span class="attr">"default"</span>: <span class="string">"v2"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">servers:</span></span><br><span class="line"><span class="attr">- url:</span> <span class="attr">https://&#123;username&#125;.gigantic-server.com:&#123;port&#125;/&#123;basePath&#125;</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">The</span> <span class="string">production</span> <span class="string">API</span> <span class="string">server</span></span><br><span class="line"><span class="attr">  variables:</span></span><br><span class="line"><span class="attr">    username:</span></span><br><span class="line">      <span class="comment"># note! no enum here means it is an open value</span></span><br><span class="line"><span class="attr">      default:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">this</span> <span class="string">value</span> <span class="string">is</span> <span class="string">assigned</span> <span class="string">by</span> <span class="string">the</span> <span class="string">service</span> <span class="string">provider,</span> <span class="string">in</span> <span class="string">this</span> <span class="string">example</span> <span class="string">`gigantic-server.com`</span></span><br><span class="line"><span class="attr">    port:</span></span><br><span class="line"><span class="attr">      enum:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">'8443'</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">'443'</span></span><br><span class="line"><span class="attr">      default:</span> <span class="string">'8443'</span></span><br><span class="line"><span class="attr">    basePath:</span></span><br><span class="line">      <span class="comment"># open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`</span></span><br><span class="line"><span class="attr">      default:</span> <span class="string">v2</span></span><br></pre></td></tr></table></figure><h4 id="Server-Variable-对象"><a href="#Server-Variable-对象" class="headerlink" title="Server Variable 对象"></a><a name="serverVariableObject"></a>Server Variable 对象</h4><p>表示可用于服务器URL地址模板变量替换的对象。</p><h5 id="固定字段-5"><a href="#固定字段-5" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="serverVariableEnum"></a>enum</td><td align="center">[<code>string</code>]</td><td>一组可枚举字符串值，当可替换选项只能设置为固定的某些值时使用。</td></tr><tr><td><a name="serverVariableDefault"></a>default</td><td align="center"><code>string</code></td><td><strong>必选</strong>. 当可替换的值没有被使用者指定时使用的默认值。不像<a href="#schemaObject">Schema Object’s</a>的 <code>default</code> ，这个值必须由使用者提供。</td></tr><tr><td><a name="serverVariableDescription"></a>description</td><td align="center"><code>string</code></td><td>对服务器变量的可选的描述。<a href="http://spec.commonmark.org/" target="_blank" rel="noopener">CommonMark syntax</a>可以被用来呈现富文本格式.</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h4 id="Components-对象"><a href="#Components-对象" class="headerlink" title="Components 对象"></a><a name="componentsObject"></a>Components 对象</h4><p>包含开放API规范固定的各种可重用组件。当没有被其他对象引用时，在这里定义定义的组件不会产生任何效果。</p><h5 id="固定字段-6"><a href="#固定字段-6" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="left">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="componentsSchemas"></a> schemas</td><td align="left">Map[<code>string</code>, <a href="#schemaObject">Schema Object</a> | <a href="#referenceObject">Reference Object</a>]</td><td>定义可重用的 <a href="#schemaObject">Schema 对象</a> 的对象。</td></tr><tr><td><a name="componentsResponses"></a> responses</td><td align="left">Map[<code>string</code>, <a href="#responseObject">Response Object</a> | <a href="#referenceObject">Reference Object</a>]</td><td>定义可重用的 <a href="#responseObject">Response 对象</a> 的对象。</td></tr><tr><td><a name="componentsParameters"></a> parameters</td><td align="left">Map[<code>string</code>, <a href="#parameterObject">Parameter Object</a> | <a href="#referenceObject">Reference Object</a>]</td><td>定义可重用的 <a href="#parameterObject">Parameter 对象</a> 的对象。</td></tr><tr><td><a name="componentsExamples"></a> examples</td><td align="left">Map[<code>string</code>, <a href="#exampleObject">Example Object</a> | <a href="#referenceObject">Reference Object</a>]</td><td>定义可重用的 <a href="#exampleObject">Example 对象</a> 的对象。</td></tr><tr><td><a name="componentsRequestBodies"></a> requestBodies</td><td align="left">Map[<code>string</code>, <a href="#requestBodyObject">Request Body Object</a> | <a href="#referenceObject">Reference Object</a>]</td><td>定义可重用的 <a href="#requestBodyObject">Request Body 对象</a> 的对象。</td></tr><tr><td><a name="componentsHeaders"></a> headers</td><td align="left">Map[<code>string</code>, <a href="#headerObject">Header Object</a> | <a href="#referenceObject">Reference Object</a>]</td><td>定义可重用的 <a href="#headerObject">Header 对象</a> 的对象。</td></tr><tr><td><a name="componentsSecuritySchemes"></a> securitySchemes</td><td align="left">Map[<code>string</code>, <a href="#securitySchemeObject">Security Scheme Object</a> | <a href="#referenceObject">Reference Object</a>]</td><td>定义可重用的 <a href="#securitySchemeObject">Security Scheme 对象</a> 的对象。</td></tr><tr><td><a name="componentsLinks"></a> links</td><td align="left">Map[<code>string</code>, <a href="#linkObject">Link Object</a> | <a href="#referenceObject">Reference Object</a>]</td><td>定义可重用的 <a href="#linkObject">Link 对象</a> 的对象。</td></tr><tr><td><a name="componentsCallbacks"></a> callbacks</td><td align="left">Map[<code>string</code>, <a href="#callbackObject">Callback Object</a> | <a href="#referenceObject">Reference Object</a>]</td><td>定义可重用的 <a href="#callbackObject">Callback 对象</a> 的对象。</td></tr></tbody></table><p>这个对象可能会被 <a href="#specificationExtensions">规范扩展</a> 扩展。</p><p>上面定义的所有固定字段的值都是对象，对象包含的key的命名必须满足正则表达式： <code>^[a-zA-Z0-9\.\-_]+$</code>。</p><p>字段名示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User</span><br><span class="line">User_1</span><br><span class="line">User_Name</span><br><span class="line">user-name</span><br><span class="line">my.org.User</span><br></pre></td></tr></table></figure><h5 id="Components-对象示例"><a href="#Components-对象示例" class="headerlink" title="Components 对象示例"></a>Components 对象示例</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">"components": &#123;</span><br><span class="line">  "schemas": &#123;</span><br><span class="line">    "Category": &#123;</span><br><span class="line">      "type": "object",</span><br><span class="line">      "properties": &#123;</span><br><span class="line">        "id": &#123;</span><br><span class="line">          "type": "integer",</span><br><span class="line">          "format": "int64"</span><br><span class="line">        &#125;,</span><br><span class="line">        "name": &#123;</span><br><span class="line">          "type": "string"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "Tag": &#123;</span><br><span class="line">      "type": "object",</span><br><span class="line">      "properties": &#123;</span><br><span class="line">        "id": &#123;</span><br><span class="line">          "type": "integer",</span><br><span class="line">          "format": "int64"</span><br><span class="line">        &#125;,</span><br><span class="line">        "name": &#123;</span><br><span class="line">          "type": "string"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "parameters": &#123;</span><br><span class="line">    "skipParam": &#123;</span><br><span class="line">      "name": "skip",</span><br><span class="line">      "in": "query",</span><br><span class="line">      "description": "number of items to skip",</span><br><span class="line">      "required": true,</span><br><span class="line">      "schema": &#123;</span><br><span class="line">        "type": "integer",</span><br><span class="line">        "format": "int32"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "limitParam": &#123;</span><br><span class="line">      "name": "limit",</span><br><span class="line">      "in": "query",</span><br><span class="line">      "description": "max records to return",</span><br><span class="line">      "required": true,</span><br><span class="line">      "schema" : &#123;</span><br><span class="line">        "type": "integer",</span><br><span class="line">        "format": "int32"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "responses": &#123;</span><br><span class="line">    "NotFound": &#123;</span><br><span class="line">      "description": "Entity not found."</span><br><span class="line">    &#125;,</span><br><span class="line">    "IllegalInput": &#123;</span><br><span class="line">      "description": "Illegal input for operation."</span><br><span class="line">    &#125;,</span><br><span class="line">    "GeneralError": &#123;</span><br><span class="line">      "description": "General Error",</span><br><span class="line">      "content": &#123;</span><br><span class="line">        "application/json": &#123;</span><br><span class="line">          "schema": &#123;</span><br><span class="line">            "$ref": "#/components/schemas/GeneralError"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "securitySchemes": &#123;</span><br><span class="line">    "api_key": &#123;</span><br><span class="line">      "type": "apiKey",</span><br><span class="line">      "name": "api_key",</span><br><span class="line">      "in": "header"</span><br><span class="line">    &#125;,</span><br><span class="line">    "petstore_auth": &#123;</span><br><span class="line">      "type": "oauth2",</span><br><span class="line">      "flows": &#123;</span><br><span class="line">        "implicit": &#123;</span><br><span class="line">          "authorizationUrl": "http://example.org/api/oauth/dialog",</span><br><span class="line">          "scopes": &#123;</span><br><span class="line">            "write:pets": "modify pets in your account",</span><br><span class="line">            "read:pets": "read your pets"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">components:</span></span><br><span class="line"><span class="attr">  schemas:</span></span><br><span class="line"><span class="attr">    Category:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">      properties:</span></span><br><span class="line"><span class="attr">        id:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">          format:</span> <span class="string">int64</span></span><br><span class="line"><span class="attr">        name:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    Tag:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">      properties:</span></span><br><span class="line"><span class="attr">        id:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">          format:</span> <span class="string">int64</span></span><br><span class="line"><span class="attr">        name:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  parameters:</span></span><br><span class="line"><span class="attr">    skipParam:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">skip</span></span><br><span class="line"><span class="attr">      in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">number</span> <span class="string">of</span> <span class="string">items</span> <span class="string">to</span> <span class="string">skip</span></span><br><span class="line"><span class="attr">      required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">        format:</span> <span class="string">int32</span></span><br><span class="line"><span class="attr">    limitParam:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">limit</span></span><br><span class="line"><span class="attr">      in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">max</span> <span class="string">records</span> <span class="string">to</span> <span class="string">return</span></span><br><span class="line"><span class="attr">      required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">        format:</span> <span class="string">int32</span></span><br><span class="line"><span class="attr">  responses:</span></span><br><span class="line"><span class="attr">    NotFound:</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">Entity</span> <span class="string">not</span> <span class="string">found.</span></span><br><span class="line"><span class="attr">    IllegalInput:</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">Illegal</span> <span class="string">input</span> <span class="string">for</span> <span class="string">operation.</span></span><br><span class="line"><span class="attr">    GeneralError:</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">General</span> <span class="string">Error</span></span><br><span class="line"><span class="attr">      content:</span></span><br><span class="line">        <span class="string">application/json:</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/components/schemas/GeneralError'</span></span><br><span class="line"><span class="attr">  securitySchemes:</span></span><br><span class="line"><span class="attr">    api_key:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">apiKey</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">api_key</span></span><br><span class="line"><span class="attr">      in:</span> <span class="string">header</span></span><br><span class="line"><span class="attr">    petstore_auth:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">oauth2</span></span><br><span class="line"><span class="attr">      flows:</span></span><br><span class="line"><span class="attr">        implicit:</span></span><br><span class="line"><span class="attr">          authorizationUrl:</span> <span class="attr">http://example.org/api/oauth/dialog</span></span><br><span class="line"><span class="attr">          scopes:</span></span><br><span class="line"><span class="attr">            write:</span><span class="attr">pets:</span> <span class="string">modify</span> <span class="string">pets</span> <span class="string">in</span> <span class="string">your</span> <span class="string">account</span></span><br><span class="line"><span class="attr">            read:</span><span class="attr">pets:</span> <span class="string">read</span> <span class="string">your</span> <span class="string">pets</span></span><br></pre></td></tr></table></figure><h4 id="Paths-对象"><a href="#Paths-对象" class="headerlink" title="Paths 对象"></a><a name="pathsObject"></a>Paths 对象</h4><p>定义各个的端点和操作的相对路径。这里指定的路径会和 <a href="#serverObject"><code>Server 对象</code></a> 内指定的URL地址组成完整的URL地址，路径可以为空，这依赖于 <a href="#securityFiltering">ACL constraints</a> 的设置。</p><h5 id="模式字段"><a href="#模式字段" class="headerlink" title="模式字段"></a>模式字段</h5><table><thead><tr><th>字段名模式</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="pathsPath"></a>/{path}</td><td align="center"><a href="#pathItemObject">Path Item 对象</a></td><td>到各个端点的相对路径，路径必须以<code>/</code>打头，这个路径会被<strong>直接连接</strong>到 <a href="#serverObject"><code>Server 对象</code></a> 的<code>url</code>字段以组成完整URL地址（不会考虑是否是相对路径）。这里可以使用 <a href="#pathTemplating">Path templating</a> ，当做URL地址匹配时，不带路径参数的路径会被优先匹配。应该避免定义多个具有相同路径层级但是路径参数名不同的路径，因为他们是等价的。当匹配出现歧义时，由使用的工具自行决定使用那个路径。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="路径模板匹配"><a href="#路径模板匹配" class="headerlink" title="路径模板匹配"></a>路径模板匹配</h5><p>假设有以下路径，明确定义的路径 <code>/pets/mine</code> 会被优先匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/pets/&#123;petId&#125;</span><br><span class="line">/pets/mine</span><br></pre></td></tr></table></figure><p>以下路径被认为是等价的而且是无效的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/pets/&#123;petId&#125;</span><br><span class="line">/pets/&#123;name&#125;</span><br></pre></td></tr></table></figure><p>以下路径会产生歧义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/&#123;entity&#125;/me</span><br><span class="line">/books/&#123;id&#125;</span><br></pre></td></tr></table></figure><h5 id="Paths-对象示例"><a href="#Paths-对象示例" class="headerlink" title="Paths 对象示例"></a>Paths 对象示例</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"/pets"</span>: &#123;</span><br><span class="line">    <span class="attr">"get"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Returns all pets from the system that the user has access to"</span>,</span><br><span class="line">      <span class="attr">"responses"</span>: &#123;</span><br><span class="line">        <span class="attr">"200"</span>: &#123;</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"A list of pets."</span>,</span><br><span class="line">          <span class="attr">"content"</span>: &#123;</span><br><span class="line">            <span class="attr">"application/json"</span>: &#123;</span><br><span class="line">              <span class="attr">"schema"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">                <span class="attr">"items"</span>: &#123;</span><br><span class="line">                  <span class="attr">"$ref"</span>: <span class="string">"#/components/schemas/pet"</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/pets:</span></span><br><span class="line"><span class="attr">  get:</span></span><br><span class="line"><span class="attr">    description:</span> <span class="string">Returns</span> <span class="string">all</span> <span class="string">pets</span> <span class="string">from</span> <span class="string">the</span> <span class="string">system</span> <span class="string">that</span> <span class="string">the</span> <span class="string">user</span> <span class="string">has</span> <span class="string">access</span> <span class="string">to</span></span><br><span class="line"><span class="attr">    responses:</span></span><br><span class="line">      <span class="string">'200'</span><span class="string">:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">A</span> <span class="string">list</span> <span class="string">of</span> <span class="string">pets.</span></span><br><span class="line"><span class="attr">        content:</span></span><br><span class="line">          <span class="string">application/json:</span></span><br><span class="line"><span class="attr">            schema:</span></span><br><span class="line"><span class="attr">              type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">              items:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">'#/components/schemas/pet'</span></span><br></pre></td></tr></table></figure><h4 id="Path-Item-对象"><a href="#Path-Item-对象" class="headerlink" title="Path Item 对象"></a><a name="pathItemObject"></a>Path Item 对象</h4><p>描述对一个路径可执行的有效操作。依赖与 <a href="#securityFiltering">ACL constraints</a> 的设置，一个Path Item可以是一个空对象，文档的读者仍然可以看到这个路径，但是他们将无法了解到对这个路径可用的任何操作和参数。</p><h5 id="固定字段-7"><a href="#固定字段-7" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="pathItemRef"></a>$ref</td><td align="center"><code>string</code></td><td>指定对此路径的外部定义的引用，引用的格式必须符合 <a href="#pathItemObject">Path Item 对象</a> 的格式，如果引用的外部定义和此对象内的其他定义有冲突，该如何处理冲突尚未被定义。</td></tr><tr><td><a name="pathItemSummary"></a>summary</td><td align="center"><code>string</code></td><td>一个可选的简要总结字符串，用来描述此路径内包含的所有操作。</td></tr><tr><td><a name="pathItemDescription"></a>description</td><td align="center"><code>string</code></td><td>一个可选的详细说明字符串，用于描述此路径包含的所有操作。 <a href="http://spec.commonmark.org/" target="_blank" rel="noopener">CommonMark syntax</a>可以被用来呈现富文本格式.</td></tr><tr><td><a name="pathItemGet"></a>get</td><td align="center"><a href="#operationObject">Operation 对象</a></td><td>定义适用于此路径的 GET 操作。</td></tr><tr><td><a name="pathItemPut"></a>put</td><td align="center"><a href="#operationObject">Operation 对象</a></td><td>定义适用于此路径的 PUT 操作。</td></tr><tr><td><a name="pathItemPost"></a>post</td><td align="center"><a href="#operationObject">Operation 对象</a></td><td>定义适用于此路径的 POST 操作.</td></tr><tr><td><a name="pathItemDelete"></a>delete</td><td align="center"><a href="#operationObject">Operation 对象</a></td><td>定义适用于此路径的 DELETE 操作。</td></tr><tr><td><a name="pathItemOptions"></a>options</td><td align="center"><a href="#operationObject">Operation 对象</a></td><td>定义适用于此路径的 OPTIONS 操作。</td></tr><tr><td><a name="pathItemHead"></a>head</td><td align="center"><a href="#operationObject">Operation 对象</a></td><td>定义适用于此路径的 HEAD 操作。</td></tr><tr><td><a name="pathItemPatch"></a>patch</td><td align="center"><a href="#operationObject">Operation 对象</a></td><td>定义适用于此路径的 PATCH 操作。</td></tr><tr><td><a name="pathItemTrace"></a>trace</td><td align="center"><a href="#operationObject">Operation 对象</a></td><td>定义适用于此路径的 TRACE 操作。</td></tr><tr><td><a name="pathItemServers"></a>servers</td><td align="center">[<a href="#serverObject">Server 对象</a>]</td><td>一个可用于此路径所有操作的替代根<code>server</code>的数组定义。</td></tr><tr><td><a name="pathItemParameters"></a>parameters</td><td align="center">[<a href="#parameterObject">Parameter 对象</a> | <a href="#referenceObject">Reference 对象</a>]</td><td>一个可用于此路径下所有操作的参数的列表。这些参数可以被具体的操作定义覆盖，但是不能被移除。这个列表禁止包含重复的参数，一个唯一的参数名由 <a href="#parameterName">name</a> 和 <a href="#parameterIn">location</a> 的组合来定义。这个列表可以使用 <a href="#referenceObject">Reference</a> 格式引用定义在 <a href="#componentsParameters">OpenAPI 对象 components/parameters</a> 内的参数。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="Path-Item-对象示例"><a href="#Path-Item-对象示例" class="headerlink" title="Path Item 对象示例"></a>Path Item 对象示例</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"get"</span>: &#123;</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"Returns pets based on ID"</span>,</span><br><span class="line">    <span class="attr">"summary"</span>: <span class="string">"Find pets by ID"</span>,</span><br><span class="line">    <span class="attr">"operationId"</span>: <span class="string">"getPetsById"</span>,</span><br><span class="line">    <span class="attr">"responses"</span>: &#123;</span><br><span class="line">      <span class="attr">"200"</span>: &#123;</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"pet response"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: &#123;</span><br><span class="line">          <span class="attr">"*/*"</span>: &#123;</span><br><span class="line">            <span class="attr">"schema"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">              <span class="attr">"items"</span>: &#123;</span><br><span class="line">                <span class="attr">"$ref"</span>: <span class="string">"#/components/schemas/Pet"</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"default"</span>: &#123;</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"error payload"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: &#123;</span><br><span class="line">          <span class="attr">"text/html"</span>: &#123;</span><br><span class="line">            <span class="attr">"schema"</span>: &#123;</span><br><span class="line">              <span class="attr">"$ref"</span>: <span class="string">"#/components/schemas/ErrorModel"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"parameters"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"id"</span>,</span><br><span class="line">      <span class="attr">"in"</span>: <span class="string">"path"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"ID of pet to use"</span>,</span><br><span class="line">      <span class="attr">"required"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"schema"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">        <span class="attr">"items"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"style"</span>: <span class="string">"simple"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">get:</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">Returns</span> <span class="string">pets</span> <span class="string">based</span> <span class="string">on</span> <span class="string">ID</span></span><br><span class="line"><span class="attr">  summary:</span> <span class="string">Find</span> <span class="string">pets</span> <span class="string">by</span> <span class="string">ID</span></span><br><span class="line"><span class="attr">  operationId:</span> <span class="string">getPetsById</span></span><br><span class="line"><span class="attr">  responses:</span></span><br><span class="line">    <span class="string">'200'</span><span class="string">:</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">pet</span> <span class="string">response</span></span><br><span class="line"><span class="attr">      content:</span></span><br><span class="line">        <span class="string">'*/*'</span> <span class="string">:</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">            items:</span></span><br><span class="line">              <span class="string">$ref:</span> <span class="string">'#/components/schemas/Pet'</span></span><br><span class="line"><span class="attr">    default:</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">error</span> <span class="string">payload</span></span><br><span class="line"><span class="attr">      content:</span></span><br><span class="line">        <span class="string">'text/html'</span><span class="string">:</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/components/schemas/ErrorModel'</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">id</span></span><br><span class="line"><span class="attr">  in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">ID</span> <span class="string">of</span> <span class="string">pet</span> <span class="string">to</span> <span class="string">use</span></span><br><span class="line"><span class="attr">  required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  schema:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">    style:</span> <span class="string">simple</span></span><br><span class="line"><span class="attr">    items:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><h4 id="Operation-Object"><a href="#Operation-Object" class="headerlink" title="Operation Object"></a><a name="operationObject"></a>Operation Object</h4><p>描述对路径的某个操作。</p><h5 id="固定字段-8"><a href="#固定字段-8" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="operationTags"></a>tags</td><td align="center">[<code>string</code>]</td><td>用于控制API文档的标签列表，标签可以用于在逻辑上分组对资源的操作或作为其它用途的先决条件。</td></tr><tr><td><a name="operationSummary"></a>summary</td><td align="center"><code>string</code></td><td>对此操作行为的简短描述。</td></tr><tr><td><a name="operationDescription"></a>description</td><td align="center"><code>string</code></td><td>对此操作行为的详细解释。<a href="http://spec.commonmark.org/" target="_blank" rel="noopener">CommonMark syntax</a>可以被用来呈现富文本格式.</td></tr><tr><td><a name="operationExternalDocs"></a>externalDocs</td><td align="center"><a href="#externalDocumentationObject">External Documentation 对象</a></td><td>附加的外部文档。</td></tr><tr><td><a name="operationId"></a>operationId</td><td align="center"><code>string</code></td><td>用于标识此操作的唯一字符串，这个id在此API内包含的所有操作中必须是唯一的。相关的工具和库可能会使用此operationId来唯一的标识一个操作，因此推荐在命名时符合一般的编程命名习惯。</td></tr><tr><td><a name="operationParameters"></a>parameters</td><td align="center">[<a href="#parameterObject">Parameter 对象</a> | <a href="#referenceObject">Reference 对象</a>]</td><td>定义可用于此操作的参数列表，如果一个同名的参数已经存在于 <a href="#pathItemParameters">Path Item</a>，那么这里的定义会覆盖它但是不能移除上面的定义。这个列表不允许包含重复的参数，参数的唯一性由 <a href="#parameterName">name</a> 和  <a href="#parameterIn">location</a> 的组合来确定。这个列表可以使用 <a href="#referenceObject">Reference 对象</a> 来连接定义于 <a href="#componentsParameters">OpenAPI 对象 components/parameters</a> 的参数。</td></tr><tr><td><a name="operationRequestBody"></a>requestBody</td><td align="center"><a href="#requestBodyObject">Request Body 对象</a> | <a href="#referenceObject">Reference 对象</a></td><td>可用于此操作的请求体。<code>requestBody</code> 只能被用于HTTP 1.1 规范 <a href="https://tools.ietf.org/html/rfc7231#section-4.3.1" target="_blank" rel="noopener">RFC7231</a> 中明确定义了包含请求体的请求方法，在其他没有明确定义的请求方法中，<code>requestBody</code>的消费者应该应该忽略<code>requestBody</code>。</td></tr><tr><td><a name="operationResponses"></a>responses</td><td align="center"><a href="#responsesObject">Responses 对象</a></td><td><strong>必选</strong>. 定义执行此操作后的可能的响应值列表。</td></tr><tr><td><a name="operationCallbacks"></a>callbacks</td><td align="center">Map[<code>string</code>, <a href="#callbackObject">Callback 对象</a> | <a href="#referenceObject">Reference 对象</a>]</td><td>一组相对于父操作的可能出现的回调映射，A map of possible out-of band callbacks related to the parent operation. 映射中的每一个键都唯一的映射一个 <a href="#callbackObject">Callback 对象</a>， that describes a request that may be initiated by the API provider and the expected responses. The key value used to identify the callback object is an expression, evaluated at runtime, that identifies a URL to use for the callback operation.</td></tr><tr><td><a name="operationDeprecated"></a>deprecated</td><td align="center"><code>boolean</code></td><td>声明此操作已经被废弃，使用者应该尽量避免使用此操作，默认的值是 <code>false</code>。</td></tr><tr><td><a name="operationSecurity"></a>security</td><td align="center">[<a href="#securityRequirementObject">Security Requirement 对象</a>]</td><td>声明那种安全机制可用于此操作。这个列表可以包含多种可用于此操作的安全需求对象，但是在认证一个请求时应该仅使用其中一种。这里的定义会覆盖任何在顶层 <a href="#oasSecurity"><code>security</code></a> 中的安全声明，因此可以声明一个空数组来变相的移除顶层的安全声明。</td></tr><tr><td><a name="operationServers"></a>servers</td><td align="center">[<a href="#serverObject">Server 对象</a>]</td><td>一个可用于此操作的额外的 <code>server</code> 数组，这里的定义会覆盖 Path Item 对象 或 顶层的定义。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="Operation-对象示例"><a href="#Operation-对象示例" class="headerlink" title="Operation 对象示例"></a>Operation 对象示例</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tags"</span>: [</span><br><span class="line">    <span class="string">"pet"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"summary"</span>: <span class="string">"Updates a pet in the store with form data"</span>,</span><br><span class="line">  <span class="attr">"operationId"</span>: <span class="string">"updatePetWithForm"</span>,</span><br><span class="line">  <span class="attr">"parameters"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"petId"</span>,</span><br><span class="line">      <span class="attr">"in"</span>: <span class="string">"path"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"ID of pet that needs to be updated"</span>,</span><br><span class="line">      <span class="attr">"required"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"schema"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"requestBody"</span>: &#123;</span><br><span class="line">    <span class="attr">"content"</span>: &#123;</span><br><span class="line">      <span class="attr">"application/x-www-form-urlencoded"</span>: &#123;</span><br><span class="line">        <span class="attr">"schema"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">           <span class="attr">"properties"</span>: &#123;</span><br><span class="line">              <span class="attr">"name"</span>: &#123;</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"Updated name of the pet"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">"status"</span>: &#123;</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"Updated status of the pet"</span>,</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">        <span class="attr">"required"</span>: [<span class="string">"status"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"responses"</span>: &#123;</span><br><span class="line">    <span class="attr">"200"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Pet updated."</span>,</span><br><span class="line">      <span class="attr">"content"</span>: &#123;</span><br><span class="line">        <span class="attr">"application/json"</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">"application/xml"</span>: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"405"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Invalid input"</span>,</span><br><span class="line">      <span class="attr">"content"</span>: &#123;</span><br><span class="line">        <span class="attr">"application/json"</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">"application/xml"</span>: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"security"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"petstore_auth"</span>: [</span><br><span class="line">        <span class="string">"write:pets"</span>,</span><br><span class="line">        <span class="string">"read:pets"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">pet</span></span><br><span class="line"><span class="attr">summary:</span> <span class="string">Updates</span> <span class="string">a</span> <span class="string">pet</span> <span class="string">in</span> <span class="string">the</span> <span class="string">store</span> <span class="string">with</span> <span class="string">form</span> <span class="string">data</span></span><br><span class="line"><span class="attr">operationId:</span> <span class="string">updatePetWithForm</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">petId</span></span><br><span class="line"><span class="attr">  in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">ID</span> <span class="string">of</span> <span class="string">pet</span> <span class="string">that</span> <span class="string">needs</span> <span class="string">to</span> <span class="string">be</span> <span class="string">updated</span></span><br><span class="line"><span class="attr">  required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  schema:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">requestBody:</span></span><br><span class="line"><span class="attr">  content:</span></span><br><span class="line">    <span class="string">'application/x-www-form-urlencoded'</span><span class="string">:</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line"><span class="attr">       properties:</span></span><br><span class="line"><span class="attr">          name:</span></span><br><span class="line"><span class="attr">            description:</span> <span class="string">Updated</span> <span class="string">name</span> <span class="string">of</span> <span class="string">the</span> <span class="string">pet</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">          status:</span></span><br><span class="line"><span class="attr">            description:</span> <span class="string">Updated</span> <span class="string">status</span> <span class="string">of</span> <span class="string">the</span> <span class="string">pet</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">       required:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">status</span></span><br><span class="line"><span class="attr">responses:</span></span><br><span class="line">  <span class="string">'200'</span><span class="string">:</span></span><br><span class="line"><span class="attr">    description:</span> <span class="string">Pet</span> <span class="string">updated.</span></span><br><span class="line"><span class="attr">    content:</span></span><br><span class="line">      <span class="string">'application/json'</span><span class="string">:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">      <span class="string">'application/xml'</span><span class="string">:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="string">'405'</span><span class="string">:</span></span><br><span class="line"><span class="attr">    description:</span> <span class="string">Invalid</span> <span class="string">input</span></span><br><span class="line"><span class="attr">    content:</span></span><br><span class="line">      <span class="string">'application/json'</span><span class="string">:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">      <span class="string">'application/xml'</span><span class="string">:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">- petstore_auth:</span></span><br><span class="line"><span class="attr">  - write:</span><span class="string">pets</span></span><br><span class="line"><span class="attr">  - read:</span><span class="string">pets</span></span><br></pre></td></tr></table></figure><h4 id="External-Documentation-对象"><a href="#External-Documentation-对象" class="headerlink" title="External Documentation 对象"></a><a name="externalDocumentationObject"></a>External Documentation 对象</h4><p>允许引用外部资源来扩展文档。</p><h5 id="固定字段-9"><a href="#固定字段-9" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="externalDocDescription"></a>description</td><td align="center"><code>string</code></td><td>对引用的外部文档的简短描述。<a href="http://spec.commonmark.org/" target="_blank" rel="noopener">CommonMark syntax</a>可以被用来呈现富文本格式.</td></tr><tr><td><a name="externalDocUrl"></a>url</td><td align="center"><code>string</code></td><td><strong>必选</strong>. 外部文档的URL地址，这个值必须是URL地址格式。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="External-Documentation-对象示例"><a href="#External-Documentation-对象示例" class="headerlink" title="External Documentation 对象示例"></a>External Documentation 对象示例</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Find more info here"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"https://example.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">Find</span> <span class="string">more</span> <span class="string">info</span> <span class="string">here</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">https://example.com</span></span><br></pre></td></tr></table></figure><h4 id="Parameter-Object"><a href="#Parameter-Object" class="headerlink" title="Parameter Object"></a><a name="parameterObject"></a>Parameter Object</h4><p>描述一个操作参数。</p><p>一个参数的唯一性由 <a href="#parameterName">name</a> 和 <a href="#parameterIn">location</a> 的组合来确定。</p><h5 id="参数位置"><a href="#参数位置" class="headerlink" title="参数位置"></a>参数位置</h5><p>有4种可能的参数位置值可用于<code>in</code>字段：</p><ul><li>path - 与 <a href="#pathTemplating">Path Templating</a> 一起使用，当参数的值是URL操作路径的一部分时可以使用，但是不包含主机地址或基础路径。比如在路径  <code>/items/{itemId}</code> 中，路径参数是 <code>itemId</code>。</li><li>query - 追加在URL地址之后的参数，比如 <code>/items?id=###</code> 中，查询参数是 <code>id</code>。</li><li>header - 请求中使用的自定义请求头，注意在 <a href="https://tools.ietf.org/html/rfc7230#page-22" target="_blank" rel="noopener">RFC7230</a> 中规定，请求头的命名是不区分大小写的。</li><li>cookie - 用于传递特定的cookie值。</li></ul><h5 id="固定字段-10"><a href="#固定字段-10" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="parameterName"></a>name</td><td align="center"><code>string</code></td><td><strong>必选</strong>. 参数的名称。参数名是<em>区分大小写</em>。<ul><li>如果 <a href="#parameterIn"><code>in</code></a> 的值是 <code>&quot;path&quot;</code>，那么 <code>name</code> 字段的值必须与其关联的 <a href="#pathsObject">Paths 对象</a> 内 <a href="#pathsPath">path</a> 字段的定义相呼应，查看 <a href="#pathTemplating">Path Templating</a> 了解更多信息。</li><li>如果 <a href="#parameterIn"><code>in</code></a> 的值是 <code>&quot;header&quot;</code> 而且<code>name</code>字段的值是<code>&quot;Accept&quot;</code>, <code>&quot;Content-Type&quot;</code>或 <code>&quot;Authorization&quot;</code>之一，那么此参数定义应该被忽略。</li><li>除此之外的情况，<code>name</code>表示 <a href="#parameterIn"><code>in</code></a> 属性的名字.</li></ul></td></tr><tr><td><a name="parameterIn"></a>in</td><td align="center"><code>string</code></td><td><strong>必选</strong>. 参数的位置，可能的值有 “query”, “header”, “path” 或 “cookie”。</td></tr><tr><td><a name="parameterDescription"></a>description</td><td align="center"><code>string</code></td><td>对此参数的简要描述，这里可以包含使用示例。<a href="http://spec.commonmark.org/" target="_blank" rel="noopener">CommonMark syntax</a>可以被用来呈现富文本格式.</td></tr><tr><td><a name="parameterRequired"></a>required</td><td align="center"><code>boolean</code></td><td>标明此参数是否是必选参数。如果 <a href="#parameterIn">参数位置</a> 的值是 <code>path</code>，那么这个参数一定是 <strong>必选</strong> 的因此这里的值必须是<code>true</code>。其他的则视情况而定。此字段的默认值是<code>false</code>。</td></tr><tr><td><a name="parameterDeprecated"></a> deprecated</td><td align="center"><code>boolean</code></td><td>标明一个参数是被弃用的而且应该尽快移除对它的使用。</td></tr><tr><td><a name="parameterAllowEmptyValue"></a> allowEmptyValue</td><td align="center"><code>boolean</code></td><td>设置是否允许传递空参数，这只在参数值为<code>query</code>时有效，默认值是<code>false</code>。如果同时指定了<a href="#parameterStyle"><code>style</code></a>属性且值为<code>n/a</code>（无法被序列化）,那么此字段 <code>allowEmptyValue</code>应该被忽略。</td></tr></tbody></table><p>序列化参数的规则有两种。<br>对于简单的场景， <a href="#parameterSchema"><code>schema</code></a> 和 <a href="#parameterStyle"><code>style</code></a> 可以用于描述参数的结构和语法。</p><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="parameterStyle"></a>style</td><td align="center"><code>string</code></td><td>描述根据参数值类型的不同如何序列化参数。默认值为（基于<code>in</code>字段的值）：<code>query</code> 对应 <code>form</code>；<code>path</code> 对应 <code>simple</code>; <code>header</code> 对应 <code>simple</code>; <code>cookie</code> 对应 <code>form</code>。</td></tr><tr><td><a name="parameterExplode"></a>explode</td><td align="center"><code>boolean</code></td><td>当这个值为<code>true</code>时，参数值类型为<code>array</code>或<code>object</code>的参数使用数组内的值或对象的键值对生成带分隔符的参数值。对于其他类型的参数，这个字段没有任何影响。当 <a href="#parameterStyle"><code>style</code></a> 是 <code>form</code>时，这里的默认值是 <code>true</code>，对于其他 style 值类型，默认值是<code>false</code>。</td></tr><tr><td><a name="parameterAllowReserved"></a>allowReserved</td><td align="center"><code>boolean</code></td><td>决定此参数的值是否允许不使用%号编码使用定义于 <a href="https://tools.ietf.org/html/rfc3986#section-2.2" target="_blank" rel="noopener">RFC3986</a>内的保留字符 <code>:/?#[]@!$&amp;&#39;()*+,;=</code>。 这个属性仅用于<code>in</code>的值是<code>query</code>时，此字段的默认值是<code>false</code>。</td></tr><tr><td><a name="parameterSchema"></a>schema</td><td align="center"><a href="#schemaObject">Schema 对象</a> | <a href="#referenceObject">Reference 对象</a></td><td>定义适用于此参数的类型结构。</td></tr><tr><td><a name="parameterExample"></a>example</td><td align="center">Any</td><td>不同媒体类型的示例，示例应该符合响应的结构的编码属性。各个<code>example</code>之间应该是独立的，而且如果一个引用的<code>schema</code>也包含一个示例，那么这里定义的示例应该 <em>覆盖</em> <code>schema</code>包含的示例。为了展现无法被恰当的用 JSON 或 YAML 格式展现的示例时，可以使用经过必要的编码的字符串值。</td></tr><tr><td><a name="parameterExamples"></a>examples</td><td align="center">Map[ <code>string</code>, <a href="#exampleObject">Example 对象</a> | <a href="#referenceObject">Reference 对象</a>]</td><td>不同媒体类型的示例。每个示例应该包含一个对应于指定编码格式的格式正确的值，这个<code>examples</code>映射内包含的对象应该不同于<code>example</code>内的值。而且如果一个引用的<code>schema</code>也包含一个示例，那么这里定义的示例应该 <em>覆盖</em> <code>schema</code>包含的示例。</td></tr></tbody></table><p>对于更复杂的场景，<a href="#parameterContent"><code>content</code></a>属性可以定义参数的媒体类型和概要。一个参数必须且只能包含<code>schema</code>和<code>content</code>属性中的一个。当<code>example</code> 或<code>examples</code>字段提供了<code>schema</code>对象时，示例必须遵照参数的序列化策略。</p><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="parameterContent"></a>content</td><td align="center">Map[<code>string</code>, <a href="#mediaTypeObject">Media Type Object</a>]</td><td>一个定义参数如何呈现的键值对映射。键是媒体类型，值是对应媒体类型的示例数据，此键值对只能包含一组键值对。</td></tr></tbody></table><h5 id="样式值"><a href="#样式值" class="headerlink" title="样式值"></a>样式值</h5><p>已经定义好了一组<code>style</code>类型用于支持常见的通用的简单参数序列化。</p><table><thead><tr><th><code>样式</code></th><th><a href="#dataTypes"><code>类型</code></a></th><th><code>in</code></th><th>描述</th></tr></thead><tbody><tr><td>matrix</td><td><code>primitive</code>, <code>array</code>, <code>object</code></td><td><code>path</code></td><td>Path 样式的参数，参见 <a href="https://tools.ietf.org/html/rfc6570#section-3.2.7" target="_blank" rel="noopener">RFC6570</a></td></tr><tr><td>label</td><td><code>primitive</code>, <code>array</code>, <code>object</code></td><td><code>path</code></td><td>Label 样式的参数，参见 <a href="https://tools.ietf.org/html/rfc6570#section-3.2.5" target="_blank" rel="noopener">RFC6570</a></td></tr><tr><td>form</td><td><code>primitive</code>, <code>array</code>, <code>object</code></td><td><code>query</code>, <code>cookie</code></td><td>Form 样式的参数，参见 <a href="https://tools.ietf.org/html/rfc6570#section-3.2.8" target="_blank" rel="noopener">RFC6570</a>. 此选项替换定义于OpenAPI 2.0中<code>collectionFormat</code>等于<code>csv</code> (当 <code>explode</code>值为 false)或<code>multi</code> (当 <code>explode</code>值为 true)的情况。</td></tr><tr><td>simple</td><td><code>array</code></td><td><code>path</code>, <code>header</code></td><td>Simple 样式的参数，参见 <a href="https://tools.ietf.org/html/rfc6570#section-3.2.2" target="_blank" rel="noopener">RFC6570</a>. 此选项替换定义于OpenAPI 2.0 中 <code>collectionFormat</code>等于<code>csv</code>的情况。</td></tr><tr><td>spaceDelimited</td><td><code>array</code></td><td><code>query</code></td><td>空格分隔的数组值。此选项替换定义于OpenAPI 2.0 中 <code>collectionFormat</code> equal to <code>ssv</code>的情况。</td></tr><tr><td>pipeDelimited</td><td><code>array</code></td><td><code>query</code></td><td>管道符`</td></tr><tr><td>deepObject</td><td><code>object</code></td><td><code>query</code></td><td>提供一种简单的方法来表示参数中的嵌套对象值.</td></tr></tbody></table><h5 id="Style-示例"><a href="#Style-示例" class="headerlink" title="Style 示例"></a>Style 示例</h5><p>建设一个参数名为<code>color</code>包含如下之一的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string -&gt; &quot;blue&quot;</span><br><span class="line">array -&gt; [&quot;blue&quot;,&quot;black&quot;,&quot;brown&quot;]</span><br><span class="line">object -&gt; &#123; &quot;R&quot;: 100, &quot;G&quot;: 200, &quot;B&quot;: 150 &#125;</span><br></pre></td></tr></table></figure><p>下面这个表展示了各个不同类型值之间的例子。</p><table><thead><tr><th><a href="#dataTypeFormat"><code>style</code></a></th><th><code>explode</code></th><th><code>empty</code></th><th><code>string</code></th><th><code>array</code></th><th><code>object</code></th></tr></thead><tbody><tr><td>matrix</td><td>false</td><td>;color</td><td>;color=blue</td><td>;color=blue,black,brown</td><td>;color=R,100,G,200,B,150</td></tr><tr><td>matrix</td><td>true</td><td>;color</td><td>;color=blue</td><td>;color=blue;color=black;color=brown</td><td>;R=100;G=200;B=150</td></tr><tr><td>label</td><td>false</td><td>.</td><td>.blue</td><td>.blue.black.brown</td><td>.R.100.G.200.B.150</td></tr><tr><td>label</td><td>true</td><td>.</td><td>.blue</td><td>.blue.black.brown</td><td>.R=100.G=200.B=150</td></tr><tr><td>form</td><td>false</td><td>color=</td><td>color=blue</td><td>color=blue,black,brown</td><td>color=R,100,G,200,B,150</td></tr><tr><td>form</td><td>true</td><td>color=</td><td>color=blue</td><td>color=blue&amp;color=black&amp;color=brown</td><td>R=100&amp;G=200&amp;B=150</td></tr><tr><td>simple</td><td>false</td><td>n/a</td><td>blue</td><td>blue,black,brown</td><td>R,100,G,200,B,150</td></tr><tr><td>simple</td><td>true</td><td>n/a</td><td>blue</td><td>blue,black,brown</td><td>R=100,G=200,B=150</td></tr><tr><td>spaceDelimited</td><td>false</td><td>n/a</td><td>n/a</td><td>blue%20black%20brown</td><td>R%20100%20G%20200%20B%20150</td></tr><tr><td>pipeDelimited</td><td>false</td><td>n/a</td><td>n/a</td><td>blue|black|brown</td><td>R|100|G|200</td></tr><tr><td>deepObject</td><td>true</td><td>n/a</td><td>n/a</td><td>n/a</td><td>color[R]=100&amp;color[G]=200&amp;color[B]=150</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="Parameter-对象示例"><a href="#Parameter-对象示例" class="headerlink" title="Parameter 对象示例"></a>Parameter 对象示例</h5><p>一个值数组，数组元素为64位整数值的请求头参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"token"</span>,</span><br><span class="line">  <span class="attr">"in"</span>: <span class="string">"header"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"token to be passed as a header"</span>,</span><br><span class="line">  <span class="attr">"required"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"schema"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">    <span class="attr">"items"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">      <span class="attr">"format"</span>: <span class="string">"int64"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"style"</span>: <span class="string">"simple"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">token</span></span><br><span class="line"><span class="attr">in:</span> <span class="string">header</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">token</span> <span class="string">to</span> <span class="string">be</span> <span class="string">passed</span> <span class="string">as</span> <span class="string">a</span> <span class="string">header</span></span><br><span class="line"><span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">schema:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">  items:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">    format:</span> <span class="string">int64</span></span><br><span class="line"><span class="attr">style:</span> <span class="string">simple</span></span><br></pre></td></tr></table></figure><p>一个值类型为字符串的路径参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"username"</span>,</span><br><span class="line">  <span class="attr">"in"</span>: <span class="string">"path"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"username to fetch"</span>,</span><br><span class="line">  <span class="attr">"required"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"schema"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">username</span></span><br><span class="line"><span class="attr">in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">username</span> <span class="string">to</span> <span class="string">fetch</span></span><br><span class="line"><span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">schema:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><p>一个值类型为字符串的可选查询参数，允许通过通过重复参数来传递多个值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"id"</span>,</span><br><span class="line">  <span class="attr">"in"</span>: <span class="string">"query"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"ID of the object to fetch"</span>,</span><br><span class="line">  <span class="attr">"required"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"schema"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">    <span class="attr">"items"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"style"</span>: <span class="string">"form"</span>,</span><br><span class="line">  <span class="attr">"explode"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">id</span></span><br><span class="line"><span class="attr">in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">ID</span> <span class="string">of</span> <span class="string">the</span> <span class="string">object</span> <span class="string">to</span> <span class="string">fetch</span></span><br><span class="line"><span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">schema:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">  items:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">style:</span> <span class="string">form</span></span><br><span class="line"><span class="attr">explode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>一个任意格式的查询参数，允许使用指定类型的未定义参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"in"</span>: <span class="string">"query"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"freeForm"</span>,</span><br><span class="line">  <span class="attr">"schema"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">    <span class="attr">"additionalProperties"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"integer"</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"style"</span>: <span class="string">"form"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">freeForm</span></span><br><span class="line"><span class="attr">schema:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">  additionalProperties:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">style:</span> <span class="string">form</span></span><br></pre></td></tr></table></figure><p>使用<code>content</code>定义序列化方法的复杂参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"in"</span>: <span class="string">"query"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"coordinates"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: &#123;</span><br><span class="line">    <span class="attr">"application/json"</span>: &#123;</span><br><span class="line">      <span class="attr">"schema"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">        <span class="attr">"required"</span>: [</span><br><span class="line">          <span class="string">"lat"</span>,</span><br><span class="line">          <span class="string">"long"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"lat"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"number"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"long"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"number"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">coordinates</span></span><br><span class="line"><span class="attr">content:</span></span><br><span class="line">  <span class="string">application/json:</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">      required:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">lat</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">long</span></span><br><span class="line"><span class="attr">      properties:</span></span><br><span class="line"><span class="attr">        lat:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">number</span></span><br><span class="line"><span class="attr">        long:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">number</span></span><br></pre></td></tr></table></figure><h4 id="Request-Body-Object"><a href="#Request-Body-Object" class="headerlink" title="Request Body Object"></a><a name="requestBodyObject"></a>Request Body Object</h4><p>定义请求体。</p><h5 id="固定字段-11"><a href="#固定字段-11" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="requestBodyDescription"></a>description</td><td align="center"><code>string</code></td><td>对请求体的简要描述，可以包含使用示例，<a href="http://spec.commonmark.org/" target="_blank" rel="noopener">CommonMark syntax</a>可以被用来呈现富文本格式.</td></tr><tr><td><a name="requestBodyContent"></a>content</td><td align="center">Map[<code>string</code>, <a href="#mediaTypeObject">Media Type Object</a>]</td><td><strong>必选</strong>. 请求体的内容。请求体的属性key是一个媒体类型或者<a href="https://tools.ietf.org/html/rfc7231#appendix-D" target="_blank" rel="noopener">媒体类型范围</a>，值是对应媒体类型的示例数据。对于能匹配多个key的请求，定义更明确的请求会更优先被匹配。比如<code>text/plain</code>会覆盖<code>text/*</code>的定义。</td></tr><tr><td><a name="requestBodyRequired"></a>required</td><td align="center"><code>boolean</code></td><td>指定请求体是不是应该被包含在请求中，默认值是<code>false</code>。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="Request-Body-示例"><a href="#Request-Body-示例" class="headerlink" title="Request Body 示例"></a>Request Body 示例</h5><p>一个引用了模型定义的请求体。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"user to add to the system"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: &#123;</span><br><span class="line">    <span class="attr">"application/json"</span>: &#123;</span><br><span class="line">      <span class="attr">"schema"</span>: &#123;</span><br><span class="line">        <span class="attr">"$ref"</span>: <span class="string">"#/components/schemas/User"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"examples"</span>: &#123;</span><br><span class="line">          <span class="attr">"user"</span> : &#123;</span><br><span class="line">            <span class="attr">"summary"</span>: <span class="string">"User Example"</span>,</span><br><span class="line">            <span class="attr">"externalValue"</span>: <span class="string">"http://foo.bar/examples/user-example.json"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"application/xml"</span>: &#123;</span><br><span class="line">      <span class="attr">"schema"</span>: &#123;</span><br><span class="line">        <span class="attr">"$ref"</span>: <span class="string">"#/components/schemas/User"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"examples"</span>: &#123;</span><br><span class="line">          <span class="attr">"user"</span> : &#123;</span><br><span class="line">            <span class="attr">"summary"</span>: <span class="string">"User example in XML"</span>,</span><br><span class="line">            <span class="attr">"externalValue"</span>: <span class="string">"http://foo.bar/examples/user-example.xml"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"text/plain"</span>: &#123;</span><br><span class="line">      <span class="attr">"examples"</span>: &#123;</span><br><span class="line">        <span class="attr">"user"</span> : &#123;</span><br><span class="line">            <span class="attr">"summary"</span>: <span class="string">"User example in Plain text"</span>,</span><br><span class="line">            <span class="attr">"externalValue"</span>: <span class="string">"http://foo.bar/examples/user-example.txt"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"*/*"</span>: &#123;</span><br><span class="line">      <span class="attr">"examples"</span>: &#123;</span><br><span class="line">        <span class="attr">"user"</span> : &#123;</span><br><span class="line">            <span class="attr">"summary"</span>: <span class="string">"User example in other format"</span>,</span><br><span class="line">            <span class="attr">"externalValue"</span>: <span class="string">"http://foo.bar/examples/user-example.whatever"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">user</span> <span class="string">to</span> <span class="string">add</span> <span class="string">to</span> <span class="string">the</span> <span class="string">system</span></span><br><span class="line"><span class="attr">content:</span></span><br><span class="line">  <span class="string">'application/json'</span><span class="string">:</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">'#/components/schemas/User'</span></span><br><span class="line"><span class="attr">    examples:</span></span><br><span class="line"><span class="attr">      user:</span></span><br><span class="line"><span class="attr">        summary:</span> <span class="string">User</span> <span class="string">Example</span></span><br><span class="line"><span class="attr">        externalValue:</span> <span class="string">'http://foo.bar/examples/user-example.json'</span></span><br><span class="line">  <span class="string">'application/xml'</span><span class="string">:</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">'#/components/schemas/User'</span></span><br><span class="line"><span class="attr">    examples:</span></span><br><span class="line"><span class="attr">      user:</span></span><br><span class="line"><span class="attr">        summary:</span> <span class="string">User</span> <span class="string">Example</span> <span class="string">in</span> <span class="string">XML</span></span><br><span class="line"><span class="attr">        externalValue:</span> <span class="string">'http://foo.bar/examples/user-example.xml'</span></span><br><span class="line">  <span class="string">'text/plain'</span><span class="string">:</span></span><br><span class="line"><span class="attr">    examples:</span></span><br><span class="line"><span class="attr">      user:</span></span><br><span class="line"><span class="attr">        summary:</span> <span class="string">User</span> <span class="string">example</span> <span class="string">in</span> <span class="string">text</span> <span class="string">plain</span> <span class="string">format</span></span><br><span class="line"><span class="attr">        externalValue:</span> <span class="string">'http://foo.bar/examples/user-example.txt'</span></span><br><span class="line">  <span class="string">'*/*'</span><span class="string">:</span></span><br><span class="line"><span class="attr">    examples:</span></span><br><span class="line"><span class="attr">      user:</span></span><br><span class="line"><span class="attr">        summary:</span> <span class="string">User</span> <span class="string">example</span> <span class="string">in</span> <span class="string">other</span> <span class="string">format</span></span><br><span class="line"><span class="attr">        externalValue:</span> <span class="string">'http://foo.bar/examples/user-example.whatever'</span></span><br></pre></td></tr></table></figure><p>请求体是一个字符串的数组：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"user to add to the system"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: &#123;</span><br><span class="line">    <span class="attr">"text/plain"</span>: &#123;</span><br><span class="line">      <span class="attr">"schema"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">        <span class="attr">"items"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">user</span> <span class="string">to</span> <span class="string">add</span> <span class="string">to</span> <span class="string">the</span> <span class="string">system</span></span><br><span class="line"><span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">content:</span></span><br><span class="line">  <span class="string">text/plain:</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">      items:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><h4 id="Media-Type-对象"><a href="#Media-Type-对象" class="headerlink" title="Media Type 对象"></a><a name="mediaTypeObject"></a>Media Type 对象</h4><p>每种媒体类型对象都有相应的结构和示例来描述它。</p><h5 id="固定字段-12"><a href="#固定字段-12" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="mediaTypeSchema"></a>schema</td><td align="center"><a href="#schemaObject">Schema 对象</a> | <a href="#referenceObject">Reference 对象</a></td><td>定义此媒体类型的结构。</td></tr><tr><td><a name="mediaTypeExample"></a>example</td><td align="center">Any</td><td>媒体类型的示例。示例对象应该符合此媒体类型的格式， 这里指定的<code>example</code>对象 object is mutually exclusive of the <code>examples</code> object.  而且如果引用的<code>schema</code>也包含示例，在这里指定的<code>example</code>值将会覆盖<code>schema</code>提供的示例。</td></tr><tr><td><a name="mediaTypeExamples"></a>examples</td><td align="center">Map[ <code>string</code>, <a href="#exampleObject">Example 对象</a> | <a href="#referenceObject">Reference 对象</a>]</td><td>媒体类型的示例，每个媒体对象的值都应该匹配它对应的媒体类型的格式。  The <code>examples</code> object is mutually exclusive of the <code>example</code> object.  而且如果引用的<code>schema</code>也包含示例，在这里指定的<code>example</code>值将会覆盖<code>schema</code>提供的示例。</td></tr><tr><td><a name="mediaTypeEncoding"></a>encoding</td><td align="center">Map[<code>string</code>, <a href="#encodingObject">Encoding 对象</a>]</td><td>属性名与编码信息的映射。每个属性名必须存在于<code>schema</code>属性的key中，当媒体类型等于<code>multipart</code>或<code>application/x-www-form-urlencoded</code>时，编码对象信息仅适用于<code>requestBody</code>。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="Media-Type-示例"><a href="#Media-Type-示例" class="headerlink" title="Media Type 示例"></a>Media Type 示例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"application/json"</span>: &#123;</span><br><span class="line">    <span class="string">"schema"</span>: &#123;</span><br><span class="line">         <span class="string">"$ref"</span>: <span class="string">"#/components/schemas/Pet"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"examples"</span>: &#123;</span><br><span class="line">      <span class="string">"cat"</span> : &#123;</span><br><span class="line">        <span class="string">"summary"</span>: <span class="string">"An example of a cat"</span>,</span><br><span class="line">        <span class="string">"value"</span>:</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Fluffy"</span>,</span><br><span class="line">            <span class="string">"petType"</span>: <span class="string">"Cat"</span>,</span><br><span class="line">            <span class="string">"color"</span>: <span class="string">"White"</span>,</span><br><span class="line">            <span class="string">"gender"</span>: <span class="string">"male"</span>,</span><br><span class="line">            <span class="string">"breed"</span>: <span class="string">"Persian"</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"dog"</span>: &#123;</span><br><span class="line">        <span class="string">"summary"</span>: <span class="string">"An example of a dog with a cat's name"</span>,</span><br><span class="line">        <span class="string">"value"</span> :  &#123;</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"Puma"</span>,</span><br><span class="line">          <span class="string">"petType"</span>: <span class="string">"Dog"</span>,</span><br><span class="line">          <span class="string">"color"</span>: <span class="string">"Black"</span>,</span><br><span class="line">          <span class="string">"gender"</span>: <span class="string">"Female"</span>,</span><br><span class="line">          <span class="string">"breed"</span>: <span class="string">"Mixed"</span></span><br><span class="line">        &#125;,</span><br><span class="line">      <span class="string">"frog"</span>: &#123;</span><br><span class="line">          <span class="string">"$ref"</span>: <span class="string">"#/components/examples/frog-example"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">application/json:</span></span><br><span class="line"><span class="attr">  schema:</span></span><br><span class="line">    <span class="string">$ref:</span> <span class="string">"#/components/schemas/Pet"</span></span><br><span class="line"><span class="attr">  examples:</span></span><br><span class="line"><span class="attr">    cat:</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">An</span> <span class="string">example</span> <span class="string">of</span> <span class="string">a</span> <span class="string">cat</span></span><br><span class="line"><span class="attr">      value:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">Fluffy</span></span><br><span class="line"><span class="attr">        petType:</span> <span class="string">Cat</span></span><br><span class="line"><span class="attr">        color:</span> <span class="string">White</span></span><br><span class="line"><span class="attr">        gender:</span> <span class="string">male</span></span><br><span class="line"><span class="attr">        breed:</span> <span class="string">Persian</span></span><br><span class="line"><span class="attr">    dog:</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">An</span> <span class="string">example</span> <span class="string">of</span> <span class="string">a</span> <span class="string">dog</span> <span class="string">with</span> <span class="string">a</span> <span class="string">cat's</span> <span class="string">name</span></span><br><span class="line"><span class="attr">      value:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">Puma</span></span><br><span class="line"><span class="attr">        petType:</span> <span class="string">Dog</span></span><br><span class="line"><span class="attr">        color:</span> <span class="string">Black</span></span><br><span class="line"><span class="attr">        gender:</span> <span class="string">Female</span></span><br><span class="line"><span class="attr">        breed:</span> <span class="string">Mixed</span></span><br><span class="line"><span class="attr">    frog:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">"#/components/examples/frog-example"</span></span><br></pre></td></tr></table></figure><h5 id="对文件上传的考虑"><a href="#对文件上传的考虑" class="headerlink" title="对文件上传的考虑"></a>对文件上传的考虑</h5><p>相对于2.0的规范，<code>file</code>内容的上传与下载在开放API规范与其他类型一样使用相同的语法来描述。<br>特别的是:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># content transferred with base64 encoding</span></span><br><span class="line"><span class="attr">schema:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">base64</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># content transferred in binary (octet-stream):</span></span><br><span class="line"><span class="attr">schema:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">binary</span></span><br></pre></td></tr></table></figure><p>这些示例同时适用于文件上传和下载。</p><p>一个使用<code>POST</code>操作提交文件的<code>requestBody</code>看起来像下面这样：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">requestBody:</span></span><br><span class="line"><span class="attr">  content:</span></span><br><span class="line">    <span class="string">application/octet-stream:</span></span><br><span class="line">      <span class="comment"># any media type is accepted, functionally equivalent to `*/*`</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line">        <span class="comment"># a binary file of any type</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">        format:</span> <span class="string">binary</span></span><br></pre></td></tr></table></figure><p>此外，可以指定明确的媒体类型：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># multiple, specific media types may be specified:</span></span><br><span class="line"><span class="attr">requestBody:</span></span><br><span class="line"><span class="attr">  content:</span></span><br><span class="line">      <span class="comment"># a binary file of type png or jpeg</span></span><br><span class="line">    <span class="string">'image/jpeg'</span><span class="string">:</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">        format:</span> <span class="string">binary</span></span><br><span class="line">    <span class="string">'image/png'</span><span class="string">:</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">        format:</span> <span class="string">binary</span></span><br></pre></td></tr></table></figure><p>为了同时上传多个文件，必须指定<code>multipart</code>媒体类型：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">requestBody:</span></span><br><span class="line"><span class="attr">  content:</span></span><br><span class="line">    <span class="string">multipart/form-data:</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line"><span class="attr">        properties:</span></span><br><span class="line">          <span class="comment"># The property name 'file' will be used for all files.</span></span><br><span class="line"><span class="attr">          file:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">            items:</span></span><br><span class="line"><span class="attr">              type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">              format:</span> <span class="string">binary</span></span><br></pre></td></tr></table></figure><h5 id="x-www-form-urlencoded-请求体的支持"><a href="#x-www-form-urlencoded-请求体的支持" class="headerlink" title="x-www-form-urlencoded 请求体的支持"></a>x-www-form-urlencoded 请求体的支持</h5><p>可以使用下面定义的格式来提交form url编码<a href="https://tools.ietf.org/html/rfc1866" target="_blank" rel="noopener">RFC1866</a>的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">requestBody:</span></span><br><span class="line"><span class="attr">  content:</span></span><br><span class="line">    <span class="string">application/x-www-form-urlencoded:</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">        properties:</span></span><br><span class="line"><span class="attr">          id:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">            format:</span> <span class="string">uuid</span></span><br><span class="line"><span class="attr">          address:</span></span><br><span class="line">            <span class="comment"># complex types are stringified to support RFC 1866</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">            properties:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，在内容被传送到服务器之前，<code>requestBody</code>中的内容必须使用<a href="https://tools.ietf.org/html/rfc1866/" target="_blank" rel="noopener">RFC1866</a>中定义的方式字符串化。此外<code>address</code>字段的复杂对象将会被字符串化。</p><p>当使用<code>application/x-www-form-urlencoded</code>格式传送复杂对象时，默认的序列化策略在<a href="#encodingObject"><code>Encoding Object</code></a>的<a href="#encodingStyle"><code>style</code></a> 属性中定义为<code>form</code>.</p><h5 id="对multipart内容的特别思考"><a href="#对multipart内容的特别思考" class="headerlink" title="对multipart内容的特别思考"></a>对<code>multipart</code>内容的特别思考</h5><p>使用<code>multipart/form-data</code>作为<code>Content-Type</code>来传送请求体是很常见的做法。相对于2.0版本的规范，当定义<code>multipart</code>内容的输入参数时必须指定<code>schema</code>属性。这不但支持复杂的结构而且支持多文件上传机制。</p><p>当使用<code>multipart</code>类型是，可以使用boundaries来分隔传送的内容，因此<code>multipart</code>定义了以下默认的<code>Content-Type</code>：</p><ul><li>如果属性是一个原始值或者是一个原始值的数组，那么默认的Content-Type是 <code>text/plain</code></li><li>如果属性是复杂对象或者复杂对象的数组，那么默认的Content-Type是<code>application/json</code></li><li>如果属性是<code>type: string</code>与<code>format: binary</code>或<code>format: base64</code>(也就是文件对象)的组合，那么默认的Content-Type是 <code>application/octet-stream</code></li></ul><p>示例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">requestBody:</span></span><br><span class="line"><span class="attr">  content:</span></span><br><span class="line">    <span class="string">multipart/form-data:</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">        properties:</span></span><br><span class="line"><span class="attr">          id:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">            format:</span> <span class="string">uuid</span></span><br><span class="line"><span class="attr">          address:</span></span><br><span class="line">            <span class="comment"># default Content-Type for objects is `application/json`</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">            properties:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">          profileImage:</span></span><br><span class="line">            <span class="comment"># default Content-Type for string/binary is `application/octet-stream`</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">            format:</span> <span class="string">binary</span></span><br><span class="line"><span class="attr">          children:</span></span><br><span class="line">            <span class="comment"># default Content-Type for arrays is based on the `inner` type (text/plain here)</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">            items:</span></span><br><span class="line"><span class="attr">              type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">          addresses:</span></span><br><span class="line">            <span class="comment"># default Content-Type for arrays is based on the `inner` type (object shown, so `application/json` in this example)</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">            items:</span></span><br><span class="line"><span class="attr">              type:</span> <span class="string">'#/components/schemas/Address'</span></span><br></pre></td></tr></table></figure><p>这里介绍一下用来控制序列化<code>multipart</code>请求体的<code>encoding</code>属性，这个属性只适用于<code>multipart</code>和<code>application/x-www-form-urlencoded</code>类型的请求体。</p><h4 id="Encoding-对象"><a href="#Encoding-对象" class="headerlink" title="Encoding 对象"></a><a name="encodingObject"></a>Encoding 对象</h4><p>一个编码定义仅适用于一个结构属性。</p><h5 id="固定字段-13"><a href="#固定字段-13" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="encodingContentType"></a>contentType</td><td align="center"><code>string</code></td><td>对具体属性的 Content-Type的编码。默认值取决于属性的类型：<code>application/octet-stream</code>编码适用于<code>binary</code>格式的<code>string</code>；<code>text/plain</code>适用于其他原始值；<code>application/json</code>适用于<code>object</code>；对于<code>array</code>值类型的默认值取决于数组内元素的类型，默认值可以是明确的媒体类型(比如<code>application/json</code>), 或者通配符类型的媒体类型(比如<code>image/*</code>), 又或者是用分号分隔的两种媒体类型。</td></tr><tr><td><a name="encodingHeaders"></a>headers</td><td align="center">Map[<code>string</code>, <a href="#headerObject">Header 对象</a> | <a href="#referenceObject">Reference 对象</a>]</td><td>提供附加信息的请求头键值对映射。比如<code>Content-Disposition</code>、<code>Content-Type</code>各自描述了不同的信息而且在这里将会被忽略，如果请求体的媒体类型不是<code>multipart</code>，这个属性将会被忽略。</td></tr><tr><td><a name="encodingStyle"></a>style</td><td align="center"><code>string</code></td><td>描述一个属性根据它的类型将会被如何序列化。查看<a href="#parameterObject">Parameter 对象</a>的<a href="#parameterStyle"><code>style</code></a>属性可以得到更多详细信息。这个属性的行为与<code>query</code>参数相同，包括默认值的定义。如果请求体的媒体类型不是<code>application/x-www-form-urlencoded</code>，这个属性将会被忽略。</td></tr><tr><td><a name="encodingExplode"></a>explode</td><td align="center"><code>boolean</code></td><td>当这个值为true时，类型为<code>array</code>或<code>object</code>的属性值会为数组的每个元素或对象的每个键值对分开生成参数。这个属性对其他数据类型没有影响。当<a href="#encodingStyle"><code>style</code></a>为<code>form</code>时，这个属性的默认值是<code>true</code>，对于其他的<code>style</code>类型，这个属性的默认值是<code>false</code>。这个属性会被忽略如果请求体的媒体类型不是<code>application/x-www-form-urlencoded</code>。</td></tr><tr><td><a name="encodingAllowReserved"></a>allowReserved</td><td align="center"><code>boolean</code></td><td>决定此参数的值是否允许不使用%号编码使用定义于 <a href="https://tools.ietf.org/html/rfc3986#section-2.2" target="_blank" rel="noopener">RFC3986</a>内的保留字符 <code>:/?#[]@!$&amp;&#39;()*+,;=</code>。 这个属性仅用于<code>in</code>的值是<code>query</code>时，此字段的默认值是<code>false</code>。 这个属性会被忽略如果请求体的媒体类型不是<code>application/x-www-form-urlencoded</code>。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="Encoding-对象示例"><a href="#Encoding-对象示例" class="headerlink" title="Encoding 对象示例"></a>Encoding 对象示例</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">requestBody:</span></span><br><span class="line"><span class="attr">  content:</span></span><br><span class="line">    <span class="string">multipart/mixed:</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">        properties:</span></span><br><span class="line"><span class="attr">          id:</span></span><br><span class="line">            <span class="comment"># default is text/plain</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">            format:</span> <span class="string">uuid</span></span><br><span class="line"><span class="attr">          address:</span></span><br><span class="line">            <span class="comment"># default is application/json</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">            properties:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">          historyMetadata:</span></span><br><span class="line">            <span class="comment"># need to declare XML format!</span></span><br><span class="line"><span class="attr">            description:</span> <span class="string">metadata</span> <span class="string">in</span> <span class="string">XML</span> <span class="string">format</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">            properties:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">          profileImage:</span></span><br><span class="line">            <span class="comment"># default is application/octet-stream, need to declare an image type only!</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">            format:</span> <span class="string">binary</span></span><br><span class="line"><span class="attr">      encoding:</span></span><br><span class="line"><span class="attr">        historyMetadata:</span></span><br><span class="line">          <span class="comment"># require XML Content-Type in utf-8 encoding</span></span><br><span class="line"><span class="attr">          contentType:</span> <span class="string">application/xml;</span> <span class="string">charset=utf-8</span></span><br><span class="line"><span class="attr">        profileImage:</span></span><br><span class="line">          <span class="comment"># only accept png/jpeg</span></span><br><span class="line"><span class="attr">          contentType:</span> <span class="string">image/png,</span> <span class="string">image/jpeg</span></span><br><span class="line"><span class="attr">          headers:</span></span><br><span class="line"><span class="attr">            X-Rate-Limit-Limit:</span></span><br><span class="line"><span class="attr">              description:</span> <span class="string">The</span> <span class="string">number</span> <span class="string">of</span> <span class="string">allowed</span> <span class="string">requests</span> <span class="string">in</span> <span class="string">the</span> <span class="string">current</span> <span class="string">period</span></span><br><span class="line"><span class="attr">              schema:</span></span><br><span class="line"><span class="attr">                type:</span> <span class="string">integer</span></span><br></pre></td></tr></table></figure><h4 id="Responses-对象"><a href="#Responses-对象" class="headerlink" title="Responses 对象"></a><a name="responsesObject"></a>Responses 对象</h4><p>描述一个操作可能发生的响应的响应码与响应包含的响应体的对象。</p><p>一份API文档不必包含所有可能响应码，因为有些状态码无法提前预知。尽管如此，一份文档还是应当包含所有成功的响应和任何已知的错误响应。</p><p><code>default</code>字段可以用来标记一个响应适用于其他未被规范明确定义的HTTP响应码的默认响应。</p><p>一个<code>Responses 对象</code>必须至少包含一个响应码，而且是成功的响应。</p><h5 id="固定字段-14"><a href="#固定字段-14" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="responsesDefault"></a>default</td><td align="center"><a href="#responseObject">Response 对象</a> | <a href="#referenceObject">Reference 对象</a></td><td>用于描述未被明确声明的HTTP响应码的响应的文档。使用这个字段来覆盖未声明的响应。一个 <a href="#referenceObject">Reference 对象</a> 可以链接定义于 <a href="#componentsResponses">OpenAPI 对象 components/responses</a> 区域的响应对象。</td></tr></tbody></table><h5 id="模式字段-1"><a href="#模式字段-1" class="headerlink" title="模式字段"></a>模式字段</h5><table><thead><tr><th>字段名模式</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="responsesCode"></a><a href="#httpCodes">HTTP Status Code</a></td><td align="center"><a href="#responseObject">Response 对象</a> | <a href="#referenceObject">Reference 对象</a></td><td>任何 <a href="#httpCodes">HTTP status code</a> 都可以被用作属性名， 但是每一个状态码只能使用一次，用于描述此状态码的响应。一个 <a href="#referenceObject">Reference 对象</a> 可以链接定义于 <a href="#componentsResponses">OpenAPI 对象 components/responses</a> 区域的响应对象。这个字段名必须包含在双引号中 (例如 “200”) 以兼容 JSON 和 YAML。这个字段可以包含大写的通配字符<code>X</code>来定义响应码的范围。例如，<code>2XX</code> 代表所有位于 <code>[200-299]</code> 范围内的响应码。只允许使用以下范围定义：<code>1XX</code>, <code>2XX</code>, <code>3XX</code>, <code>4XX</code>, 和 <code>5XX</code>。如果同时包含范围定义与明确定义的响应，那么明确定义的响应有更高的优先级。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="Responses-对象示例"><a href="#Responses-对象示例" class="headerlink" title="Responses 对象示例"></a>Responses 对象示例</h5><p>一个代表成功操作的 200 响应和一个代表其他操作状态的默认响应（暗示是一个错误）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"200"</span>: &#123;</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"a pet to be returned"</span>,</span><br><span class="line">    <span class="attr">"content"</span>: &#123;</span><br><span class="line">      <span class="attr">"application/json"</span>: &#123;</span><br><span class="line">        <span class="attr">"schema"</span>: &#123;</span><br><span class="line">          <span class="attr">"$ref"</span>: <span class="string">"#/components/schemas/Pet"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"default"</span>: &#123;</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"Unexpected error"</span>,</span><br><span class="line">    <span class="attr">"content"</span>: &#123;</span><br><span class="line">      <span class="attr">"application/json"</span>: &#123;</span><br><span class="line">        <span class="attr">"schema"</span>: &#123;</span><br><span class="line">          <span class="attr">"$ref"</span>: <span class="string">"#/components/schemas/ErrorModel"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'200'</span><span class="string">:</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">a</span> <span class="string">pet</span> <span class="string">to</span> <span class="string">be</span> <span class="string">returned</span></span><br><span class="line"><span class="attr">  content:</span></span><br><span class="line">    <span class="string">application/json:</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line">        <span class="string">$ref:</span> <span class="string">'#/components/schemas/Pet'</span></span><br><span class="line"><span class="attr">default:</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">Unexpected</span> <span class="string">error</span></span><br><span class="line"><span class="attr">  content:</span></span><br><span class="line">    <span class="string">application/json:</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line">        <span class="string">$ref:</span> <span class="string">'#/components/schemas/ErrorModel'</span></span><br></pre></td></tr></table></figure><h4 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a><a name="responseObject"></a>Response对象</h4><p>描述单个API操作的响应，包括设计时间、基于不同响应也包括到相应操作的静态<code>links</code></p><h5 id="固定字段-15"><a href="#固定字段-15" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="responseDescription"></a>description</td><td align="center"><code>string</code></td><td><strong>必选</strong>. 对响应的简短描述。<a href="http://spec.commonmark.org/" target="_blank" rel="noopener">CommonMark syntax</a>可以被用来呈现富文本格式.</td></tr><tr><td><a name="responseHeaders"></a>headers</td><td align="center">Map[<code>string</code>, <a href="#headerObject">Header Object</a>  | <a href="#referenceObject">Reference Object</a>]</td><td>映射HTTP头名称到其定义。<a href="https://tools.ietf.org/html/rfc7230#page-22" target="_blank" rel="noopener">RFC7230</a> 规定了HTTP头名称不区分大小写。如果一个响应头使用<code>&quot;Content-Type&quot;</code>作为HTTP头名称，它会被忽略。</td></tr><tr><td><a name="responseContent"></a>content</td><td align="center">Map[<code>string</code>, <a href="#mediaTypeObject">Media Type Object</a>]</td><td>一个包含描述预期响应负载的映射。使用 media type 或 <a href="https://tools.ietf.org/html/rfc7231#appendix-D" target="_blank" rel="noopener">media type range</a> 作为键，以响应的描述作为值。当一个响应匹配多个键时，只有最明确的键才适用。比如：text/plain 会覆盖 text/*</td></tr><tr><td><a name="responseLinks"></a>links</td><td align="center">Map[<code>string</code>, <a href="#linkObject">Link Object</a> | <a href="#referenceObject">Reference Object</a>]</td><td>A map of operations links that can be followed from the response. The key of the map is a short name for the link, following the naming constraints of the names for <a href="#componentsObject">Component Objects</a>.</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="Response-对象示例s"><a href="#Response-对象示例s" class="headerlink" title="Response 对象示例s"></a>Response 对象示例s</h5><p>一个包含复杂类型的数组格式的响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"A complex object array response"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: &#123;</span><br><span class="line">    <span class="attr">"application/json"</span>: &#123;</span><br><span class="line">      <span class="attr">"schema"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">        <span class="attr">"items"</span>: &#123;</span><br><span class="line">          <span class="attr">"$ref"</span>: <span class="string">"#/components/schemas/VeryComplexType"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">complex</span> <span class="string">object</span> <span class="string">array</span> <span class="string">response</span></span><br><span class="line"><span class="attr">content:</span></span><br><span class="line">  <span class="string">application/json:</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">      items:</span></span><br><span class="line">        <span class="string">$ref:</span> <span class="string">'#/components/schemas/VeryComplexType'</span></span><br></pre></td></tr></table></figure><p>字符串类型的响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"A simple string response"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: &#123;</span><br><span class="line">    <span class="attr">"text/plain"</span>: &#123;</span><br><span class="line">      <span class="attr">"schema"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">simple</span> <span class="string">string</span> <span class="string">response</span></span><br><span class="line"><span class="attr">representations:</span></span><br><span class="line">  <span class="string">text/plain:</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><p>带HTTP头的普通文本类型的响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"A simple string response"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: &#123;</span><br><span class="line">    <span class="attr">"text/plain"</span>: &#123;</span><br><span class="line">      <span class="attr">"schema"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"headers"</span>: &#123;</span><br><span class="line">    <span class="attr">"X-Rate-Limit-Limit"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"The number of allowed requests in the current period"</span>,</span><br><span class="line">      <span class="attr">"schema"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"integer"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"X-Rate-Limit-Remaining"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"The number of remaining requests in the current period"</span>,</span><br><span class="line">      <span class="attr">"schema"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"integer"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"X-Rate-Limit-Reset"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"The number of seconds left in the current period"</span>,</span><br><span class="line">      <span class="attr">"schema"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"integer"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">simple</span> <span class="string">string</span> <span class="string">response</span></span><br><span class="line"><span class="attr">content:</span></span><br><span class="line">  <span class="string">text/plain:</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    example:</span> <span class="string">'whoa!'</span></span><br><span class="line"><span class="attr">headers:</span></span><br><span class="line"><span class="attr">  X-Rate-Limit-Limit:</span></span><br><span class="line"><span class="attr">    description:</span> <span class="string">The</span> <span class="string">number</span> <span class="string">of</span> <span class="string">allowed</span> <span class="string">requests</span> <span class="string">in</span> <span class="string">the</span> <span class="string">current</span> <span class="string">period</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">  X-Rate-Limit-Remaining:</span></span><br><span class="line"><span class="attr">    description:</span> <span class="string">The</span> <span class="string">number</span> <span class="string">of</span> <span class="string">remaining</span> <span class="string">requests</span> <span class="string">in</span> <span class="string">the</span> <span class="string">current</span> <span class="string">period</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">  X-Rate-Limit-Reset:</span></span><br><span class="line"><span class="attr">    description:</span> <span class="string">The</span> <span class="string">number</span> <span class="string">of</span> <span class="string">seconds</span> <span class="string">left</span> <span class="string">in</span> <span class="string">the</span> <span class="string">current</span> <span class="string">period</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">integer</span></span><br></pre></td></tr></table></figure><p>没有返回值的响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"object created"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">object</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><h4 id="Callback-对象"><a href="#Callback-对象" class="headerlink" title="Callback 对象"></a><a name="callbackObject"></a>Callback 对象</h4><p>A map of possible out-of band callbacks related to the parent operation.<br>映射中的每个值都是一个描述一组可能会被API提供者发起的请求和相应的响应的 <a href="#pathItemObject">Path Item Object</a> 。用以标识回调对象的键是一个表达式，表达式会在运行时被计算，得到的值作为回调操作的URL。</p><h5 id="模式字段-2"><a href="#模式字段-2" class="headerlink" title="模式字段"></a>模式字段</h5><table><thead><tr><th>字段名模式</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="callbackExpression"></a>{expression}</td><td align="center"><a href="#pathItemObject">Path Item Object</a></td><td>一个用于定义回调请求和响应的 Path Item Object。 A <a href="../examples/v3.0/callback-example.yaml">complete example</a> is available.</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="Key-Expression"><a href="#Key-Expression" class="headerlink" title="Key Expression"></a>Key Expression</h5><p>用于标识 <a href="#pathItemObject">Path Item Object</a> 的键是一个 <a href="#runtimeExpression">runtime expression</a>，此表达式会在运行时的HTTP请求/响应上下文中被计算，计算结果用于表示回调请求的URL。<br>一个简单的例子是 <code>$request.body#/url</code>。<br>However, using a <a href="#runtimeExpression">runtime expression</a> the complete HTTP message can be accessed.<br>This includes accessing any part of a body that a JSON Pointer <a href="https://tools.ietf.org/html/rfc6901" target="_blank" rel="noopener">RFC6901</a> can reference.</p><p>比如有如下 HTTP 请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/subscribe/myevent?queryUrl=http://clientdomain.com/stillrunning</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: example.org</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Content-Length</span>: 187</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "failedUrl" : "http://clientdomain.com/failed",</span><br><span class="line">  "successUrls" : [</span><br><span class="line">    "http://clientdomain.com/fast",</span><br><span class="line">    "http://clientdomain.com/medium",</span><br><span class="line">    "http://clientdomain.com/slow"</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">201 Created</span><br><span class="line"><span class="attribute">Location</span>: http://example.org/subscription/1</span><br></pre></td></tr></table></figure><p>下方示例展示了各种表达式是如何被计算，这里假设回调操作有一个名为 <code>eventType</code> 的路径参数和一个名为 <code>queryUrl</code> 的查询参数。</p><table><thead><tr><th>Expression</th><th align="left">Value</th></tr></thead><tbody><tr><td>$url</td><td align="left">[<a href="http://example.org/subscribe/myevent?queryUrl=http://clientdomain.com/stillrunning]" target="_blank" rel="noopener">http://example.org/subscribe/myevent?queryUrl=http://clientdomain.com/stillrunning]</a></td></tr><tr><td>$method</td><td align="left">POST</td></tr><tr><td>$request.path.eventType</td><td align="left">myevent</td></tr><tr><td>$request.query.queryUrl</td><td align="left">[<a href="http://clientdomain.com/stillrunning]" target="_blank" rel="noopener">http://clientdomain.com/stillrunning]</a></td></tr><tr><td>$request.header.content-Type</td><td align="left">application/json</td></tr><tr><td>$request.body#/failedUrl</td><td align="left">[<a href="http://clientdomain.com/stillrunning]" target="_blank" rel="noopener">http://clientdomain.com/stillrunning]</a></td></tr><tr><td>$request.body#/successUrls/2</td><td align="left">[<a href="http://clientdomain.com/medium]" target="_blank" rel="noopener">http://clientdomain.com/medium]</a></td></tr><tr><td>$response.header.Location</td><td align="left">[<a href="http://example.org/subscription/1]" target="_blank" rel="noopener">http://example.org/subscription/1]</a></td></tr></tbody></table><h5 id="Callback-对象示例"><a href="#Callback-对象示例" class="headerlink" title="Callback 对象示例"></a>Callback 对象示例</h5><p>如下示例展示了一个通过请求体内的 <code>id</code> 和 <code>email</code> 属性指定的URL的回调。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">myWebhook:</span></span><br><span class="line">  <span class="string">'http://notificationServer.com?transactionId=&#123;$request.body#/id&#125;&amp;email=&#123;$request.body#/email&#125;'</span><span class="string">:</span></span><br><span class="line"><span class="attr">    post:</span></span><br><span class="line"><span class="attr">      requestBody:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">Callback</span> <span class="string">payload</span></span><br><span class="line"><span class="attr">        content:</span></span><br><span class="line">          <span class="string">'application/json'</span><span class="string">:</span></span><br><span class="line"><span class="attr">            schema:</span></span><br><span class="line">              <span class="string">$ref:</span> <span class="string">'#/components/schemas/SomePayload'</span></span><br><span class="line"><span class="attr">      responses:</span></span><br><span class="line">        <span class="string">'200'</span><span class="string">:</span></span><br><span class="line"><span class="attr">          description:</span> <span class="string">webhook</span> <span class="string">successfully</span> <span class="string">processed</span> <span class="string">and</span> <span class="literal">no</span> <span class="string">retries</span> <span class="string">will</span> <span class="string">be</span> <span class="string">performed</span></span><br></pre></td></tr></table></figure><h4 id="Example-对象"><a href="#Example-对象" class="headerlink" title="Example 对象"></a><a name="exampleObject"></a>Example 对象</h4><h5 id="固定字段-16"><a href="#固定字段-16" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="exampleSummary"></a>summary</td><td align="center"><code>string</code></td><td>example 的简要描述。</td></tr><tr><td><a name="exampleDescription"></a>description</td><td align="center"><code>string</code></td><td>example 的详细描述。<a href="http://spec.commonmark.org/" target="_blank" rel="noopener">CommonMark syntax</a>可以被用来呈现富文本格式.</td></tr><tr><td><a name="exampleValue"></a>value</td><td align="center">Any</td><td>嵌入的字面量 example。 <code>value</code>  字段和 <code>externalValue</code> 字段是互斥的。无法使用 JSON 或 YAML 表示的媒体类型可以使用字符串值来表示。</td></tr><tr><td><a name="exampleExternalValue"></a>externalValue</td><td align="center"><code>string</code></td><td>指向字面 exmaple 的一个 URL。这提供了引用无法被包含在 JSON 或 YAML 文档中的 example。<code>value</code>  字段和 <code>externalValue</code> 字段是互斥的。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><p>In all cases, the example value is expected to be compatible with the type schema<br>of its associated value.  Tooling implementations MAY choose to<br>validate compatibility automatically, and reject the example value(s) if incompatible.</p><h5 id="Example-对象示例"><a href="#Example-对象示例" class="headerlink" title="Example 对象示例"></a>Example 对象示例</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in a model</span></span><br><span class="line"><span class="attr">schemas:</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    name:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      examples:</span></span><br><span class="line"><span class="attr">        name:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="attr">http://example.org/petapi-examples/openapi.json#/components/examples/name-example</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in a request body:</span></span><br><span class="line"><span class="attr">  requestBody:</span></span><br><span class="line"><span class="attr">    content:</span></span><br><span class="line">      <span class="string">'application/json'</span><span class="string">:</span></span><br><span class="line"><span class="attr">        schema:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">'#/components/schemas/Address'</span></span><br><span class="line"><span class="attr">        examples:</span></span><br><span class="line"><span class="attr">          foo:</span></span><br><span class="line"><span class="attr">            summary:</span> <span class="string">A</span> <span class="string">foo</span> <span class="string">example</span></span><br><span class="line"><span class="attr">            value:</span> <span class="string">&#123;"foo":</span> <span class="string">"bar"</span><span class="string">&#125;</span></span><br><span class="line"><span class="attr">          bar:</span></span><br><span class="line"><span class="attr">            summary:</span> <span class="string">A</span> <span class="string">bar</span> <span class="string">example</span></span><br><span class="line"><span class="attr">            value:</span> <span class="string">&#123;"bar":</span> <span class="string">"baz"</span><span class="string">&#125;</span></span><br><span class="line">      <span class="string">'application/xml'</span><span class="string">:</span></span><br><span class="line"><span class="attr">        examples:</span></span><br><span class="line"><span class="attr">          xmlExample:</span></span><br><span class="line"><span class="attr">            summary:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">an</span> <span class="string">example</span> <span class="string">in</span> <span class="string">XML</span></span><br><span class="line"><span class="attr">            externalValue:</span> <span class="string">'http://example.org/examples/address-example.xml'</span></span><br><span class="line">      <span class="string">'text/plain'</span><span class="string">:</span></span><br><span class="line"><span class="attr">        examples:</span></span><br><span class="line"><span class="attr">          textExample:</span></span><br><span class="line"><span class="attr">            summary:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">a</span> <span class="string">text</span> <span class="string">example</span></span><br><span class="line"><span class="attr">            externalValue:</span> <span class="string">'http://foo.bar/examples/address-example.txt'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># in a parameter</span></span><br><span class="line"><span class="attr">  parameters:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">'zipCode'</span></span><br><span class="line"><span class="attr">      in:</span> <span class="string">'query'</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">'string'</span></span><br><span class="line"><span class="attr">        format:</span> <span class="string">'zip-code'</span></span><br><span class="line"><span class="attr">        examples:</span></span><br><span class="line"><span class="attr">          zip-example:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/components/examples/zip-example'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in a response</span></span><br><span class="line"><span class="attr">  responses:</span></span><br><span class="line">    <span class="string">'200'</span><span class="string">:</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">your</span> <span class="string">car</span> <span class="string">appointment</span> <span class="string">has</span> <span class="string">been</span> <span class="string">booked</span></span><br><span class="line"><span class="attr">      content:</span></span><br><span class="line">        <span class="string">application/json:</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/components/schemas/SuccessResponse'</span></span><br><span class="line"><span class="attr">          examples:</span></span><br><span class="line"><span class="attr">            confirmation-success:</span></span><br><span class="line">              <span class="string">$ref:</span> <span class="string">'#/components/examples/confirmation-success'</span></span><br></pre></td></tr></table></figure><h4 id="Link-对象"><a href="#Link-对象" class="headerlink" title="Link 对象"></a><a name="linkObject"></a>Link 对象</h4><p>The <code>Link 对象</code> represents a possible design-time link for a response.<br>The presence of a link does not guarantee the caller’s ability to successfully invoke it, rather it provides a known relationship and traversal mechanism between responses and other operations.</p><p>Unlike <em>dynamic</em> links (i.e. links provided <strong>in</strong> the response payload), the OAS linking mechanism does not require link information in the runtime response.</p><p>For computing links, and providing instructions to execute them, a <a href="#runtimeExpression">runtime expression</a> is used for accessing values in an operation and using them as parameters while invoking the linked operation.</p><h5 id="固定字段-17"><a href="#固定字段-17" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">Type</th><th>描述</th></tr></thead><tbody><tr><td><a name="linkOperationRef"></a>operationRef</td><td align="center"><code>string</code></td><td>A relative or absolute reference to an OAS operation. This field is mutually exclusive of the <code>operationId</code> field, and MUST point to an <a href="#operationObject">Operation Object</a>. Relative <code>operationRef</code> values MAY be used to locate an existing <a href="#operationObject">Operation Object</a> in the OpenAPI definition.</td></tr><tr><td><a name="linkOperationId"></a>operationId</td><td align="center"><code>string</code></td><td>The name of an <em>existing</em>, resolvable OAS operation, as defined with a unique <code>operationId</code>.  This field is mutually exclusive of the <code>operationRef</code> field.</td></tr><tr><td><a name="linkParameters"></a>parameters</td><td align="center">Map[<code>string</code>, Any | <a href="#runtimeExpression">{expression}</a>]</td><td>A map representing parameters to pass to an operation as specified with <code>operationId</code> or identified via <code>operationRef</code>. The key is the parameter name to be used, whereas the value can be a constant or an expression to be evaluated and passed to the linked operation.  The parameter name can be qualified using the <a href="#parameterIn">parameter location</a> <code>[{in}.]{name}</code> for operations that use the same parameter name in different locations (e.g. path.id).</td></tr><tr><td><a name="linkRequestBody"></a>requestBody</td><td align="center">Any | <a href="#runtimeExpression">{expression}</a></td><td>A literal value or <a href="#runtimeExpression">{expression}</a> to use as a request body when calling the target operation.</td></tr><tr><td><a name="linkDescription"></a>description</td><td align="center"><code>string</code></td><td>A description of the link. <a href="http://spec.commonmark.org/" target="_blank" rel="noopener">CommonMark syntax</a>可以被用来呈现富文本格式.</td></tr><tr><td><a name="linkServer"></a>server</td><td align="center"><a href="#serverObject">Server Object</a></td><td>A server object to be used by the target operation.</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><p>A linked operation MUST be identified using either an <code>operationRef</code> or <code>operationId</code>.<br>In the case of an <code>operationId</code>, it MUST be unique and resolved in the scope of the OAS document.<br>Because of the potential for name clashes, the <code>operationRef</code> syntax is preferred<br>for specifications with external references.</p><h5 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h5><p>Computing a link from a request operation where the <code>$request.path.id</code> is used to pass a request parameter to the linked operation.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/users/&#123;id&#125;:</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">id</span></span><br><span class="line"><span class="attr">      in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">      required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">the</span> <span class="string">user</span> <span class="string">identifier,</span> <span class="string">as</span> <span class="string">userId</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    get:</span></span><br><span class="line"><span class="attr">      responses:</span></span><br><span class="line">        <span class="string">'200'</span><span class="string">:</span></span><br><span class="line"><span class="attr">          description:</span> <span class="string">the</span> <span class="string">user</span> <span class="string">being</span> <span class="string">returned</span></span><br><span class="line"><span class="attr">          content:</span></span><br><span class="line">            <span class="string">application/json:</span></span><br><span class="line"><span class="attr">              schema:</span></span><br><span class="line"><span class="attr">                type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">                properties:</span></span><br><span class="line"><span class="attr">                  uuid:</span> <span class="comment"># the unique user id</span></span><br><span class="line"><span class="attr">                    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">                    format:</span> <span class="string">uuid</span></span><br><span class="line"><span class="attr">        links:</span></span><br><span class="line"><span class="attr">          address:</span></span><br><span class="line">            <span class="comment"># the target link operationId</span></span><br><span class="line"><span class="attr">            operationId:</span> <span class="string">getUserAddress</span></span><br><span class="line"><span class="attr">            parameters:</span></span><br><span class="line">              <span class="comment"># get the `id` field from the request path parameter named `id`</span></span><br><span class="line"><span class="attr">              userId:</span> <span class="string">$request.path.id</span></span><br><span class="line">  <span class="comment"># the path item of the linked operation</span></span><br><span class="line">  <span class="string">/users/&#123;userid&#125;/address:</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">userid</span></span><br><span class="line"><span class="attr">      in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">      required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">the</span> <span class="string">user</span> <span class="string">identifier,</span> <span class="string">as</span> <span class="string">userId</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">string</span></span><br><span class="line">      <span class="comment"># linked operation</span></span><br><span class="line"><span class="attr">      get:</span></span><br><span class="line"><span class="attr">        operationId:</span> <span class="string">getUserAddress</span></span><br><span class="line"><span class="attr">        responses:</span></span><br><span class="line">          <span class="string">'200'</span><span class="string">:</span></span><br><span class="line"><span class="attr">            description:</span> <span class="string">the</span> <span class="string">user's</span> <span class="string">address</span></span><br></pre></td></tr></table></figure><p>When a runtime expression fails to evaluate, no parameter value is passed to the target operation.</p><p>Values from the response body can be used to drive a linked operation.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">links:</span></span><br><span class="line"><span class="attr">  address:</span></span><br><span class="line"><span class="attr">    operationId:</span> <span class="string">getUserAddressByUUID</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line">      <span class="comment"># get the `id` field from the request path parameter named `id`</span></span><br><span class="line"><span class="attr">      userUuid:</span> <span class="string">$response.body#/uuid</span></span><br></pre></td></tr></table></figure><p>Clients follow all links at their discretion.<br>Neither permissions, nor the capability to make a successful call to that link, is guaranteed<br>solely by the existence of a relationship.</p><h5 id="OperationRef-Examples"><a href="#OperationRef-Examples" class="headerlink" title="OperationRef Examples"></a>OperationRef Examples</h5><p>As references to <code>operationId</code> MAY NOT be possible (the <code>operationId</code> is an optional<br>value), references MAY also be made through a relative <code>operationRef</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">links:</span></span><br><span class="line"><span class="attr">  UserRepositories:</span></span><br><span class="line">    <span class="comment"># returns array of '#/components/schemas/repository'</span></span><br><span class="line"><span class="attr">    operationRef:</span> <span class="string">'#/paths/~12.0~1repositories~1&#123;username&#125;/get'</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">$response.body#/username</span></span><br></pre></td></tr></table></figure><p>or an absolute <code>operationRef</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">links:</span></span><br><span class="line"><span class="attr">  UserRepositories:</span></span><br><span class="line">    <span class="comment"># returns array of '#/components/schemas/repository'</span></span><br><span class="line"><span class="attr">    operationRef:</span> <span class="string">'https://na2.gigantic-server.com/#/paths/~12.0~1repositories~1&#123;username&#125;/get'</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">$response.body#/username</span></span><br></pre></td></tr></table></figure><p>Note that in the use of <code>operationRef</code>, the <em>escaped forward-slash</em> is necessary when<br>using JSON references.</p><h5 id="Runtime-Expressions"><a href="#Runtime-Expressions" class="headerlink" title="Runtime Expressions"></a><a name="runtimeExpression"></a>Runtime Expressions</h5><p>Runtime expressions allow defining values based on information that will only be available within the HTTP message in an actual API call.<br>This mechanism is used by <a href="#linkObject">Link Objects</a> and <a href="#callbackObject">Callback Objects</a>.</p><p>The runtime expression is defined by the following <a href="https://tools.ietf.org/html/rfc5234" target="_blank" rel="noopener">ABNF</a> syntax</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">expression = ( &quot;$url&quot; | &quot;$method&quot; | &quot;$statusCode&quot; | &quot;$request.&quot; source | &quot;$response.&quot; source )</span><br><span class="line">source = ( header-reference | query-reference | path-reference | body-reference )</span><br><span class="line">header-reference = &quot;header.&quot; token</span><br><span class="line">query-reference = &quot;query.&quot; name</span><br><span class="line">path-reference = &quot;path.&quot; name</span><br><span class="line">body-reference = &quot;body&quot; [&quot;#&quot; fragment]</span><br><span class="line">fragment = a JSON Pointer [RFC 6901](https://tools.ietf.org/html/rfc6901)</span><br><span class="line">name = *( char )</span><br><span class="line">char = as per RFC [7159](https://tools.ietf.org/html/rfc7159#section-7)</span><br><span class="line">token = as per RFC [7230](https://tools.ietf.org/html/rfc7230#section-3.2.6)</span><br></pre></td></tr></table></figure><p>The <code>name</code> identifier is case-sensitive, whereas <code>token</code> is not.</p><p>The table below provides examples of runtime expressions and examples of their use in a value:</p><h5 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a><a name="runtimeExpressionExamples"></a>Examples</h5><table><thead><tr><th>Source Location</th><th align="left">example expression</th><th align="left">notes</th></tr></thead><tbody><tr><td>HTTP Method</td><td align="left"><code>$method</code></td><td align="left">The allowable values for the <code>$method</code> will be those for the HTTP operation.</td></tr><tr><td>Requested media type</td><td align="left"><code>$request.header.accept</code></td><td align="left"></td></tr><tr><td>Request parameter</td><td align="left"><code>$request.path.id</code></td><td align="left">Request parameters MUST be declared in the <code>parameters</code> section of the parent operation or they cannot be evaluated. This includes request headers.</td></tr><tr><td>Request body property</td><td align="left"><code>$request.body#/user/uuid</code></td><td align="left">In operations which accept payloads, references may be made to portions of the <code>requestBody</code> or the entire body.</td></tr><tr><td>Request URL</td><td align="left"><code>$url</code></td><td align="left"></td></tr><tr><td>Response value</td><td align="left"><code>$response.body#/status</code></td><td align="left">In operations which return payloads, references may be made to portions of the response body or the entire body.</td></tr><tr><td>Response header</td><td align="left"><code>$response.header.Server</code></td><td align="left">Single header values only are available</td></tr></tbody></table><p>Runtime expressions preserve the type of the referenced value.<br>Expressions can be embedded into string values by surrounding the expression with <code>{}</code> curly braces.</p><h4 id="Header-对象"><a href="#Header-对象" class="headerlink" title="Header 对象"></a><a name="headerObject"></a>Header 对象</h4><p>Header 对象除了以下改动之外与 <a href="#parameterObject">Parameter 对象</a> 一致：</p><ol><li><code>name</code> 不能被指定，它在相应的 <code>headers</code> 映射中被指定。</li><li><code>in</code> 不能被指定，它隐含在 <code>header</code> 中。</li><li>所有被 location 影响的特性必须适合 <code>header</code> 中的一个 location，(比如 <a href="#parameterStyle"><code>style</code></a>)。</li></ol><h5 id="Header-对象示例"><a href="#Header-对象示例" class="headerlink" title="Header 对象示例"></a>Header 对象示例</h5><p>一个类型为 <code>integer</code> 的简单 header：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"The number of allowed requests in the current period"</span>,</span><br><span class="line">  <span class="attr">"schema"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"integer"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">The</span> <span class="string">number</span> <span class="string">of</span> <span class="string">allowed</span> <span class="string">requests</span> <span class="string">in</span> <span class="string">the</span> <span class="string">current</span> <span class="string">period</span></span><br><span class="line"><span class="attr">schema:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">integer</span></span><br></pre></td></tr></table></figure><h4 id="Tag-Object"><a href="#Tag-Object" class="headerlink" title="Tag Object"></a><a name="tagObject"></a>Tag Object</h4><p>Adds metadata to a single tag that is used by the <a href="#operationObject">Operation Object</a>.<br>It is not mandatory to have a Tag Object per tag defined in the Operation Object instances.</p><h5 id="固定字段-18"><a href="#固定字段-18" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="tagName"></a>name</td><td align="center"><code>string</code></td><td><strong>必选</strong>. The name of the tag.</td></tr><tr><td><a name="tagDescription"></a>description</td><td align="center"><code>string</code></td><td>A short description for the tag. <a href="http://spec.commonmark.org/" target="_blank" rel="noopener">CommonMark syntax</a>可以被用来呈现富文本格式.</td></tr><tr><td><a name="tagExternalDocs"></a>externalDocs</td><td align="center"><a href="#externalDocumentationObject">External Documentation Object</a></td><td>Additional external documentation for this tag.</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="Tag-对象示例"><a href="#Tag-对象示例" class="headerlink" title="Tag 对象示例"></a>Tag 对象示例</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"pet"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Pets operations"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">pet</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">Pets</span> <span class="string">operations</span></span><br></pre></td></tr></table></figure><h4 id="Examples-Object"><a href="#Examples-Object" class="headerlink" title="Examples Object"></a><a name="examplesObject"></a>Examples Object</h4><p>In an <code>example</code>, a JSON Reference MAY be used, with the<br>explicit restriction that examples having a JSON format with object named<br><code>$ref</code> are not allowed. Therefore, that <code>example</code>, structurally, can be<br>either a string primitive or an object, similar to <code>additionalProperties</code>.</p><p>In all cases, the payload is expected to be compatible with the type schema<br>for the associated value.  Tooling implementations MAY choose to<br>validate compatibility automatically, and reject the example value(s) if they<br>are incompatible.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in a model</span></span><br><span class="line"><span class="attr">schemas:</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    name:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      example:</span></span><br><span class="line">        <span class="string">$ref:</span> <span class="attr">http://foo.bar#/examples/name-example</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in a request body, note the plural `examples`</span></span><br><span class="line"><span class="attr">  requestBody:</span></span><br><span class="line"><span class="attr">    content:</span></span><br><span class="line">      <span class="string">'application/json'</span><span class="string">:</span></span><br><span class="line"><span class="attr">        schema:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">'#/components/schemas/Address'</span></span><br><span class="line"><span class="attr">        examples:</span></span><br><span class="line"><span class="attr">          foo:</span></span><br><span class="line"><span class="attr">            value:</span> <span class="string">&#123;"foo":</span> <span class="string">"bar"</span><span class="string">&#125;</span></span><br><span class="line"><span class="attr">          bar:</span></span><br><span class="line"><span class="attr">            value:</span> <span class="string">&#123;"bar":</span> <span class="string">"baz"</span><span class="string">&#125;</span></span><br><span class="line">      <span class="string">'application/xml'</span><span class="string">:</span></span><br><span class="line"><span class="attr">        examples:</span></span><br><span class="line"><span class="attr">          xml:</span></span><br><span class="line"><span class="attr">            externalValue:</span> <span class="string">'http://foo.bar/examples/address-example.xml'</span></span><br><span class="line">      <span class="string">'text/plain'</span><span class="string">:</span></span><br><span class="line"><span class="attr">        examples:</span></span><br><span class="line"><span class="attr">          text:</span></span><br><span class="line"><span class="attr">            externalValue:</span> <span class="string">'http://foo.bar/examples/address-example.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in a parameter</span></span><br><span class="line"><span class="attr">  parameters:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">'zipCode'</span></span><br><span class="line"><span class="attr">      in:</span> <span class="string">'query'</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">'string'</span></span><br><span class="line"><span class="attr">        format:</span> <span class="string">'zip-code'</span></span><br><span class="line"><span class="attr">        example:</span></span><br><span class="line">          <span class="string">$ref:</span> <span class="string">'http://foo.bar#/examples/zip-example'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in a response, note the singular `example`:</span></span><br><span class="line"><span class="attr">  responses:</span></span><br><span class="line">    <span class="string">'200'</span><span class="string">:</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">your</span> <span class="string">car</span> <span class="string">appointment</span> <span class="string">has</span> <span class="string">been</span> <span class="string">booked</span></span><br><span class="line"><span class="attr">      content:</span></span><br><span class="line">        <span class="string">application/json:</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/components/schemas/SuccessResponse'</span></span><br><span class="line"><span class="attr">          example:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="attr">http://foo.bar#/examples/address-example.json</span></span><br></pre></td></tr></table></figure><h4 id="Reference-对象"><a href="#Reference-对象" class="headerlink" title="Reference 对象"></a><a name="referenceObject"></a>Reference 对象</h4><p>一个允许引用规范内部的其他部分或外部规范的对象。</p><p>Reference Object 定义于 <a href="https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03" target="_blank" rel="noopener">JSON Reference</a> 且遵循相同的结构、行为和规则。</p><p>For this specification, reference resolution is accomplished as defined by the JSON Reference specification and not by the JSON Schema specification.</p><h5 id="固定字段-19"><a href="#固定字段-19" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="referenceRef"></a>$ref</td><td align="center"><code>string</code></td><td><strong>必选</strong>. 引用字符串。</td></tr></tbody></table><p>此对象不能被扩展，任何附加的属性将会被忽略。</p><h5 id="Reference-对象示例"><a href="#Reference-对象示例" class="headerlink" title="Reference 对象示例"></a>Reference 对象示例</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$ref"</span>: <span class="string">"#/components/schemas/Pet"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$ref:</span> <span class="string">'#/components/schemas/Pet'</span></span><br></pre></td></tr></table></figure><h5 id="关联外部文档示例"><a href="#关联外部文档示例" class="headerlink" title="关联外部文档示例"></a>关联外部文档示例</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$ref"</span>: <span class="string">"Pet.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$ref:</span> <span class="string">Pet.yaml</span></span><br></pre></td></tr></table></figure><h5 id="关联外部文档的一部分"><a href="#关联外部文档的一部分" class="headerlink" title="关联外部文档的一部分"></a>关联外部文档的一部分</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$ref"</span>: <span class="string">"definitions.json#/Pet"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$ref:</span> <span class="string">definitions.yaml#/Pet</span></span><br></pre></td></tr></table></figure><h4 id="Schema-Object"><a href="#Schema-Object" class="headerlink" title="Schema Object"></a><a name="schemaObject"></a>Schema Object</h4><p>Schema Object 用于定义输入和输出的数据类型。这些类型可以是对象，但也可以是原始值和数组。这个对象是 <a href="http://json-schema.org/" target="_blank" rel="noopener">JSON Schema Specification Wright Draft 00</a> 扩展后的子集.</p><p>关于property的的更多信息请查看 <a href="https://tools.ietf.org/html/draft-wright-json-schema-00" target="_blank" rel="noopener">JSON Schema Core</a> 和 <a href="https://tools.ietf.org/html/draft-wright-json-schema-validation-00" target="_blank" rel="noopener">JSON Schema Validation</a>。除非另有说明，否则 properties 定义遵循JSON Schema。</p><h5 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h5><p>以下 properties 是直接从 JSON Schema 提取出来的，而且遵循同样的规范：</p><ul><li>title</li><li>multipleOf</li><li>maximum</li><li>exclusiveMaximum</li><li>minimum</li><li>exclusiveMinimum</li><li>maxLength</li><li>minLength</li><li>pattern (This string SHOULD be a valid regular expression, according to the <a href="https://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5" target="_blank" rel="noopener">ECMA 262 regular expression</a> dialect)</li><li>maxItems</li><li>minItems</li><li>uniqueItems</li><li>maxProperties</li><li>minProperties</li><li>required</li><li>enum</li></ul><p>以下 properties 是从 JSON Schema 提取出来的，但是做了一些调整以适应 OpenAPI Specification。</p><ul><li>type - 值必须是一个字符串，不支持以数组形式定义多个值。</li><li>allOf - Inline 或 referenced 的 schema 必须是一个 <a href="#schemaObject">Schema Object</a> 且不是一个标准的 JSON Schema。</li><li>oneOf - Inline 或 referenced 的 schema 必须是一个 <a href="#schemaObject">Schema Object</a> 且不是一个标准的 JSON Schema。</li><li>anyOf - Inline 或 referenced 的 schema 必须是一个 <a href="#schemaObject">Schema Object</a> 且不是一个标准的 JSON Schema。</li><li>not - Inline 或 referenced 的 schema 必须是一个 <a href="#schemaObject">Schema Object</a> 且不是一个标准的 JSON Schema。</li><li>items - 值必须是一个对象且不是一个数组。Inline 或 referenced 的 schema 必须是一个 <a href="#schemaObject">Schema Object</a>且不是一个标准的 JSON Schem。. <code>items</code> 必须存在如果 <code>type</code> 的值是 <code>array</code>。</li><li>properties - Property 定义必须是一个 <a href="#schemaObject">Schema Object</a> 且不是一个标准的 JSON Schema (inline 或 referenced).</li><li>additionalProperties - 值可以是 boolean 或 object. Inline 或 referenced schema 必须是一个 <a href="#schemaObject">Schema Object</a> 且不是一个标准的 JSON Schema。</li><li>description - <a href="http://spec.commonmark.org/" target="_blank" rel="noopener">CommonMark syntax</a>可以被用来呈现富文本格式.</li><li>format - 查看 <a href="#dataTypeFormat">Data Type Formats</a> 以深入了解细节。在依靠 JSON Schema 定义的格式的同时，OAS 额外提供了一些预定义的格式。</li><li>default - The default value represents what would be assumed by the consumer of the input as the value of the schema if one is not provided. 不同于 JSON Schema，这个值必须符合定义与相同级别的 Schema Object 中定义的类型，比如 <code>type</code> 是 <code>string</code>，那么 <code>default</code> 可以是 <code>&quot;foo&quot;</code> 但不能是 <code>1</code>。</li></ul><p>另外，任何可以使用 Schema Object 的地方也可以使用 <a href="#referenceObject">Reference Object</a> 替代。这允许引用一个定义而避免重复定义。</p><p>未在此处提及的 JSON Schema 规范中定义的其他属性将严格的不被支持。</p><p>Other than the JSON Schema subset fields, 以下字段可能会被用于后续的 schema documentation：</p><h5 id="固定字段-20"><a href="#固定字段-20" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="schemaNullable"></a>nullable</td><td align="center"><code>boolean</code></td><td>对于定义的schema，允许发送 <code>null</code> 值。默认值是 <code>false</code>。</td></tr><tr><td><a name="schemaDiscriminator"></a>discriminator</td><td align="center"><a href="#discriminatorObject">Discriminator Object</a></td><td>Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description. See <a href="#schemaComposition">Composition and Inheritance</a> for more details.</td></tr><tr><td><a name="schemaReadOnly"></a>readOnly</td><td align="center"><code>boolean</code></td><td>仅与 Schema <code>&quot;properties&quot;</code> 定义有关。 声明此属性是 “readonly” 的。这意味着它可以作为 response 的一部分但不应该作为 request 的一部分被发送。如果一个 property 的 <code>readOnly</code> 被标记为 <code>true</code> 且在 <code>required</code> 列表中，<code>required</code> 将只作用于 response。一个 property 的 <code>readOnly</code> 和 <code>writeOnly</code> 不允许同时被标记为 <code>true</code>。默认值是 <code>false</code>。</td></tr><tr><td><a name="schemaWriteOnly"></a>writeOnly</td><td align="center"><code>boolean</code></td><td>仅与 Schema <code>&quot;properties&quot;</code> 定义有关。声明此 property 为 “write only”。所以它可以作为 request 的一部分而不应该作为 response 的一部分被发送。如果一个 property 的 <code>writeOnly</code> 被标记为 <code>true</code> 且在 <code>required</code> 列表中，<code>required</code> 将只作用于 request。一个 property 的 <code>readOnly</code> 和 <code>writeOnly</code> 不能同时被标记为 <code>true</code>。默认值是 <code>false</code>。</td></tr><tr><td><a name="schemaXml"></a>xml</td><td align="center"><a href="#xmlObject">XML Object</a></td><td>这只能用于 properties schemas，在 root schemas 中没有效果。Adds additional metadata to describe the XML representation of this property.</td></tr><tr><td><a name="schemaExternalDocs"></a>externalDocs</td><td align="center"><a href="#externalDocumentationObject">External Documentation Object</a></td><td>此 schema 附加的外部文档。</td></tr><tr><td><a name="schemaExample"></a>example</td><td align="center">Any</td><td>一个用于示范此 schema实例的示例，可以是任意格式。为了表达无法用 JSON 或 YAML 格式呈现的示例，可以使用 string 类型的值，且在必要的地方需要使用字符转义。</td></tr><tr><td><a name="schemaDeprecated"></a> deprecated</td><td align="center"><code>boolean</code></td><td>表示一个 schema 是废弃的，应该逐渐被放弃使用。默认值是 <code>false</code>.</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h6 id="Composition-and-Inheritance-Polymorphism"><a href="#Composition-and-Inheritance-Polymorphism" class="headerlink" title="Composition and Inheritance (Polymorphism)"></a><a name="schemaComposition"></a>Composition and Inheritance (Polymorphism)</h6><p>The OpenAPI Specification allows combining and extending model definitions using the <code>allOf</code> property of JSON Schema, in effect offering model composition.<br><code>allOf</code> takes an array of object definitions that are validated <em>independently</em> but together compose a single object.</p><p>While composition offers model extensibility, it does not imply a hierarchy between the models.<br>To support polymorphism, the OpenAPI Specification adds the <code>discriminator</code> field.<br>When used, the <code>discriminator</code> will be the name of the property that decides which schema definition validates the structure of the model.<br>As such, the <code>discriminator</code> field MUST be a required field.<br>There are are two ways to define the value of a discriminator for an inheriting instance.</p><ul><li>Use the schema name.</li><li>Override the schema name by overriding the property with a new value. If a new value exists, this takes precedence over the schema name.<br>As such, inline schema definitions, which do not have a given id, <em>cannot</em> be used in polymorphism.</li></ul><h6 id="XML-Modeling"><a href="#XML-Modeling" class="headerlink" title="XML Modeling"></a>XML Modeling</h6><p>The <a href="#schemaXml">xml</a> property allows extra definitions when translating the JSON definition to XML.<br>The <a href="#xmlObject">XML Object</a> contains additional information about the available options.</p><h5 id="Schema-对象示例s"><a href="#Schema-对象示例s" class="headerlink" title="Schema 对象示例s"></a>Schema 对象示例s</h5><h6 id="Primitive-Sample"><a href="#Primitive-Sample" class="headerlink" title="Primitive Sample"></a>Primitive Sample</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="attr">"format"</span>: <span class="string">"email"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">format:</span> <span class="string">email</span></span><br></pre></td></tr></table></figure><h6 id="Simple-Model"><a href="#Simple-Model" class="headerlink" title="Simple Model"></a>Simple Model</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">  <span class="attr">"required"</span>: [</span><br><span class="line">    <span class="string">"name"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"address"</span>: &#123;</span><br><span class="line">      <span class="attr">"$ref"</span>: <span class="string">"#/components/schemas/Address"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"age"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">      <span class="attr">"format"</span>: <span class="string">"int32"</span>,</span><br><span class="line">      <span class="attr">"minimum"</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">required:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">name</span></span><br><span class="line"><span class="attr">properties:</span></span><br><span class="line"><span class="attr">  name:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  address:</span></span><br><span class="line">    <span class="string">$ref:</span> <span class="string">'#/components/schemas/Address'</span></span><br><span class="line"><span class="attr">  age:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">    format:</span> <span class="string">int32</span></span><br><span class="line"><span class="attr">    minimum:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h6 id="Model-with-Map-Dictionary-Properties"><a href="#Model-with-Map-Dictionary-Properties" class="headerlink" title="Model with Map/Dictionary Properties"></a>Model with Map/Dictionary Properties</h6><p>For a simple string to string mapping:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">  <span class="attr">"additionalProperties"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">additionalProperties:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><p>For a string to model mapping:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">  <span class="attr">"additionalProperties"</span>: &#123;</span><br><span class="line">    <span class="attr">"$ref"</span>: <span class="string">"#/components/schemas/ComplexModel"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">additionalProperties:</span></span><br><span class="line">  <span class="string">$ref:</span> <span class="string">'#/components/schemas/ComplexModel'</span></span><br></pre></td></tr></table></figure><h6 id="Model-with-Example"><a href="#Model-with-Example" class="headerlink" title="Model with Example"></a>Model with Example</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"id"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">      <span class="attr">"format"</span>: <span class="string">"int64"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"name"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"required"</span>: [</span><br><span class="line">    <span class="string">"name"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"example"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Puma"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">properties:</span></span><br><span class="line"><span class="attr">  id:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">    format:</span> <span class="string">int64</span></span><br><span class="line"><span class="attr">  name:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">required:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">name</span></span><br><span class="line"><span class="attr">example:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">Puma</span></span><br><span class="line"><span class="attr">  id:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h6 id="Models-with-Composition"><a href="#Models-with-Composition" class="headerlink" title="Models with Composition"></a>Models with Composition</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"components"</span>: &#123;</span><br><span class="line">    <span class="attr">"schemas"</span>: &#123;</span><br><span class="line">      <span class="attr">"ErrorModel"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">        <span class="attr">"required"</span>: [</span><br><span class="line">          <span class="string">"message"</span>,</span><br><span class="line">          <span class="string">"code"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"message"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"code"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">            <span class="attr">"minimum"</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">"maximum"</span>: <span class="number">600</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"ExtendedErrorModel"</span>: &#123;</span><br><span class="line">        <span class="attr">"allOf"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"$ref"</span>: <span class="string">"#/components/schemas/ErrorModel"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">            <span class="attr">"required"</span>: [</span><br><span class="line">              <span class="string">"rootCause"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;</span><br><span class="line">              <span class="attr">"rootCause"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">components:</span></span><br><span class="line"><span class="attr">  schemas:</span></span><br><span class="line"><span class="attr">    ErrorModel:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">      required:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">message</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">code</span></span><br><span class="line"><span class="attr">      properties:</span></span><br><span class="line"><span class="attr">        message:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">        code:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">          minimum:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">          maximum:</span> <span class="number">600</span></span><br><span class="line"><span class="attr">    ExtendedErrorModel:</span></span><br><span class="line"><span class="attr">      allOf:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$ref:</span> <span class="string">'#/components/schemas/ErrorModel'</span></span><br><span class="line"><span class="attr">      - type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">        required:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">rootCause</span></span><br><span class="line"><span class="attr">        properties:</span></span><br><span class="line"><span class="attr">          rootCause:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><h6 id="Models-with-Polymorphism-Support"><a href="#Models-with-Polymorphism-Support" class="headerlink" title="Models with Polymorphism Support"></a>Models with Polymorphism Support</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"components"</span>: &#123;</span><br><span class="line">    <span class="attr">"schemas"</span>: &#123;</span><br><span class="line">      <span class="attr">"Pet"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">        <span class="attr">"discriminator"</span>: &#123;</span><br><span class="line">          <span class="attr">"propertyName"</span>: <span class="string">"petType"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"name"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"petType"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"required"</span>: [</span><br><span class="line">          <span class="string">"name"</span>,</span><br><span class="line">          <span class="string">"petType"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"Cat"</span>: &#123;</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"A representation of a cat. Note that `Cat` will be used as the discriminator value."</span>,</span><br><span class="line">        <span class="attr">"allOf"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"$ref"</span>: <span class="string">"#/components/schemas/Pet"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;</span><br><span class="line">              <span class="attr">"huntingSkill"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"The measured skill for hunting"</span>,</span><br><span class="line">                <span class="attr">"default"</span>: <span class="string">"lazy"</span>,</span><br><span class="line">                <span class="attr">"enum"</span>: [</span><br><span class="line">                  <span class="string">"clueless"</span>,</span><br><span class="line">                  <span class="string">"lazy"</span>,</span><br><span class="line">                  <span class="string">"adventurous"</span>,</span><br><span class="line">                  <span class="string">"aggressive"</span></span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"required"</span>: [</span><br><span class="line">              <span class="string">"huntingSkill"</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"Dog"</span>: &#123;</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"A representation of a dog. Note that `Dog` will be used as the discriminator value."</span>,</span><br><span class="line">        <span class="attr">"allOf"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"$ref"</span>: <span class="string">"#/components/schemas/Pet"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;</span><br><span class="line">              <span class="attr">"packSize"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">                <span class="attr">"format"</span>: <span class="string">"int32"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"the size of the pack the dog is from"</span>,</span><br><span class="line">                <span class="attr">"default"</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">"minimum"</span>: <span class="number">0</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"required"</span>: [</span><br><span class="line">              <span class="string">"packSize"</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">components:</span></span><br><span class="line"><span class="attr">  schemas:</span></span><br><span class="line"><span class="attr">    Pet:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">      discriminator:</span></span><br><span class="line"><span class="attr">        propertyName:</span> <span class="string">petType</span></span><br><span class="line"><span class="attr">      properties:</span></span><br><span class="line"><span class="attr">        name:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">        petType:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      required:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">name</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">petType</span></span><br><span class="line"><span class="attr">    Cat:</span>  <span class="comment">## "Cat" will be used as the discriminator value</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">A</span> <span class="string">representation</span> <span class="string">of</span> <span class="string">a</span> <span class="string">cat</span></span><br><span class="line"><span class="attr">      allOf:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$ref:</span> <span class="string">'#/components/schemas/Pet'</span></span><br><span class="line"><span class="attr">      - type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">        properties:</span></span><br><span class="line"><span class="attr">          huntingSkill:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">            description:</span> <span class="string">The</span> <span class="string">measured</span> <span class="string">skill</span> <span class="string">for</span> <span class="string">hunting</span></span><br><span class="line"><span class="attr">            enum:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">clueless</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">lazy</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">adventurous</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">aggressive</span></span><br><span class="line"><span class="attr">        required:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">huntingSkill</span></span><br><span class="line"><span class="attr">    Dog:</span>  <span class="comment">## "Dog" will be used as the discriminator value</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">A</span> <span class="string">representation</span> <span class="string">of</span> <span class="string">a</span> <span class="string">dog</span></span><br><span class="line"><span class="attr">      allOf:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$ref:</span> <span class="string">'#/components/schemas/Pet'</span></span><br><span class="line"><span class="attr">      - type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">        properties:</span></span><br><span class="line"><span class="attr">          packSize:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">            format:</span> <span class="string">int32</span></span><br><span class="line"><span class="attr">            description:</span> <span class="string">the</span> <span class="string">size</span> <span class="string">of</span> <span class="string">the</span> <span class="string">pack</span> <span class="string">the</span> <span class="string">dog</span> <span class="string">is</span> <span class="string">from</span></span><br><span class="line"><span class="attr">            default:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">            minimum:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">        required:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">packSize</span></span><br></pre></td></tr></table></figure><h4 id="Discriminator-对象"><a href="#Discriminator-对象" class="headerlink" title="Discriminator 对象"></a><a name="discriminatorObject"></a>Discriminator 对象</h4><p>当一个 request bodies 或 response payloads 可以是多种 schemas 时，可以使用一个 <code>discriminator</code> 对象来帮助序列化、反序列化和校验。  The discriminator is a specific object in a schema which is used to inform the consumer of the specification of an alternative schema based on the value associated with it.</p><p>当使用 discriminator 时，<em>inline</em> schemas 不会被考虑。</p><h5 id="固定字段-21"><a href="#固定字段-21" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="propertyName"></a>propertyName</td><td align="center"><code>string</code></td><td><strong>必选</strong>. 在 payload 中表示 discriminator 值的属性的名称。</td></tr><tr><td><a name="discriminatorMapping"></a> mapping</td><td align="center">Map[<code>string</code>, <code>string</code>]</td><td>一个映射 payload 中的值和 schema 名称或引用的对象。</td></tr></tbody></table><p>discriminator 属性仅在与 <code>oneOf</code>, <code>anyOf</code>, <code>allOf</code> 这几个复合关键字之一一起使用时才合法.</p><p>在 OAS 3.0 中，一个 response payload 仅可以使用一种类型来描述：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">MyResponseType:</span></span><br><span class="line"><span class="attr">  oneOf:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">$ref:</span> <span class="string">'#/components/schemas/Cat'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">$ref:</span> <span class="string">'#/components/schemas/Dog'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">$ref:</span> <span class="string">'#/components/schemas/Lizard'</span></span><br></pre></td></tr></table></figure><p>也就是说 payload <em>必须</em> 且只能满足 <code>Cat</code>、<code>Dog</code> 或 <code>Lizzard</code> schemas 中的一个。 In this case, a discriminator MAY act as a “hint” to shortcut validation and selection of the matching schema which may be a costly operation, depending on the complexity of the schema. We can then describe exactly which field tells us which schema to use:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">MyResponseType:</span></span><br><span class="line"><span class="attr">  oneOf:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">$ref:</span> <span class="string">'#/components/schemas/Cat'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">$ref:</span> <span class="string">'#/components/schemas/Dog'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">$ref:</span> <span class="string">'#/components/schemas/Lizard'</span></span><br><span class="line"><span class="attr">  discriminator:</span></span><br><span class="line"><span class="attr">    propertyName:</span> <span class="string">pet_type</span></span><br></pre></td></tr></table></figure><p>The expectation now is that a property with name <code>pet_type</code> <em>MUST</em> be present in the response payload, and the value will correspond to the name of a schema defined in the OAS document.  Thus the response payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">12345</span>,</span><br><span class="line">  <span class="attr">"pet_type"</span>: <span class="string">"Cat"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Will indicate that the <code>Cat</code> schema be used in conjunction with this payload.</p><p>In scenarios where the value of the discriminator field does not match the schema name or implicit mapping is not possible, an optional <code>mapping</code> definition MAY be used:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">MyResponseType:</span></span><br><span class="line"><span class="attr">  oneOf:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">$ref:</span> <span class="string">'#/components/schemas/Cat'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">$ref:</span> <span class="string">'#/components/schemas/Dog'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">$ref:</span> <span class="string">'#/components/schemas/Lizard'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">$ref:</span> <span class="string">'https://gigantic-server.com/schemas/Monster/schema.json'</span></span><br><span class="line"><span class="attr">  discriminator:</span></span><br><span class="line"><span class="attr">    propertyName:</span> <span class="string">pet_type</span></span><br><span class="line"><span class="attr">    mapping:</span></span><br><span class="line"><span class="attr">      dog:</span> <span class="string">'#/components/schemas/Dog'</span></span><br><span class="line"><span class="attr">      monster:</span> <span class="string">'https://gigantic-server.com/schemas/Monster/schema.json'</span></span><br></pre></td></tr></table></figure><p>Here the discriminator <em>value</em> of <code>dog</code> will map to the schema <code>#/components/schemas/Dog</code>, rather than the default (implicit) value of <code>Dog</code>.  If the discriminator <em>value</em> does not match an implicit or explicit mapping, no schema can be determined and validation SHOULD fail. Mapping keys MUST be string values, but tooling MAY convert response values to strings for comparison.</p><p>When used in conjunction with the <code>anyOf</code> construct, the use of the discriminator can avoid ambiguity where multiple schemas may satisfy a single payload.</p><p>In both the <code>oneOf</code> and <code>anyOf</code> use cases, all possible schemas MUST be listed explicitly.  To avoid redundancy, the discriminator MAY be added to a parent schema definition, and all schemas comprising the parent schema in an <code>allOf</code> construct may be used as an alternate schema.</p><p>For example:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">components:</span></span><br><span class="line"><span class="attr">  schemas:</span></span><br><span class="line"><span class="attr">    Pet:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">      required:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">pet_type</span></span><br><span class="line"><span class="attr">      properties:</span></span><br><span class="line"><span class="attr">        pet_type:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      discriminator:</span></span><br><span class="line"><span class="attr">        propertyName:</span> <span class="string">pet_type</span></span><br><span class="line"><span class="attr">        mapping:</span></span><br><span class="line"><span class="attr">          cachorro:</span> <span class="string">Dog</span></span><br><span class="line"><span class="attr">    Cat:</span></span><br><span class="line"><span class="attr">      allOf:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$ref:</span> <span class="string">'#/components/schemas/Pet'</span></span><br><span class="line"><span class="attr">      - type:</span> <span class="string">object</span></span><br><span class="line">        <span class="comment"># all other properties specific to a `Cat`</span></span><br><span class="line"><span class="attr">        properties:</span></span><br><span class="line"><span class="attr">          name:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    Dog:</span></span><br><span class="line"><span class="attr">      allOf:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$ref:</span> <span class="string">'#/components/schemas/Pet'</span></span><br><span class="line"><span class="attr">      - type:</span> <span class="string">object</span></span><br><span class="line">        <span class="comment"># all other properties specific to a `Dog`</span></span><br><span class="line"><span class="attr">        properties:</span></span><br><span class="line"><span class="attr">          bark:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    Lizard:</span></span><br><span class="line"><span class="attr">      allOf:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$ref:</span> <span class="string">'#/components/schemas/Pet'</span></span><br><span class="line"><span class="attr">      - type:</span> <span class="string">object</span></span><br><span class="line">        <span class="comment"># all other properties specific to a `Lizard`</span></span><br><span class="line"><span class="attr">        properties:</span></span><br><span class="line"><span class="attr">          lovesRocks:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">boolean</span></span><br></pre></td></tr></table></figure><p>a payload like this:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pet_type"</span>: <span class="string">"Cat"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"misty"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>will indicate that the <code>Cat</code> schema be used.  Likewise this schema:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pet_type"</span>: <span class="string">"cachorro"</span>,</span><br><span class="line">  <span class="attr">"bark"</span>: <span class="string">"soft"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>will map to <code>Dog</code> because of the definition in the <code>mappings</code> element.</p><h4 id="XML-对象"><a href="#XML-对象" class="headerlink" title="XML 对象"></a><a name="xmlObject"></a>XML 对象</h4><p>一个为 XML 模型定义微调过的元数据对象。</p><p>当使用数组时，不会推测 XML 元素的名称（单数或复数形式），所以应该添加 <code>name</code> 属性来提供此信息。<br>查看展示此期望的示例。</p><h5 id="固定字段-22"><a href="#固定字段-22" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="xmlName"></a>name</td><td align="center"><code>string</code></td><td>替换用于描述元素/属性的结构特性的名称。当在 <code>items</code> 内定义时将会影响处于此列表中的每个元素的名称。当定义于 <code>items</code> 之上时将会影响它说包裹的元素且仅当 <code>wrapped</code> 是 <code>true</code> 时，如果 <code>wrapped</code> 是 <code>false</code> 时它将会被忽略。</td></tr><tr><td><a name="xmlNamespace"></a>namespace</td><td align="center"><code>string</code></td><td>命名空间定义的 URI。其值必须是绝对 URI。</td></tr><tr><td><a name="xmlPrefix"></a>prefix</td><td align="center"><code>string</code></td><td>用于 <a href="#xmlName">name</a> 的前缀。</td></tr><tr><td><a name="xmlAttribute"></a>attribute</td><td align="center"><code>boolean</code></td><td>声明此特性定义会被转换为一个属性而不是一个元素。默认值是 <code>false</code>。</td></tr><tr><td><a name="xmlWrapped"></a>wrapped</td><td align="center"><code>boolean</code></td><td>只可被用于数组定义。表示数组是否被包裹（比如, <code>&lt;books&gt;&lt;book/&gt;&lt;book/&gt;&lt;/books&gt;</code>）或未被包裹（<code>&lt;book/&gt;&lt;book/&gt;</code>）。默认值是 <code>false</code>。此定义只在 <code>type</code> 为 <code>array</code>（位于 <code>items</code> 之上） 时生效。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="XML-对象示例"><a href="#XML-对象示例" class="headerlink" title="XML 对象示例"></a>XML 对象示例</h5><p>XML 对象定义的示例被包括在一个 <a href="#schemaObject">Schema 对象</a> 的特性定义并带有一个样例 XML 来呈现它。</p><h6 id="无-XML-元素"><a href="#无-XML-元素" class="headerlink" title="无 XML 元素"></a>无 XML 元素</h6><p>基础字符串属性：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"animals"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">animals:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animals</span>&gt;</span>...<span class="tag">&lt;/<span class="name">animals</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基础字符串数组属性 (<a href="#xmlWrapped"><code>wrapped</code></a> 默认是 <code>false</code>)：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"animals"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">        <span class="attr">"items"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">animals:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">  items:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animals</span>&gt;</span>...<span class="tag">&lt;/<span class="name">animals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">animals</span>&gt;</span>...<span class="tag">&lt;/<span class="name">animals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">animals</span>&gt;</span>...<span class="tag">&lt;/<span class="name">animals</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="XML-名称替换"><a href="#XML-名称替换" class="headerlink" title="XML 名称替换"></a>XML 名称替换</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"animals"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">    <span class="attr">"xml"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"animal"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">animals:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  xml:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">animal</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animal</span>&gt;</span>...<span class="tag">&lt;/<span class="name">animal</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="XML-属性，前缀和命名空间"><a href="#XML-属性，前缀和命名空间" class="headerlink" title="XML 属性，前缀和命名空间"></a>XML 属性，前缀和命名空间</h6><p>在此示例中展示了一个完整的模型定义。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Person"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>: &#123;</span><br><span class="line">      <span class="attr">"id"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">        <span class="attr">"format"</span>: <span class="string">"int32"</span>,</span><br><span class="line">        <span class="attr">"xml"</span>: &#123;</span><br><span class="line">          <span class="attr">"attribute"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"name"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">        <span class="attr">"xml"</span>: &#123;</span><br><span class="line">          <span class="attr">"namespace"</span>: <span class="string">"http://example.com/schema/sample"</span>,</span><br><span class="line">          <span class="attr">"prefix"</span>: <span class="string">"sample"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Person:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    id:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">      format:</span> <span class="string">int32</span></span><br><span class="line"><span class="attr">      xml:</span></span><br><span class="line"><span class="attr">        attribute:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    name:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      xml:</span></span><br><span class="line"><span class="attr">        namespace:</span> <span class="attr">http://example.com/schema/sample</span></span><br><span class="line"><span class="attr">        prefix:</span> <span class="string">sample</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">id</span>=<span class="string">"123"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sample:name</span> <span class="attr">xmlns:sample</span>=<span class="string">"http://example.com/schema/sample"</span>&gt;</span>example<span class="tag">&lt;/<span class="name">sample:name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Person</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="XML-数组"><a href="#XML-数组" class="headerlink" title="XML 数组"></a>XML 数组</h6><p>改变元素的名称：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"animals"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">    <span class="attr">"items"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="attr">"xml"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"animal"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">animals:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">  items:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    xml:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">animal</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animal</span>&gt;</span>value<span class="tag">&lt;/<span class="name">animal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">animal</span>&gt;</span>value<span class="tag">&lt;/<span class="name">animal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外部的 <code>name</code> 属性在 XML 上不产生效果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"animals"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">    <span class="attr">"items"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="attr">"xml"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"animal"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"xml"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"aliens"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">animals:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">  items:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    xml:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">animal</span></span><br><span class="line"><span class="attr">  xml:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">aliens</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animal</span>&gt;</span>value<span class="tag">&lt;/<span class="name">animal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">animal</span>&gt;</span>value<span class="tag">&lt;/<span class="name">animal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>尽管数组是被包裹的，如果没有明确定义一个名称，那么同样地名称会被用于内部和外部：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"animals"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">    <span class="attr">"items"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"xml"</span>: &#123;</span><br><span class="line">      <span class="attr">"wrapped"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">animals:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">  items:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  xml:</span></span><br><span class="line"><span class="attr">    wrapped:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animals</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">animals</span>&gt;</span>value<span class="tag">&lt;/<span class="name">animals</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">animals</span>&gt;</span>value<span class="tag">&lt;/<span class="name">animals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">animals</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了解决上面示例的命名问题，可以使用下面的定义：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"animals"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">    <span class="attr">"items"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="attr">"xml"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"animal"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"xml"</span>: &#123;</span><br><span class="line">      <span class="attr">"wrapped"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">animals:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">  items:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    xml:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">animal</span></span><br><span class="line"><span class="attr">  xml:</span></span><br><span class="line"><span class="attr">    wrapped:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animals</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">animal</span>&gt;</span>value<span class="tag">&lt;/<span class="name">animal</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">animal</span>&gt;</span>value<span class="tag">&lt;/<span class="name">animal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">animals</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Affecting both internal and external names:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"animals"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">    <span class="attr">"items"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="attr">"xml"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"animal"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"xml"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"aliens"</span>,</span><br><span class="line">      <span class="attr">"wrapped"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">animals:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">  items:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    xml:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">animal</span></span><br><span class="line"><span class="attr">  xml:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">aliens</span></span><br><span class="line"><span class="attr">    wrapped:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aliens</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">animal</span>&gt;</span>value<span class="tag">&lt;/<span class="name">animal</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">animal</span>&gt;</span>value<span class="tag">&lt;/<span class="name">animal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aliens</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果我们改变外部的元素而保持内部的不变：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"animals"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">    <span class="attr">"items"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"xml"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"aliens"</span>,</span><br><span class="line">      <span class="attr">"wrapped"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">animals:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">  items:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  xml:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">aliens</span></span><br><span class="line"><span class="attr">    wrapped:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aliens</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aliens</span>&gt;</span>value<span class="tag">&lt;/<span class="name">aliens</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aliens</span>&gt;</span>value<span class="tag">&lt;/<span class="name">aliens</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aliens</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Security-Scheme-对象"><a href="#Security-Scheme-对象" class="headerlink" title="Security Scheme 对象"></a><a name="securitySchemeObject"></a>Security Scheme 对象</h4><p>定义一个用于 operations 的 security scheme。被支持的 schemes 有 HTTP 认证，一个 API key（作为 header 或 query parameter），定义于<a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener">RFC6749</a> 的 Oauth2 常用流程（implicit、password、application 和 access code）和 <a href="https://tools.ietf.org/html/draft-ietf-oauth-discovery-06" target="_blank" rel="noopener">OpenID Connect Discovery</a>。</p><h5 id="固定字段-23"><a href="#固定字段-23" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>Applies To</th><th>描述</th></tr></thead><tbody><tr><td><a name="securitySchemeType"></a>type</td><td align="center"><code>string</code></td><td>Any</td><td><strong>必选</strong>. security scheme 的类型。有效值包括 <code>&quot;apiKey&quot;</code>, <code>&quot;http&quot;</code>, <code>&quot;oauth2&quot;</code>, <code>&quot;openIdConnect&quot;</code>.</td></tr><tr><td><a name="securitySchemeDescription"></a>description</td><td align="center"><code>string</code></td><td>Any</td><td>对 security scheme 的简短描述. <a href="http://spec.commonmark.org/" target="_blank" rel="noopener">CommonMark syntax</a>可以被用来呈现富文本格式.</td></tr><tr><td><a name="securitySchemeName"></a>name</td><td align="center"><code>string</code></td><td><code>apiKey</code></td><td><strong>必选</strong>. 用于 header、 query 或 cookie 的参数名字。</td></tr><tr><td><a name="securitySchemeIn"></a>in</td><td align="center"><code>string</code></td><td><code>apiKey</code></td><td><strong>必选</strong>. API key 的位置。有效值包括 <code>&quot;query&quot;</code>、<code>&quot;header&quot;</code> 或 <code>&quot;cookie&quot;</code>.</td></tr><tr><td><a name="securitySchemeScheme"></a>scheme</td><td align="center"><code>string</code></td><td><code>http</code></td><td><strong>必选</strong>. 用于 <a href="https://tools.ietf.org/html/rfc7235#section-5.1" target="_blank" rel="noopener">Authorization header as defined in RFC7235</a> 的 HTTP Auahorization scheme 的名字.</td></tr><tr><td><a name="securitySchemeBearerFormat"></a>bearerFormat</td><td align="center"><code>string</code></td><td><code>http</code> (<code>&quot;bearer&quot;</code>)</td><td>用于提示客户端所使用的bearer token的格式。Bearer token 通常通过一个authorization server生成，所以这个字段最主要的目的是用来记录这个信息。</td></tr><tr><td><a name="securitySchemeFlows"></a>flows</td><td align="center"><a href="#oauthFlowsObject">OAuth Flows Object</a></td><td><code>oauth2</code></td><td><strong>必选</strong>. 一个包含所支持的 flow types 的配置信息的对象。</td></tr><tr><td><a name="securitySchemeOpenIdConnectUrl"></a>openIdConnectUrl</td><td align="center"><code>string</code></td><td><code>openIdConnect</code></td><td><strong>必选</strong>. 用于发现 OAuth2 配置值的OpenId Connect URL，必须是 URL 形式。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="Security-Scheme-对象示例"><a href="#Security-Scheme-对象示例" class="headerlink" title="Security Scheme 对象示例"></a>Security Scheme 对象示例</h5><h6 id="Basic-Authentication-Sample"><a href="#Basic-Authentication-Sample" class="headerlink" title="Basic Authentication Sample"></a>Basic Authentication Sample</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"http"</span>,</span><br><span class="line">  <span class="attr">"scheme"</span>: <span class="string">"basic"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">basic</span></span><br></pre></td></tr></table></figure><h6 id="API-Key-Sample"><a href="#API-Key-Sample" class="headerlink" title="API Key Sample"></a>API Key Sample</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"apiKey"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"api_key"</span>,</span><br><span class="line">  <span class="attr">"in"</span>: <span class="string">"header"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">apiKey</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">api_key</span></span><br><span class="line"><span class="attr">in:</span> <span class="string">header</span></span><br></pre></td></tr></table></figure><h6 id="JWT-Bearer-Sample"><a href="#JWT-Bearer-Sample" class="headerlink" title="JWT Bearer Sample"></a>JWT Bearer Sample</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"http"</span>,</span><br><span class="line">  <span class="attr">"scheme"</span>: <span class="string">"bearer"</span>,</span><br><span class="line">  <span class="attr">"bearerFormat"</span>: <span class="string">"JWT"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">bearer</span></span><br><span class="line"><span class="attr">bearerFormat:</span> <span class="string">JWT</span></span><br></pre></td></tr></table></figure><h6 id="Implicit-OAuth2-Sample"><a href="#Implicit-OAuth2-Sample" class="headerlink" title="Implicit OAuth2 Sample"></a>Implicit OAuth2 Sample</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"oauth2"</span>,</span><br><span class="line">  <span class="attr">"flows"</span>: &#123;</span><br><span class="line">    <span class="attr">"implicit"</span>: &#123;</span><br><span class="line">      <span class="attr">"authorizationUrl"</span>: <span class="string">"https://example.com/api/oauth/dialog"</span>,</span><br><span class="line">      <span class="attr">"scopes"</span>: &#123;</span><br><span class="line">        <span class="attr">"write:pets"</span>: <span class="string">"modify pets in your account"</span>,</span><br><span class="line">        <span class="attr">"read:pets"</span>: <span class="string">"read your pets"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">oauth2</span></span><br><span class="line"><span class="attr">flows:</span></span><br><span class="line"><span class="attr">  implicit:</span></span><br><span class="line"><span class="attr">    authorizationUrl:</span> <span class="attr">https://example.com/api/oauth/dialog</span></span><br><span class="line"><span class="attr">    scopes:</span></span><br><span class="line"><span class="attr">      write:</span><span class="attr">pets:</span> <span class="string">modify</span> <span class="string">pets</span> <span class="string">in</span> <span class="string">your</span> <span class="string">account</span></span><br><span class="line"><span class="attr">      read:</span><span class="attr">pets:</span> <span class="string">read</span> <span class="string">your</span> <span class="string">pets</span></span><br></pre></td></tr></table></figure><h4 id="OAuth-Flows-对象"><a href="#OAuth-Flows-对象" class="headerlink" title="OAuth Flows 对象"></a><a name="oauthFlowsObject"></a>OAuth Flows 对象</h4><p>允许配置支持的 OAuth Flows。</p><h5 id="固定字段-24"><a href="#固定字段-24" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="oauthFlowsImplicit"></a>implicit</td><td align="center"><a href="#oauthFlowObject">OAuth Flow Object</a></td><td>OAuth Implicit flow 的配置</td></tr><tr><td><a name="oauthFlowsPassword"></a>password</td><td align="center"><a href="#oauthFlowObject">OAuth Flow Object</a></td><td>OAuth Resource Owner Password flow 的配置</td></tr><tr><td><a name="oauthFlowsClientCredentials"></a>clientCredentials</td><td align="center"><a href="#oauthFlowObject">OAuth Flow Object</a></td><td>OAuth Client Credentials flow 的配置。在 OpenAPI 2.0 中曾被称作 <code>application</code>。</td></tr><tr><td><a name="oauthFlowsAuthorizationCode"></a>authorizationCode</td><td align="center"><a href="#oauthFlowObject">OAuth Flow Object</a></td><td>OAuth Authorization Code flow 的配置。在 OpenAPI 2.0 中曾被称作 <code>accessCode</code>。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h4 id="OAuth-Flow-对象"><a href="#OAuth-Flow-对象" class="headerlink" title="OAuth Flow 对象"></a><a name="oauthFlowObject"></a>OAuth Flow 对象</h4><p>支持的 OAuth Flow 的配置详情。</p><h5 id="固定字段-25"><a href="#固定字段-25" class="headerlink" title="固定字段"></a>固定字段</h5><table><thead><tr><th>字段名</th><th align="center">类型</th><th>Applies To</th><th>描述</th></tr></thead><tbody><tr><td><a name="oauthFlowAuthorizationUrl"></a>authorizationUrl</td><td align="center"><code>string</code></td><td><code>oauth2</code> (<code>&quot;implicit&quot;</code>, <code>&quot;authorizationCode&quot;</code>)</td><td><strong>必选</strong>。用于此流程的 authorization URL。必须是 URL 形式。</td></tr><tr><td><a name="oauthFlowTokenUrl"></a>tokenUrl</td><td align="center"><code>string</code></td><td><code>oauth2</code> (<code>&quot;password&quot;</code>, <code>&quot;clientCredentials&quot;</code>, <code>&quot;authorizationCode&quot;</code>)</td><td><strong>必选</strong>。用于此流程的 token URL。必须是 URL 形式。</td></tr><tr><td><a name="oauthFlowRefreshUrl"></a>refreshUrl</td><td align="center"><code>string</code></td><td><code>oauth2</code></td><td>用于获取 refresh tokens 的 URL，必须是 URL 形式。</td></tr><tr><td><a name="oauthFlowScopes"></a>scopes</td><td align="center">Map[<code>string</code>, <code>string</code>]</td><td><code>oauth2</code></td><td><strong>必选</strong>。可用于 OAuth2 security scheme 的 scope。scope 名称与其简短描述的映射。</td></tr></tbody></table><p>这个对象可能会被<a href="#specificationExtensions">规范扩展</a>扩展。</p><h5 id="OAuth-Flow-对象示例s"><a href="#OAuth-Flow-对象示例s" class="headerlink" title="OAuth Flow 对象示例s"></a>OAuth Flow 对象示例s</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"oauth2"</span>,</span><br><span class="line">  <span class="attr">"flows"</span>: &#123;</span><br><span class="line">    <span class="attr">"implicit"</span>: &#123;</span><br><span class="line">      <span class="attr">"authorizationUrl"</span>: <span class="string">"https://example.com/api/oauth/dialog"</span>,</span><br><span class="line">      <span class="attr">"scopes"</span>: &#123;</span><br><span class="line">        <span class="attr">"write:pets"</span>: <span class="string">"modify pets in your account"</span>,</span><br><span class="line">        <span class="attr">"read:pets"</span>: <span class="string">"read your pets"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"authorizationCode"</span>: &#123;</span><br><span class="line">      <span class="attr">"authorizationUrl"</span>: <span class="string">"https://example.com/api/oauth/dialog"</span>,</span><br><span class="line">      <span class="attr">"tokenUrl"</span>: <span class="string">"https://example.com/api/oauth/token"</span>,</span><br><span class="line">      <span class="attr">"scopes"</span>: &#123;</span><br><span class="line">        <span class="attr">"write:pets"</span>: <span class="string">"modify pets in your account"</span>,</span><br><span class="line">        <span class="attr">"read:pets"</span>: <span class="string">"read your pets"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">oauth2</span></span><br><span class="line"><span class="attr">flows:</span></span><br><span class="line"><span class="attr">  implicit:</span></span><br><span class="line"><span class="attr">    authorizationUrl:</span> <span class="attr">https://example.com/api/oauth/dialog</span></span><br><span class="line"><span class="attr">    scopes:</span></span><br><span class="line"><span class="attr">      write:</span><span class="attr">pets:</span> <span class="string">modify</span> <span class="string">pets</span> <span class="string">in</span> <span class="string">your</span> <span class="string">account</span></span><br><span class="line"><span class="attr">      read:</span><span class="attr">pets:</span> <span class="string">read</span> <span class="string">your</span> <span class="string">pets</span></span><br><span class="line"><span class="attr">  authorizationCode:</span></span><br><span class="line"><span class="attr">    authorizationUrl:</span> <span class="attr">https://example.com/api/oauth/dialog</span></span><br><span class="line"><span class="attr">    tokenUrl:</span> <span class="attr">https://example.com/api/oauth/token</span></span><br><span class="line"><span class="attr">    scopes:</span></span><br><span class="line"><span class="attr">      write:</span><span class="attr">pets:</span> <span class="string">modify</span> <span class="string">pets</span> <span class="string">in</span> <span class="string">your</span> <span class="string">account</span></span><br><span class="line"><span class="attr">      read:</span><span class="attr">pets:</span> <span class="string">read</span> <span class="string">your</span> <span class="string">pets</span></span><br></pre></td></tr></table></figure><h4 id="Security-Requirement-对象"><a href="#Security-Requirement-对象" class="headerlink" title="Security Requirement 对象"></a><a name="securityRequirementObject"></a>Security Requirement 对象</h4><p>列出执行此 operation 所需的 security schemes。每个属性的名字都必须与<br> <a href="#componentsObject">Components Object</a> 中 <a href="#componentsSecuritySchemes">Security Schemes</a> 声明的 security scheme 相符。</p><p>包含多个 schemes 的 Security Requirement 对象中的所有 scheme 都必须要满足授权请求。这便能够支持需要使用多个 query parameters 或 HTTP headers 来传递安全信息的情景。</p><p>当When a list of Security Requirement Objects is defined on the <a href="#oasObject">Open API 对象</a> 或 [Operation 对象] (#operationObject) 包含一组 Security Requirement 对象时，请求只需要满足其中一个即可。</p><h5 id="模式字段-3"><a href="#模式字段-3" class="headerlink" title="模式字段"></a>模式字段</h5><table><thead><tr><th>字段名模式</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="securityRequirementsName"></a>{name}</td><td align="center">[<code>string</code>]</td><td>每个名称都必须对应于 <a href="#componentsObject">Components 对象</a> 下的 <a href="#componentsSecuritySchemes">Security Schemes</a> 的一个 security scheme。如果此 security scheme 是 <code>&quot;oauth2&quot;</code> 或 <code>&quot;openIdConnect&quot;</code> 类型，那么其值是用于执行的一组 scope names。对于其他 security scheme 类型。此数组必须是空的。</td></tr></tbody></table><h5 id="Security-Requirement-对象示例"><a href="#Security-Requirement-对象示例" class="headerlink" title="Security Requirement 对象示例"></a>Security Requirement 对象示例</h5><h6 id="Non-OAuth2-Security-Requirement"><a href="#Non-OAuth2-Security-Requirement" class="headerlink" title="Non-OAuth2 Security Requirement"></a>Non-OAuth2 Security Requirement</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"api_key"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">api_key:</span> <span class="string">[]</span></span><br></pre></td></tr></table></figure><h6 id="OAuth2-Security-Requirement"><a href="#OAuth2-Security-Requirement" class="headerlink" title="OAuth2 Security Requirement"></a>OAuth2 Security Requirement</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"petstore_auth"</span>: [</span><br><span class="line">    <span class="string">"write:pets"</span>,</span><br><span class="line">    <span class="string">"read:pets"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">petstore_auth:</span></span><br><span class="line"><span class="attr">- write:</span><span class="string">pets</span></span><br><span class="line"><span class="attr">- read:</span><span class="string">pets</span></span><br></pre></td></tr></table></figure><h3 id="规范扩展"><a href="#规范扩展" class="headerlink" title="规范扩展"></a><a name="specificationExtensions"></a>规范扩展</h3><p>尽管 OpenAPI Specification 尝试包含大部分的使用场景，在需要时仍然可以通过附加数据来扩展此规范。</p><p>此扩展属性被设计为总是以 <code>&quot;x-&quot;</code> 为前缀的模式字段。</p><table><thead><tr><th>字段名模式</th><th align="center">类型</th><th>描述</th></tr></thead><tbody><tr><td><a name="infoExtensions"></a>^x-</td><td align="center">Any</td><td>允许扩展 OpenAPI Schema。此字段名必须以 <code>x-</code> 开头，比如 <code>x-internal-id</code>。此字段的值可以是 <code>null</code>、原始类型、数组或对象。可以包含任意有效的 JSON 格式的值。</td></tr></tbody></table><p>此扩展可能会也可能不会被当前的工具支持，但是可以请求工具开发者支持此扩展（如果工具是内部或开源的）。</p><h3 id="Security-Filtering"><a href="#Security-Filtering" class="headerlink" title="Security Filtering"></a><a name="securityFiltering"></a>Security Filtering</h3><p>Some objects in the OpenAPI Specification MAY be declared and remain empty, or be completely removed, even though they are inherently the core of the API documentation.</p><p>The reasoning is to allow an additional layer of access control over the documentation.<br>While not part of the specification itself, certain libraries MAY choose to allow access to parts of the documentation based on some form of authentication/authorization.</p><p>Two examples of this:</p><ol><li>The <a href="#pathsObject">Paths Object</a> MAY be empty. It may be counterintuitive, but this may tell the viewer that they got to the right place, but can’t access any documentation. They’d still have access to the <a href="#infoObject">Info Object</a> which may contain additional information regarding authentication.</li><li>The <a href="#pathItemObject">Path Item Object</a> MAY be empty. In this case, the viewer will be aware that the path exists, but will not be able to see any of its operations or parameters. This is different than hiding the path itself from the <a href="#pathsObject">Paths Object</a>, so the user will not be aware of its existence. This allows the documentation provider to finely control what the viewer can see.</li></ol><h2 id="Appendix-A-Revision-History"><a href="#Appendix-A-Revision-History" class="headerlink" title="Appendix A: Revision History"></a><a name="revisionHistory"></a>Appendix A: Revision History</h2><table><thead><tr><th>Version</th><th>Date</th><th>Notes</th></tr></thead><tbody><tr><td>3.0.0</td><td>2017-07-26</td><td>Release of the OpenAPI Specification 3.0.0</td></tr><tr><td>3.0.0-rc2</td><td>2017-06-16</td><td>rc2 of the 3.0 specification</td></tr><tr><td>3.0.0-rc1</td><td>2017-04-27</td><td>rc1 of the 3.0 specification</td></tr><tr><td>3.0.0-rc0</td><td>2017-02-28</td><td>Implementer’s Draft of the 3.0 specification</td></tr><tr><td>2.0</td><td>2015-12-31</td><td>Donation of Swagger 2.0 to the Open API Initiative</td></tr><tr><td>2.0</td><td>2014-09-08</td><td>Release of Swagger 2.0</td></tr><tr><td>1.2</td><td>2014-03-14</td><td>Initial release of the formal document.</td></tr><tr><td>1.1</td><td>2012-08-22</td><td>Release of Swagger 1.1</td></tr><tr><td>1.0</td><td>2011-08-10</td><td>First release of the Swagger Specification</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OpenAPI3.0的部分译文，来自于&lt;a href=&quot;https://github.com/fishead/OpenAPI-Specification&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github相关 项目&lt;/a&gt; ，存储避免丢失。&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="springboot" scheme="http://zws6672.top/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot实现热部署</title>
    <link href="http://zws6672.top/2021/06/11/springboot-hot/"/>
    <id>http://zws6672.top/2021/06/11/springboot-hot/</id>
    <published>2021-06-11T03:52:03.000Z</published>
    <updated>2021-06-11T03:53:48.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h1><p>实现方式：</p><ul><li>使用springloaded配置pom.xml文件，使用mvn spring-boot:run启动</li><li>使用springloaded本地加载启动，配置jvm参数 <code>-javaagent:&lt;jar包地址&gt; -noverify</code></li><li>devtools工具包（修改代码后自动重启，期间无法操作；配置简单）</li></ul><p>以上几种方式都需要经过配置，但是IDEA可以安装插件JRebel，可以用于提高代码编写效率。JRebel的作用如下：</p><ul><li>立即加载 95% 的典型代码更改，包括复杂的 Java EE 更新</li><li>通过消除应用程序或服务器重启，编写代码的速度提高 17%</li><li>将发布的可预测性提高 +8%</li><li>避免分心并专注于编写高质量的代码</li></ul><p>JRebel是收费的，需要激活：</p><ul><li>本地激活：<a href="http://github.com/ilanyu/ReverseProxy/releases/tag/v1.4" target="_blank" rel="noopener">下载自己机器系统相对应的工具</a></li><li>在线激活：<a href="https://www.guidgen.com/" target="_blank" rel="noopener">在线创建 GUID</a><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择Connect to online licensing service，填写以下数据</span><br><span class="line">https://jrebel.qekang.com/&#123;GUID&#125;</span><br><span class="line">你的邮箱</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>在线激活可能会失效，可以尝试本地激活。</p><p>run和debug一一对应jrebel run和jrebel debug。启动后项目就可以使用jrebel做热部署，除了涉及到修改mysql、redis地址以及重要的配置无法热部署需要重启外，大部分的业务逻辑修改都不需要重启服务器即可生效，联调接口时效率非常高。</p><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><p><a href="http://cache.baiducontent.com/c?m=uCt7n9U1340jAx2Q9Aa2yMVA_CNmxY2mIHPSr7klbofR5b-5z6ah2ej6O2iwVwxgyTjvUg0x90jhijv80gX6P33dq-QkehpaFnl_qaecjeqGVX01tFboIyu6dwQLOsxv&p=82759a42d48a33e00cb9c7710f5e&newp=c339ca5399934ea85ab2c7710f0792695d0fc20e3bddda01298ffe0cc4241a1a1a3aecbf2c271305d5c27c6101aa4e5eecf735763d0034f1f689df08d2ecce7e70&s=f2f88e17abe1608b&user=baidu&fm=sc&query=JRebel+%2Dsite%3Acsdn%2Enet&qid=8954b1110003d122&p1=4" target="_blank" rel="noopener">JRebel 激活</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;热部署&quot;&gt;&lt;a href=&quot;#热部署&quot; class=&quot;headerlink&quot; title=&quot;热部署&quot;&gt;&lt;/a&gt;热部署&lt;/h1&gt;&lt;p&gt;实现方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用springloaded配置pom.xml文件，使用mvn spring-boot:run</summary>
      
    
    
    
    
    <category term="springboot" scheme="http://zws6672.top/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>jdk8 源码 —— Object</title>
    <link href="http://zws6672.top/2021/06/07/jdk-source-Object/"/>
    <id>http://zws6672.top/2021/06/07/jdk-source-Object/</id>
    <published>2021-06-07T14:08:36.000Z</published>
    <updated>2021-06-07T14:09:07.770Z</updated>
    
    <content type="html"><![CDATA[<p>Object 类是类层次结构的根。 每个类都有一个Object作为超类。所有对象，包括数组，都实现了这个类的方法。</p><ol><li>getClass()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final native Class&lt;?&gt; getClass();</span><br></pre></td></tr></table></figure></li></ol><p>返回此Object的运行时类。 返回的Class对象是被表示类的<code>static synchronized</code>方法锁定的对象。实际类型是<code>Class&lt;? extends |X|&gt;</code>,|X| 是对调用getClass表达式静态类型的擦除（不需要强制转换）。</p><ol start="2"><li>hashCode()</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public native int hashCode();</span><br></pre></td></tr></table></figure><p>返回对象的哈希码值，支持此方法是为了方便哈希表的使用：</p><ul><li>如果根据equals(Object)方法两个对象相等，则对两个对象中的每一个调用hashCode方法必须产生相同的整数结果</li><li>在 Java 应用程序执行期间，只要在同一个对象上多次调用它， hashCode方法必须始终返回相同的整数，前提是在对象的equals比较中使用的信息没有被修改</li><li>类Object定义的 hashCode 方法确实为不同的对象返回不同的整数</li></ul><ol start="3"><li>equals(Object obj)</li></ol><p>该方法用于指示其他某个对象是否“等于”这个对象，equals方法在非空对象引用上实现等价关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">return (this == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关特点如下：</p><ul><li>自反的：对于任何非空引用值x ， x.equals(x)应该返回true </li><li>对称的：对于任何非空引用值x和y ， x.equals(y)应返回true当且仅当y.equals(x)返回true </li><li>可传递的：对于任何非空引用值x 、 y和z ，如果x.equals(y)返回true并且y.equals(z)返回true ，那么x.equals(z)应该返回true</li><li>一致的：对于任何非空引用值x和y ， x.equals(y)多次调用始终返回true或始终返回false ，前提是没有修改对象的equals比较中使用的信息</li><li>对于任何非空引用值x ， x.equals(null)应返回false</li></ul><p>请注意，每当重写此方法时，通常都需要重写hashCode方法，以维护hashCode方法的一般约定，即相等的对象必须具有相等的哈希码。</p><ol start="4"><li>clone() </li></ol><p>用于创建并返回此对象的副本。 “复制”的确切含义可能取决于对象的类别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected native Object clone() throws CloneNotSupportedException;</span><br></pre></td></tr></table></figure><p>通常的含义是，对于任何对象x，存在表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x.clone() != x</span><br><span class="line">x.clone().getClass() == x.getClass()</span><br><span class="line">x.clone().equals(x)</span><br></pre></td></tr></table></figure><p>按照惯例，此方法返回的对象应独立于此对象（正在克隆）。 为了实现这种独立性，可能需要在返回之前修改super.clone返回的对象的一个​​或多个字段。 通常，这意味着复制包含被克隆对象的内部“深层结构”的任何可变对象，并将对这些对象的引用替换为对副本的引用。 如果一个类只包含原始字段或对不可变对象的引用，那么通常情况下， super.clone返回的对象中没有字段需要修改。</p><p>类Object的方法clone执行特定的克隆操作。 首先，如果该对象的类没有实现接口Cloneable ，则抛出<code>CloneNotSupportedException</code> 。 请注意，所有数组都被认为实现了接口Cloneable并且数组类型T[]的clone方法的返回类型是T[] ，其中 T 是任何引用或原始类型。 否则，此方法会创建此对象的类的新实例，并使用此对象的相应字段的内容来初始化其所有字段，就像通过赋值一样； 字段的内容本身不会被克隆。 因此，此方法执行此对象的“浅拷贝”，而不是“深拷贝”操作。</p><p>类Object本身不实现接口Cloneable ，因此在类为Object的对象上调用clone方法将导致在运行时抛出异常。</p><ol start="5"><li>toString()<br>通常， toString方法返回一个“文本表示”此对象的字符串。 结果应该是一个简洁但信息丰富的表示，易于人们阅读。 建议所有子类都覆盖此方法。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public String toString() &#123;</span><br><span class="line">    return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>类Object的toString方法返回一个字符串，该字符串由对象是其实例的类的名称、a 符号“@ ”和对象哈希码的无符号十六进制表示组成。</p><ol start="6"><li>notify、notifyAll、wait</li></ol><p>相关方法定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public final native void notify();</span><br><span class="line">public final native void notifyAll();</span><br></pre></td></tr></table></figure><p>6.1 notify方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public final native void wait(long timeout) throws InterruptedException;</span><br><span class="line"></span><br><span class="line">public final void wait(long timeout, int nanos) throws InterruptedException &#123;</span><br><span class="line">if (timeout &lt; 0) &#123;</span><br><span class="line">throw new IllegalArgumentException(&quot;timeout value is negative&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (nanos &lt; 0 || nanos &gt; 999999) &#123;</span><br><span class="line">throw new IllegalArgumentException(</span><br><span class="line">&quot;nanosecond timeout value out of range&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (nanos &gt; 0) &#123;</span><br><span class="line">timeout++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wait(timeout);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public final void wait() throws InterruptedException &#123;</span><br><span class="line">wait(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nanos以纳秒为单位测量的实时量由下式给出：</span><br><span class="line">1000000*timeout+nanos</span><br></pre></td></tr></table></figure><p>notify方法用于唤醒在此对象的监视器上等待的单个线程。如果有任何线程正在等待该对象，则选择其中一个线程被唤醒；选择是任意的并且由实现决定；线程通过调用wait方法之一在对象的监视器上进行等待。被唤醒的线程将无法继续运行，直到当前线程放弃对该对象的锁定。 而被唤醒的线程将以通常的方式与可能正在积极竞争以同步此对象的任何其他线程进行竞争； 例如，被唤醒的线程在成为下一个锁定该对象的线程时没有可靠的特权或劣势。</p><p>notify方法只能由作为此对象监视器的所有者的线程调用，线程通过以下三种方式之一成为对象监视器的所有者：</p><ul><li>通过执行该对象的同步实例方法。</li><li>通过执行同步对象的synchronized块。</li><li>对于Class，通过执行该类的同步静态方法。</li></ul><p>而notifyAll方法用于唤醒在此对象监视器上等待的所有线程，线程通过调用wait方法之一在对象的监视器上转换为等待状态。</p><p>wait方法会导致当前线程等待，直到另一个线程为此对象调用notify()方法或notifyAll()方法，或者指定的时间已经过去。（当前线程必须拥有此对象的监视器）</p><p>6.2 wait方法</p><p>此方法使当前线程（称为T ）将自己置于此对象的等待集中，然后放弃对此对象的任何和所有同步声明。 线程T出于线程调度目的而被禁用并处于休眠状态，直到发生以下四种情况之一：</p><ul><li>其他线程中的一个为此对象调用了notify方法，而线程T恰好被任意选择为要唤醒的线程。</li><li>其他一些线程为此对象调用notifyAll方法。</li><li>其他一些线程中断（interrupt）线程T 。</li><li>过了指定的实时时间。 但是，如果timeout为零，则不考虑实时时间，线程只是等待直到收到通知。</li></ul><p>当线程T从该对象的等待集中移除，并重新启用线程调度；然后与其他线程竞争在对象上同步的权利； 一旦它获得了对象的控制权，它对对象的所有同步声明都将恢复到之前的状态 —— 也就是说，恢复到调用wait方法时的情况，然后线程T从wait方法的调用中返回。 因此，从wait方法返回时，对象和线程T的同步状态与调用wait方法时完全相同</p><p>线程也可以在没有被通知、中断或超时的情况下唤醒，即所谓的虚假唤醒。 虽然这在实践中很少发生，但应用程序必须通过测试应该导致线程被唤醒的条件来防止它，如果条件不满足则继续等待。 换句话说，等待应该总是在循环中发生。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">synchronized (obj) &#123;</span><br><span class="line">   while (&lt;condition does not hold&gt;)</span><br><span class="line">   obj.wait(timeout);</span><br><span class="line">   ... // Perform action appropriate to condition</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>此方法只能由作为此对象监视器的所有者的线程调用。如果错误，会抛出以下异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IllegalArgumentException – 如果超时值为负。</span><br><span class="line">IllegalMonitorStateException – 如果当前线程不是对象监视器的所有者。</span><br><span class="line">InterruptedException – 如果任何线程在当前线程等待通知之前或期间中断了当前线程。 抛出此异常时清除当前线程的中断状态。</span><br></pre></td></tr></table></figure><ol start="7"><li>finalize<br>当垃圾收集器确定不再有对对象的引用时，由垃圾收集器在对象上调用。 子类覆盖finalize方法以处理系统资源或执行其他清理。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protected void finalize() throws Throwable &#123; &#125;</span><br><span class="line">ref.WeakReference , ref.PhantomReference</span><br></pre></td></tr></table></figure></li></ol><p>finalize的一般约定是，当 Java™ 虚拟机确定不再有任何方法可以让任何尚未死的线程访问此对象时调用它，除非作为操作的结果由其他一些准备完成的对象或类的完成所采取。 finalize方法可以执行任何操作，包括使该对象再次可供其他线程使用； 然而， finalize的通常目的是在对象被不可撤销地丢弃之前执行清理操作。 例如，表示输入/输出连接的对象的 finalize 方法可能会执行显式 I/O 事务以在对象被永久丢弃之前中断连接。</p><p>Java 编程语言不保证哪个线程将调用任何给定对象的finalize方法。 但是，可以保证调用 finalize 的线程在调用 finalize 时不会持有任何用户可见的同步锁。 如果 finalize 方法抛出未捕获的异常，则忽略该异常并终止该对象的终结。</p><p>在为一个对象调用了finalize方法之后，在 Java 虚拟机再次确定没有任何方法可以让任何尚未死亡的线程访问该对象之前，不会采取进一步的操作，包括可能的操作由其他准备完成的对象或类，此时该对象可能会被丢弃。</p><p>对于任何给定对象，Java 虚拟机永远不会多次调用finalize方法。finalize方法抛出的任何异常都会导致此对象的终止被暂停，但否则会被忽略。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Object 类是类层次结构的根。 每个类都有一个Object作为超类。所有对象，包括数组，都实现了这个类的方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;getClass()&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    
    <category term="jdk-source" scheme="http://zws6672.top/tags/jdk-source/"/>
    
  </entry>
  
  <entry>
    <title>SHA-256</title>
    <link href="http://zws6672.top/2021/06/03/SHA-256/"/>
    <id>http://zws6672.top/2021/06/03/SHA-256/</id>
    <published>2021-06-03T14:20:29.000Z</published>
    <updated>2021-06-04T02:21:24.987Z</updated>
    
    <content type="html"><![CDATA[<p>SHA256是一种哈希函数，也是SHA-2下细分出的一种算法。</p><h1 id="一、SHA族算法"><a href="#一、SHA族算法" class="headerlink" title="一、SHA族算法"></a>一、SHA族算法</h1><p>安全散列算法（英语：Secure Hash Algorithm，缩写为SHA）是一个密码散列函数家族，是FIPS所认证的安全散列算法。能计算出一个数字消息所对应到的，长度固定的字符串（又称消息摘要）的算法。且若输入的消息不同，它们对应到不同字符串的几率很高。</p><p>SHA家族的算法，由美国国家安全局（NSA）所设计，并由美国国家标准与技术研究院（NIST）发布，是美国的政府标准，其分别是：</p><ul><li>SHA-0：1993年发布，当时称做安全散列标准（Secure Hash Standard），发布之后很快就被NSA撤回，是SHA-1的前身。</li><li>SHA-1：1995年发布，SHA-1在许多安全协议中广为使用，包括TLS、GnuPG、SSH、S/MIME和IPsec，是MD5的后继者。但SHA-1的安全性在2010年以后已经不被大多数的加密场景所接受。2017年荷兰密码学研究小组CWI和Google正式宣布攻破了SHA-1[1]。</li><li>SHA-2：2001年发布，包括SHA-224、SHA-256、SHA-384、SHA-512、SHA-512/224、SHA-512/256。SHA-2目前没有出现明显的弱点。虽然至今尚未出现对SHA-2有效的攻击，但它的算法跟SHA-1基本上仍然相似。</li><li>SHA-3：2015年正式发布，由于对MD5出现成功的破解，以及对SHA-0和SHA-1出现理论上破解的方法，NIST感觉需要一个与之前算法不同的，可替换的加密散列算法，也就是现在的SHA-3</li></ul><p>在SHA-2下，又可再分为六个不同的算法标准，包括了：</p><ul><li>SHA-224</li><li>SHA-256：对于任意长度的消息，SHA256都会产生一个256bit长的哈希值，称作消息摘要。</li><li>SHA-384</li><li>SHA-512</li><li>SHA-512/224</li><li>SHA-512/256</li></ul><p>这些变体除了生成摘要的长度 、循环运行的次数等一些微小差异外，算法的基本结构是一致的。</p><blockquote><p>哈希函数，又称散列算法，是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值（或哈希值）的指纹。散列值通常用一个短的随机字母和数字组成的字符串来代表。</p></blockquote><h1 id="二、SHA-256"><a href="#二、SHA-256" class="headerlink" title="二、SHA-256"></a>二、SHA-256</h1><p>对于任意长度的消息，SHA256都会产生一个256位的哈希值，称作消息摘要。这个摘要相当于是个长度为32个字节的数组、64位的十六进制字符串（一个十六进制四位）、256位哈希值。</p><ol start="0"><li>涉及数据</li></ol><p>SHA256算法中用到了8个哈希初值以及64个哈希常量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-- 哈希初值：质数（2,3,5,7,11,13,17,19）平方根的小数部分取前32bit</span><br><span class="line">h0 := 0x6a09e667</span><br><span class="line">h1 := 0xbb67ae85</span><br><span class="line">h2 := 0x3c6ef372</span><br><span class="line">h3 := 0xa54ff53a</span><br><span class="line">h4 := 0x510e527f</span><br><span class="line">h5 := 0x9b05688c</span><br><span class="line">h6 := 0x1f83d9ab</span><br><span class="line">h7 := 0x5be0cd19</span><br><span class="line"></span><br><span class="line">-- 64个常量：对自然数中前64个质数的立方根的小数部分取前32bit而来</span><br><span class="line">428a2f98 71374491 b5c0fbcf e9b5dba5</span><br><span class="line">3956c25b 59f111f1 923f82a4 ab1c5ed5</span><br><span class="line">d807aa98 12835b01 243185be 550c7dc3</span><br><span class="line">72be5d74 80deb1fe 9bdc06a7 c19bf174</span><br><span class="line">e49b69c1 efbe4786 0fc19dc6 240ca1cc</span><br><span class="line">2de92c6f 4a7484aa 5cb0a9dc 76f988da</span><br><span class="line">983e5152 a831c66d b00327c8 bf597fc7</span><br><span class="line">c6e00bf3 d5a79147 06ca6351 14292967</span><br><span class="line">27b70a85 2e1b2138 4d2c6dfc 53380d13</span><br><span class="line">650a7354 766a0abb 81c2c92e 92722c85</span><br><span class="line">a2bfe8a1 a81a664b c24b8b70 c76c51a3</span><br><span class="line">d192e819 d6990624 f40e3585 106aa070</span><br><span class="line">19a4c116 1e376c08 2748774c 34b0bcb5</span><br><span class="line">391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3</span><br><span class="line">748f82ee 78a5636f 84c87814 8cc70208</span><br><span class="line">90befffa a4506ceb bef9a3f7 c67178f2</span><br></pre></td></tr></table></figure><ol><li>前置计算<br>哈希计算的前置步骤：</li></ol><ul><li>填充：对消息进行补位处理，而最终的长度是512位的倍数（末尾补1，然后填充0到512位(长度为I)）；再添加一个64位比特串，该比特串是长度I的二进制表示</li><li>消息分块：以512位为单位对消息进行分块为 M<sup>(1)</sup>、M<sup>(2)</sup>…M<sup>(N)</sup>。</li></ul><ol start="2"><li>消息拓展（构造64字）</li></ol><p>对于每一块，将块分解为16个32-bit的big-endian的字，记为w[0], …, w[15]；剩下的48字由以下公式获取：</p><ul><li>W<sub>t</sub>=σ<sub>1</sub>(W<sub>t−2</sub>)+W<sub>t−7</sub>+σ<sub>0</sub>(W<sub>t−15</sub>)+W<sub>t−16</sub><br>​<br>这些字在本文中称为消息字。（字为4字节、32位、256位）</li></ul><ol start="3"><li>压缩函数</li></ol><ul><li>遍历消息块，在每个消息块中中还存在字循环：<ul><li>初始八个字（哈希初值）与消息字以及常量进行如下图的位计算</li><li>计算后与前哈希值相加（如果结果大于2^32，那么取2^32的余数）</li></ul></li><li>返回哈希值</li></ul><p><img src="/image/leetcode/sha256-1.png" alt="位运算"></p><ol start="4"><li>Java中实现SHA-256</li></ol><p>Java提供了MessageDigest 类为应用程序提供消息摘要算法的功能，例如 SHA-1 或 SHA-256。消息摘要是一种安全的单向散列函数，它采用任意大小的数据并输出一个固定长度的散列值。MessageDigest 对象开始时已初始化。使用update 方法通过它处理数据。在任何时候reset都可以调用来重置摘要。一旦所有要更新的数据都更新完毕，就digest应该调用其中一种方法来完成哈希计算。digest对于给定数量的更新，可以调用该方法一次。在digest被调用之后，MessageDigest 对象被重置为其初始化状态。</p><p>相关方法如下：</p><table><thead><tr><th align="left">修饰符和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Object</td><td align="left">clone()</td><td align="left">如果实现是可克隆的，则返回一个克隆。</td></tr><tr><td align="left">byte[]</td><td align="left">digest()</td><td align="left">通过执行填充等最终操作来完成哈希计算。</td></tr><tr><td align="left">byte[]</td><td align="left">digest?(byte[] input)</td><td align="left">使用指定的字节数组对摘要执行最终更新，然后完成摘要计算。</td></tr><tr><td align="left">int</td><td align="left">digest?(byte[] buf, int offset, int len)</td><td align="left">通过执行填充等最终操作来完成哈希计算。</td></tr><tr><td align="left">String</td><td align="left">getAlgorithm()</td><td align="left">返回一个标识算法的字符串，与实现细节无关。</td></tr><tr><td align="left">int</td><td align="left">getDigestLength()</td><td align="left">以字节为单位返回摘要的长度，如果提供者不支持此操作并且实现不可克隆，则返回 0。</td></tr><tr><td align="left">static MessageDigest</td><td align="left">getInstance?(String algorithm)</td><td align="left">返回实现指定摘要算法的 MessageDigest 对象。</td></tr><tr><td align="left">static MessageDigest</td><td align="left">getInstance?(String algorithm, String provider)</td><td align="left">返回实现指定摘要算法的 MessageDigest 对象。</td></tr><tr><td align="left">static MessageDigest</td><td align="left">getInstance?(String algorithm, Provider provider)</td><td align="left">返回实现指定摘要算法的 MessageDigest 对象。</td></tr><tr><td align="left">Provider</td><td align="left">getProvider()</td><td align="left">返回此消息摘要对象的提供者。</td></tr><tr><td align="left">static boolean</td><td align="left">isEqual?(byte[] digesta, byte[] digestb)</td><td align="left">比较两个摘要是否相等。</td></tr><tr><td align="left">void</td><td align="left">reset()</td><td align="left">重置摘要以供进一步使用。</td></tr><tr><td align="left">String</td><td align="left">toString()</td><td align="left">返回此消息摘要对象的字符串表示形式。</td></tr><tr><td align="left">void</td><td align="left">update?(byte input)</td><td align="left">使用指定的字节更新摘要。</td></tr><tr><td align="left">void</td><td align="left">update?(byte[] input)</td><td align="left">使用指定的字节数组更新摘要。</td></tr><tr><td align="left">void</td><td align="left">update?(byte[] input, int offset, int len)</td><td align="left">使用指定的字节数组更新摘要，从指定的偏移量开始。</td></tr><tr><td align="left">void</td><td align="left">update?(ByteBuffer input)</td><td align="left">使用指定的 ByteBuffer 更新摘要。</td></tr></tbody></table><p>定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class MessageDigest </span><br><span class="line">java.lang.Object </span><br><span class="line">java.security.MessageDigestSpi</span><br><span class="line">java.security.MessageDigest</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            MessageDigest messageDigest = MessageDigest.getInstance(&quot;SHA-256&quot;);</span><br><span class="line">            String message = &quot;需要加密的信息&quot;;</span><br><span class="line">            messageDigest.update(message.getBytes());</span><br><span class="line">            byte[] res = messageDigest.digest();</span><br><span class="line">            System.out.println(String.valueOf(res));</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、参考资料"><a href="#三、参考资料" class="headerlink" title="三、参考资料"></a>三、参考资料</h1><blockquote><p><a href="https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/security/MessageDigest.html" target="_blank" rel="noopener">MessageDigest</a><br><a href="https://zh.wikipedia.org/zh-cn/SHA%E5%AE%B6%E6%97%8F" target="_blank" rel="noopener">相关资料</a><br><a href="https://blog.csdn.net/qq_31811537/article/details/81740434" target="_blank" rel="noopener">SHA256算法原理详解</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SHA256是一种哈希函数，也是SHA-2下细分出的一种算法。&lt;/p&gt;
&lt;h1 id=&quot;一、SHA族算法&quot;&gt;&lt;a href=&quot;#一、SHA族算法&quot; class=&quot;headerlink&quot; title=&quot;一、SHA族算法&quot;&gt;&lt;/a&gt;一、SHA族算法&lt;/h1&gt;&lt;p&gt;安全散列算法（</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>线程安全与锁优化</title>
    <link href="http://zws6672.top/2021/06/03/jdk-thread-lock/"/>
    <id>http://zws6672.top/2021/06/03/jdk-thread-lock/</id>
    <published>2021-06-03T01:46:41.000Z</published>
    <updated>2021-06-03T01:51:13.021Z</updated>
    
    <content type="html"><![CDATA[<p>并发处理的广泛应用是Amdahl定律代替摩尔定律成为计算机性能发展源动力的根本原因，也是人类压榨计算机运算能力的最有力武器。</p><p>在软件业发展的初期，程序编写都是以算法为核心的，程序员会把数据和过程分别作为独立的部分来考虑，数据代表问题空间中的客体，程序代码则用于处理这些数据，这种思维方式直接站在计算机的角度去抽象问题和解决问题，被称为面向过程的编程思想。与此相对，面向对象的编程思想则站在现实世界的角度去抽象和解决问题，它把数据和行为都看作对象的一部分，这样可以让程序员能以符合现实世界的思维方式来编写和组织程序。</p><h1 id="一、Java语言中的线程安全"><a href="#一、Java语言中的线程安全" class="headerlink" title="一、Java语言中的线程安全"></a>一、Java语言中的线程安全</h1><p>当多个线程同时访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那就称这个对象是线程安全的。</p><p>这就要求线程安全的代码都必须具备一个共同特征：代码本身封装了所有必要的正确性保障手段（如互斥同步等），令调用者无须关心多线程下的调用问题，更无须自己实现任何措施来保证多线程环境下的正确调用。可以将Java语言中各种操作共享的数据分为以下五类：</p><ol><li>不可变</li></ol><p>不可变（Immutable）的对象一定是线程安全的，无论是对象的方法实现还是方法的调用者，都不需要再对任何线程增加安全保障措施。</p><p>Java语言中，如果多线程共享的数据是一个基本数据类型，那么只要在定义时使用final关键字修饰它就可以保证它是不可变的。如果共享数据是一个对象，由于Java语言目前暂时还没有提供值类型的支持，那就需要对象自行保证其行为不会对其状态产生任何影响才行。</p><p>保证对象行为不影响自己状态的途径有很多种，最简单的一种就是把对象里面带有状态的变量都声明为final，这样在构造函数结束之后，它就是不可变的。</p><ol start="2"><li>绝对线程安全</li></ol><p>在Java API中标注自己是线程安全的类，大多数都不是绝对的线程安全。例如号称线程安全的容器类Vector，相关例子如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">private static Vector&lt;Integer&gt; vector = new Vector&lt;Integer&gt;();</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">while (true) &#123;</span><br><span class="line">for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">vector.add(i);</span><br><span class="line">&#125;</span><br><span class="line">Thread removeThread = new Thread(new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">for (int i = 0; i &lt; vector.size(); i++) &#123;</span><br><span class="line">vector.remove(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Thread printThread = new Thread(new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">for (int i = 0; i &lt; vector.size(); i++) &#123;</span><br><span class="line">System.out.println((vector.get(i)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">removeThread.start();</span><br><span class="line">printThread.start();</span><br><span class="line">//不要同时产生过多的线程，否则会导致操作系统假死</span><br><span class="line">while (Thread.activeCount() &gt; 20);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个线程删除，另外一个线程获取，这时候会导致错误，抛出异常<code>ArrayIndexOutOfBoundsException</code>，假如Vector一定要做到绝对的线程安全，那就必须在它内部维护一组一致性的快照访问才行，每次对其中元素进行改动都要产生新的快照，这样要付出的时间和空间成本都是非常大的。</p><ol start="3"><li>相对线程安全</li></ol><p>相对线程安全就是我们通常意义上所讲的线程安全，它需要保证对这个对象单次的操作是线程安全的，我们在调用的时候不需要进行额外的保障措施，但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。</p><ol start="4"><li>线程兼容</li></ol><p>线程兼容是指对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用。Java类库API中大部分的类都是线程兼容的，如与前面的Vector和HashTable相对应的集合类ArrayList和HashMap等</p><ol start="5"><li>线程对立</li></ol><p>线程对立是指不管调用端是否采取了同步措施，都无法在多线程环境中并发使用代码。由于Java语言天生就支持多线程的特性，线程对立这种排斥多线程的代码是很少出现的，而且通常都是有害的，应当尽量避免。</p><p>线程安全的实现方法如下：</p><ol><li>互斥同步</li></ol><p>互斥同步（Mutual Exclusion &amp; Synchronization）是一种最常见也是最主要的并发正确性保障手段。同步是指在多个线程并发访问共享数据时，保证共享数据在同一个时刻只被一条（或者是一些，当使用信号量的时候）线程使用。而互斥是实现同步的一种手段，临界区（Critical Section）、互斥量（Mutex）和信号量（Semaphore）都是常见的互斥实现方式。因此在“互斥同步”这四个字里面，互斥是因，同步是果；互斥是方法，同步是目的。</p><p>实现方法如下：</p><p>1.1 synchronized关键字</p><p>synchronized关键字，这是一种块结构（Block Structured）的同步语法。。synchronized关键字经过Javac编译之后，会在同步块的前后分别形成monitorenter和monitorexit这两个字节码指令。这两个字节码指令都需要一个reference类型的参数来指明要锁定和解锁的对象。如果Java源码中的synchronized明确指定了对象参数，那就以这个对象的引用作为reference；如果没有明确指定，那将根据synchronized修饰的方法类型（如实例方法或类方法），来决定是取代码所在的对象实例还是取类型对应的Class对象来作为线程要持有的锁。</p><p>根据《Java虚拟机规范》的要求，在执行monitorenter指令时，首先要去尝试获取对象的锁。如果这个对象没被锁定，或者当前线程已经持有了那个对象的锁，就把锁的计数器的值增加一，而在执行monitorexit指令时会将锁计数器的值减一。一旦计数器的值为零，锁随即就被释放了。如果获取对象锁失败，那当前线程就应当被阻塞等待，直到请求锁定的对象被持有它的线程释放为止。</p><p>被synchronized修饰的同步块对同一条线程来说是可重入的。这意味着同一线程反复进入同步块也不会出现自己把自己锁死的情况。</p><p>被synchronized修饰的同步块在持有锁的线程执行完毕并释放锁之前，会无条件地阻塞后面其他线程的进入。这意味着无法像处理某些数据库中的锁那样，强制已获取锁的线程释放锁；也无法强制正在等待锁的线程中断等待或超时退出。从执行成本的角度看，持有锁是一个重量级（Heavy-Weight）的操作。</p><p>1.2 concurrent包</p><p>Java类库中新提供了java.util.concurrent包（下文称J.U.C包），其中的java.util.concurrent.locks.Lock接口便成了Java的另一种全新的互斥同步手段。基于Lock接口，用户能够以非块结构（Non-Block Structured）来实现互斥同步，从而摆脱了语言特性的束缚，改为在类库层面去实现同步，</p><p>重入锁（ReentrantLock）是Lock接口最常见的一种实现[2]，顾名思义，它与synchronized一样是可重入的；与synchronized相比增加了以下几种功能：</p><ul><li>等待可中断：是指当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。可中断特性对处理执行时间非常长的同步块很有帮助。</li><li>公平锁：是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁；而非公平锁则不保证这一点，在锁被释放时，任何一个等待锁的线程都有机会获得锁。synchronized中的锁是非公平的，ReentrantLock在默认情况下也是非公平的，但可以通过带布尔值的构造函数要求使用公平锁。不过一旦使用了公平锁，将会导致ReentrantLock的性能急剧下降，会明显影响吞吐量。</li><li>锁绑定多个条件：是指一个ReentrantLock对象可以同时绑定多个Condition对象。在synchronized中，锁对象的wait()跟它的notify()或者notifyAll()方法配合可以实现一个隐含的条件，如果要和多于一个的条件关联的时候，就不得不额外添加一个锁；而ReentrantLock则无须这样做，多次调用newCondition()方法即可。</li></ul><p>synchronized是在Java语法层面的同步，足够清晰，也足够简单。每个Java程序员都熟悉synchronized，但J.U.C中的Lock接口则并非如此。因此在只需要基础的同步功能时，更推荐synchronized。Lock应该确保在finally块中释放锁，否则一旦受同步保护的代码块中抛出异常，则有可能永远不会释放持有的锁。</p><ol start="2"><li>非阻塞同步</li></ol><p>互斥同步面临的主要问题是进行线程阻塞和唤醒所带来的性能开销，因此这种同步也被称为阻塞同步（Blocking Synchronization）。从解决问题的方式上看，互斥同步属于一种悲观的并发策略，其总是认为只要不去做正确的同步措施（例如加锁），那就肯定会出现问题。无论共享的数据是否真的会出现竞争，它都会进行加锁，这将会导致用户态到核心态转换、维护锁计数器和检查是否有被阻塞的线程需要被唤醒等开销。</p><p>2.1 基于冲突检测的乐观并发策略</p><p>不管风险，先进行操作，如果没有其他线程争用共享数据，那操作就直接成功了；如果共享的数据的确被争用，产生了冲突，那再进行其他的补偿措施，最常用的补偿措施是不断地重试，直到出现没有竞争的共享数据为止。这种乐观并发策略的实现不再需要把线程阻塞挂起，因此这种同步操作被称为非阻塞同步（Non-Blocking Synchronization），使用这种措施的代码也常被称为无锁（Lock-Free）编程。</p><p>2.2 CAS</p><p>通过硬件，可以保证某些从语义上看起来需要多次操作的行为可以只通过一条处理器指令就能完成。</p><p>常用指令如下</p><ul><li>测试并设置（Test-and-Set）；</li><li>获取并增加（Fetch-and-Increment）；</li><li>交换（Swap）；</li><li>比较并交换（Compare-and-Swap，下文称CAS）；</li><li>加载链接/条件储存（Load-Linked/Store-Conditional，下文称LL/SC）</li></ul><p>以CAS为例：CAS指令需要有三个操作数，分别是内存位置（在Java中可以简单地理解为变量的内存地址，用V表示）、旧的预期值（用A表示）和准备设置的新值（用B表示）。CAS指令执行时，当且仅当V符合A时，处理器才会用B更新V的值，否则它就不执行更新。但是，不管是否更新了V的值，都会返回V的旧值，上述的处理过程是一个原子操作，执行期间不会被其他线程中断。在JDK 5之后，Java类库中才开始使用CAS操作，该操作由sun.misc.Unsafe类里面的ompareAndSwapInt()和compareAndSwapLong()等几个方法包装提供。</p><p>不过由于Unsafe类在设计上就不是提供给用户程序调用的类（Unsafe::getUnsafe()的代码中限制了只有启动类加载器（Bootstrap ClassLoader）加载的Class才能访问它），因此在JDK 9之前只有Java类库可以使用CAS，譬如J.U.C包里面的整数原子类，其中的compareAndSet()和getAndIncrement()等方法都使用了Unsafe类的CAS操作来实现。</p><p>而如果用户程序也有使用CAS操作的需求，那要么就采用反射手段突破Unsafe的访问限制，要么就只能通过Java类库API来间接使用它。</p><h1 id="二、锁优化"><a href="#二、锁优化" class="headerlink" title="二、锁优化"></a>二、锁优化</h1><p>高效并发是从JDK 5升级到JDK 6后一项重要的改进项，HotSpot虚拟机开发团队在这个版本上花费了大量的资源去实现各种锁优化技术，如适应性自旋（Adaptive Spinning）、锁消除（Lock Elimination）、锁膨胀（Lock Coarsening）、轻量级锁（Lightweight Locking）、偏向锁（Biased Locking）等，这些技术都是为了在线程之间更高效地共享数据及解决竞争问题，从而提高程序的执行效率。</p><ol><li>自旋锁（线程循环请求资源）<br>互斥同步对性能最大的影响是阻塞的实现，许多应用上共享数据的锁定状态只会持续很短的一段时间，为了小段时间来挂起和恢复线程是很不划算的。如果物理机器有一个以上的处理器或者处理器核心，能让两个或以上的线程同时并行执行，我们就可以让后面请求锁的那个线程“稍等一会”，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只须让线程执行一个忙循环（自旋），这项技术就是所谓的自旋锁。</li></ol><p>自旋锁是采用让当前线程不停地的在循环体内执行实现的，循环检测自旋锁的持有者是否已释放锁，当循环的条件被其他线程改变时才能进入临界区。如果线程太多，那么性能也会下降，因为线程自旋会占用大量CPU资源。自旋锁在JDK 1.4.2中就已经引入，只不过默认是关闭的，可以使用<code>-XX：+UseSpinning</code>参数来开启，在JDK 6中就已经改为默认开启了。</p><p>自旋等待的时间必须有一定的限度，如果自旋超过了限定的次数仍然没有成功获得锁，就应当使用传统的方式去挂起线程。自旋次数的默认值是十次，用户也可以使用参数<code>-XX：PreBlockSpin</code>来自行更改。</p><ol start="2"><li>自适应的自旋（自旋的时间不再固定）</li></ol><p>在JDK 6中对自旋锁的优化，引入了自适应的自旋。自适应意味着自旋的时间不再是固定的了，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定的。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能再次成功，进而允许自旋等待持续相对更长的时间，比如持续100次忙循环。另一方面，如果对于某个锁，自旋很少成功获得过锁，那在以后要获取这个锁时将有可能直接省略掉自旋过程，以避免浪费处理器资源。</p><ol start="3"><li>锁消除（编译期间消除不可能存在共享数据竞争的锁）</li></ol><p>锁消除是指虚拟机即时编译器在运行时，对一些代码要求同步，但是对被检测到不可能存在共享数据竞争的锁进行消除。锁消除的主要判定依据来源于逃逸分析的数据支持。如果判断到一段代码中，在堆上的所有数据都不会逃逸出去被其他线程访问到，那就可以把它们当作栈上数据对待，认为它们是线程私有的，同步加锁自然就无须再进行。</p><p>锁消除实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public String concatString(String s1, String s2, String s3) &#123;</span><br><span class="line">return s1 + s2 + s3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---&gt; 虚拟机优化</span><br><span class="line"></span><br><span class="line">public String concatString(String s1, String s2, String s3) &#123;</span><br><span class="line">StringBuffer sb = new StringBuffer();</span><br><span class="line">sb.append(s1);</span><br><span class="line">sb.append(s2);</span><br><span class="line">sb.append(s3);</span><br><span class="line">return sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个StringBuffer.append()方法中都有一个同步块，锁就是sb对象。虚拟机观察变量sb，经过逃逸分析后会发现它的动态作用域被限制在concatString()方法内部。也就是sb的所有引用都永远不会逃逸到concatString()方法之外，其他线程无法访问到它，所以这里虽然有锁，但是可以被安全地消除掉。在解释执行时这里仍然会加锁，但在经过服务端编译器的即时编译之后，这段代码就会忽略所有的同步措施而直接执行。</p><ol start="4"><li>锁粗化</li></ol><p>原则上，我们在编写代码的时候，总是推荐将同步块的作用范围限制得尽量小——只在共享数据的实际作用域中才进行同步，这样是为了使得需要同步的操作数量尽可能变少，即使存在锁竞争，等待锁的线程也能尽可能快地拿到锁。大多数情况下，上面的原则都是正确的，但是如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作是出现在循环体之中的，那即使没有线程竞争，频繁地进行互斥同步操作也会导致不必要的性能损耗。</p><ol start="5"><li>轻量级锁（假定同一时间只有一个线程申请锁）</li></ol><p>轻量级锁是JDK 6时加入的新型锁机制，它名字中的“轻量级”是相对于使用操作系统互斥量来实现的传统锁而言的，因此传统的锁机制就被称为“重量级”锁。不过，需要强调一点，轻量级锁并不是用来代替重量级锁的，它设计的初衷是在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。</p><p>HotSpot虚拟机的对象头（Object Header）分为两部分：</p><ul><li>第一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄（Generational GC Age）等。这部分数据的长度在32位和64位的Java虚拟机中分别会占用32个或64个比特，官方称它为“MarkWord”，这部分是实现轻量级锁和偏向锁的关键。</li><li>另外一部分用于存储指向方法区对象类型数据的指针，如果是数组对象，还会有一个额外的部分用于存储数组长度。</li></ul><p><img src="/image/jdk/markwork.png" alt="对象头Mark Word"></p><p>在代码即将进入同步块的时候，如果此同步对象没有被锁定（锁标志位为“01”状态），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝（官方为这份拷贝加了一个Displaced前缀，即Displaced Mark Word）</p><p><img src="/image/jdk/DisplacedMarkWord.png" alt="Displaced Mark Word"></p><p>然后，虚拟机将使用CAS操作尝试把对象的Mark Word更新为指向Lock Record的指针。如果这个更新动作成功了，即代表该线程拥有了这个对象的锁，并且对象Mark Word的锁标志位（Mark Word的最后两个比特）将转变为“00”，表示此对象处于轻量级锁定状态。</p><p>如果这个更新操作失败了，那就意味着至少存在一条线程与当前线程竞争获取该对象的锁。虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是，说明当前线程已经拥有了这个对象的锁，那直接进入同步块继续执行就可以了，否则就说明这个锁对象已经被其他线程抢占了。如果出现两条以上的线程争用同一个锁的情况，那轻量级锁就不再有效，必须要膨胀为重量级锁，锁标志的状态值变为“10”，此时Mark Word中存储的就是指向重量级锁（互斥量）的指针，后面等待锁的线程也必须进入阻塞状态。</p><p>解锁过程也同样是通过CAS操作来进行的，如果对象的Mark Word仍然指向线程的锁记录，那就用CAS操作把对象当前的Mark Word和线程中复制的DisplacedMark Word替换回来。假如能够成功替换，那整个同步过程就顺利完成了；如果替换失败，则说明有其他线程尝试过获取该锁，就要在释放锁的同时，唤醒被挂起的线程。</p><p>轻量级锁能提升程序同步性能的依据是“对于绝大部分的锁，在整个同步周期内都是不存在竞争的”这一经验法则。如果没有竞争，轻量级锁便通过CAS操作成功避免了使用互斥量的开销；但如果确实存在锁竞争，除了互斥量的本身开销外，还额外发生了CAS操作的开销。因此在有竞争的情况下，轻量级锁反而会比传统的重量级锁更慢。</p><ol start="6"><li>偏向锁（假定将来只有第一个申请锁的线程会使用锁）</li></ol><p>偏向锁也是JDK 6中引入的一项锁优化措施，它的目的是消除数据在无竞争情况下的同步原语，进一步提高程序的运行性能。如果说轻量级锁是在无竞争的情况下使用CAS操作去消除同步使用的互斥量，那偏向锁就是在无竞争的情况下把整个同步都消除掉，连CAS操作都不去做了。</p><p>偏向锁是指这个锁会偏向于第一个获得它的线程，如果在接下来的执行过程中，该锁一直没有被其他的线程获取，则持有偏向锁的线程将永远不需要再进行同步。</p><p>假设当前虚拟机启用了偏向锁（启用参数-XX：+UseBiased Locking，这是自JDK 6起HotSpot虚拟机的默认值），那么当锁对象第一次被线程获取的时候，虚拟机将会把对象头中的标志位设置为“01”、把偏向模式设置为“1”，表示进入偏向模式。同时使用CAS操作把获取到这个锁的线程的ID记录在对象的Mark Word之中。如果CAS操作成功，持有偏向锁的线程以后每次进入这个锁相关同步块时，虚拟机都可以不再进行任何同步操作（例如加锁、解锁及对Mark Word的更新操作等）。</p><p>一旦出现另外一个线程去尝试获取这个锁的情况，偏向模式就马上宣告结束。根据锁对象目前是否处于被锁定的状态决定是否撤销偏向（偏向模式设置为“0”），撤销后标志位恢复到未锁定（标志位为“01”）或轻量级锁定（标志位为“00”）的状态，后续的同步操作就按照上面介绍的轻量级锁那样去执行。</p><p>偏向锁、轻量级锁的状态转化及对象Mark Word的关系如下图所示</p><p><img src="/image/jdk/markwork-exch.png" alt="对象头Mark Word"></p><p>当对象进入偏向状态的时候，Mark Word大部分的空间（23个比特）都用于存储持有锁的线程ID了，这部分空间占用了原有存储对象哈希码的位置。在Java语言里面一个对象如果计算过哈希码，就应该一直保持该值不变（强烈推荐但不强制，因为用户可以重载hashCode()方法按自己的意愿返回哈希码），否则很多依赖对象哈希码的API都可能存在出错风险。而作为绝大多数对象哈希码来源的Object::hashCode()方法，返回的是对象的一致性哈希码（Identity Hash Code），这个值是能强制保证不变的，它通过在对象头中存储计算结果来保证第一次计算之后，再次调用该方法取到的哈希码值永远不会再发生改变。</p><p>因此，当一个对象已经计算过一致性哈希码后，它就再也无法进入偏向锁状态了；而当一个对象当前正处于偏向锁状态，又收到需要计算其一致性哈希码请求[1]时，它的偏向状态会被立即撤销，并且锁会膨胀为重量级锁。在重量级锁的实现中，对象头指向了重量级锁的位置，代表重量级锁的ObjectMonitor类里有字段可以记录非加锁状态（标志位为“01”）下的Mark Word，其中自然可以存储原来的哈希码。</p><p>偏向锁可以提高带有同步但无竞争的程序性能，但它同样是一个带有效益权衡（Trade Off）性质的优化，也就是说它并非总是对程序运行有利。如果程序中大多数的锁都总是被多个不同的线程访<br>问，那偏向模式就是多余的。在具体问题具体分析的前提下，有时候使用参数-XX：-UseBiasedLocking来禁止偏向锁优化反而可以提升性能。</p><h1 id="三、相关资料"><a href="#三、相关资料" class="headerlink" title="三、相关资料"></a>三、相关资料</h1><blockquote><p>《深入理解Java虚拟机：JVM高级特性与最佳实践（第3版）》</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;并发处理的广泛应用是Amdahl定律代替摩尔定律成为计算机性能发展源动力的根本原因，也是人类压榨计算机运算能力的最有力武器。&lt;/p&gt;
&lt;p&gt;在软件业发展的初期，程序编写都是以算法为核心的，程序员会把数据和过程分别作为独立的部分来考虑，数据代表问题空间中的客体，程序代码则用于</summary>
      
    
    
    
    
    <category term="jdk" scheme="http://zws6672.top/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>FMI2.0 ———— 联合仿真</title>
    <link href="http://zws6672.top/2021/05/27/fmi-cos/"/>
    <id>http://zws6672.top/2021/05/27/fmi-cos/</id>
    <published>2021-05-27T02:58:12.000Z</published>
    <updated>2021-07-05T01:59:28.165Z</updated>
    
    <content type="html"><![CDATA[<p>本文是来自于FMI2.0规范的第四章联合仿真的译文，基于机翻与个人理解修订而成。</p><h1 id="一、开题"><a href="#一、开题" class="headerlink" title="一、开题"></a>一、开题</h1><p>本文定义了函数模拟接口（FMI）用于在联合仿真环境中联合两个或更多仿真模型（FMI进行共模）。联合仿真是一种相当常见的方法，用于仿真仿真的技术系统和相关的物理现象，着重于稳定性（time-dependent）问题。</p><blockquote><p>联合模拟(coupling simulation ):应用共享网格技术,解决数字化环境下多学科CAE视图模型耦合仿真的难题。<br>时间依赖性：time-dependent</p></blockquote><p>联合仿真的设计是为了与多个子系统模型耦合，它们已由其仿真器及其求解器导出为可运行代码；还可用于仿真工具的耦合（仿真器耦合，工具耦合）。</p><p><img src="/image/co-simulation/cos.png" alt="联合仿真"></p><p>在工具耦合情况下，仿真工具提供的FMU实现类将FMI函数的调用包装为API调用（<code>C-&gt;其它语言</code>）。此外，还需要使用仿真工具来对FMU进行联合仿真。最常见的是，基于工具耦合的联合仿真在分布式硬件上实现了由不同计算机处理不同的子系统，其中包括不同的操作系统（集群计算机，计算机农场，不同位置的计算机）。</p><p>子系统之间的数据交换和通信通常使用一种网络通信技术（例如MPI，TCP / IP）完成。该通信层的定义不是FMI标准的一部分，但可以使用FMI来实现分布式联合仿真方案，如下图所示<br><img src="/image/co-simulation/cos-distributed.png" alt="分布式联合仿真基础结构"></p><p>主机必须实现通信层，用于建立网络通信的其他参数（例如，远程计算机的标识，端口号，用户帐户）将通过主机的GUI进行设置，而这些数据都不会通过FMI API传输。</p><h1 id="二、数学描述"><a href="#二、数学描述" class="headerlink" title="二、数学描述"></a>二、数学描述</h1><ol><li>基础</li></ol><p>联合仿真利用了仿真过程中所有的阶段都会遇到的耦合问题（模块化结构），从针对不同仿真工具（可以是功能强大的仿真器以及简单的C程序）中各个子系统单独的模型设置和预处理开始。</p><p>在进行时间积分时，将限制子系统间的数据交换只能在离散的通信点tc<sub>i</sub>中进行， 对所有子系统独立执行仿真。对于模拟耦合，子系统中的仿真工具独自完成仿真数据的可视化和后处理。在不同的上下文中，通信点tc<sub>i</sub>、通信步长tc<sub>i</sub>-&gt;tc<sub>i+1</sub> 以及通信步长总个数hc<sub>i</sub>:=tc<sub>i+1</sub>- tc<sub>i</sub> 分别称为取样点（同步点）、宏步长和取样率。FMI中用于联合仿真的术语“通信点”是指联合仿真环境中子系统之间的通信，不应与用于将仿真结果保存到文件中的输出点混合使用，</p><blockquote><p>取样：指的是取样的时间点<br>宏步长：指的是两次取样的时间间隔<br>取样率（Sampling Rate）是指在数码音频和视频技术应用中，当进行模拟/数码转换时，每秒钟对模拟信号进行取样时的快慢次数。例如，CD和MD的取样率为44.1kHz，表示每秒钟对模拟音频信号进行了44100次取样。取样率越高，转换的精度就越高，重放出的模拟信号波形就越接近原始的模拟信号波形。取样率的高低。决定了所能转换模拟信号的频率上限。</p></blockquote><p>FMI为联合仿真提供了一个接口标准，提供了与时间依赖性相关的耦合系统的解决方案，该耦合系统由时间连续（由平稳差分方程描述的模型组件）或时间离散（由差分方程描述的模型组件，例如离散控制器）的子系统组成。在耦合系统的块表示中，子系统由具有（内部）状态变量<i>x(t)</i>的块表示，这些块通过子系统输入 <i>u(t)</i> 和子系统输出 <i>y(t)</i> 连接到其他耦合的子系统（模块）的模块。在这个框架中，子系统间的物理连接由所有子系统的输入 <i>u(t)</i> 和输出 <i>y(t)</i> 间的数学耦合条件表示。</p><p><img src="/image/co-simulation/cos-data-flow.png" alt="通信点的数据流"></p><blockquote><p>差分方程：包含未知函数的差分及自变数的方程。在求微分方程的数值解时，常把其中的微分用相应的差分来近似，所导出的方程就是差分方程。通过解差分方程来求微分方程的近似解，是连续问题离散化的一个例子。 </p></blockquote><p>为了进行联合仿真，必须实现两个基本函数组：</p><ul><li>子系统之间的数据交换函数</li><li>用于算法问题的函数，以同步所有子系统的仿真，并从初始时间<i>tc<sub>0</sub></i>:= <i>t<sub>start</sub></i>到结束时间<i>tc<sub>N</sub></i>:=<i>t<sub>stop</sub></i>执行通信步长<i>tc<sub>i</sub></i>-&gt;<i>tc<sub>i+1</sub></i>。</li></ul><p>在用于联合仿真的FMI中，这两个函数都在一个软件组件中实现，即联合仿真主机（Master）。子系统（Slave）之间的数据交换仅通过主站进行，从站之间没有直接通信；主函数可以通过特殊的软件工具（单独的仿真背板）或所涉及的仿真工具之一来实现。最常见的是，耦合系统可以在嵌套的协同仿真环境中进行仿真，并且用于协同仿真的 FMI 适用于层次结构的每个级别。</p><p>用于联合仿真的FMI定义了在联合仿真环境中主机与所有从机（子系统）之间进行通信的接口规则。最常见的主站算法是在每个通信点tc<sub>i</sub>停止所有从站的仿真（时间积分）、收集所有子系统的输出y（tc<sub>i</sub>）、调整子系统输入u（tc<sub>i</sub>）将这些子系统输入分配给从站，然后继续与下一个交互步骤<code>tc&lt;sub&gt;i&lt;/sub&gt;-&gt;tc&lt;sub&gt;i+1&lt;/sub&gt; = tc&lt;sub&gt;i&lt;/sub&gt; + hc</code>的（协同）仿真，交互步长为固定参数hc。在每个从站中，适合的求解器应当被用于给定交互步长 tc<sub>i</sub>-&gt;tc<sub>i+1</sub> 的子系统之一求积分。最简单的联合仿真算法通过冻结数据u(tc<sub>i</sub>)来近似 tc<sub>i</sub>≤t &lt;tc<sub>i</sub> + 1的（未知）子系统输入u(t),(t&gt; tc<sub>i</sub>)。用于联合仿真的FMI支持这种经典的暴力解法以及更复杂的主算法，旨在支持一类非常通用主算法，但它本身并未定义主算法。</p><p>从站支持更复杂的主站算法的能力，在从站的XML描述中包含一组功能标志（capability flags）。典型的例子是</p><ul><li>具有处理可变通信步长hc<sub>i</sub>的 能力</li><li>具有使用减小的通信步长重复执行被拒绝的通信步长tc<sub>i</sub>≤t &lt;tc<sub>i</sub> + 1的 能力</li><li>提供支持插值的输出时间的导数</li><li>提供雅可比行列式的能力</li></ul><p>用于联合仿真的 FMI 仅限于具有以下属性的从站：</p><ul><li>所有计算参数值 v(t) 是在预先定义的时间间隔（t<sub>start</sub> &lt;= t &lt;= t<sub>stop</sub>）中的时间依赖函数（fmi2SetupExperiment，stopTimeDefined=fmi2True）</li><li>通常，所有计算（模拟）都随着时间的增加而进行。当前时间<i>t</i>从t<sub>start</sub> 到 t<sub>stop</sub>逐步允许。从站的算法可能拥有属性在[t<sub>start</sub>, t<sub>stop</sub>]整个时间间隔或部分间隔中重复仿真。</li><li>可以为从站提供一个时间值tc<sub>i</sub>（t<sub>start</sub> &lt;= tc<sub>i</sub> &lt;= t<sub>stop</sub>）</li><li>当时间到达tc<sub>i</sub>，从站能够中断模拟</li><li>在中断仿真期间，从站（独立求解器）可以从输入u(tc<sub>i</sub>)获取值，将值发送到输出 y(tc<sub>i</sub>)。</li><li>每当从站中的模拟中断时，新的时间取值tc<sub>i+1</sub>（tc<sub>i</sub> &lt;= tc<sub>i+1</sub> &lt;= t<sub>stop</sub>）可以给出时间子区间（tc<sub>i</sub> &lt; t &lt;= tc<sub>i+1</sub>）</li><li>子间隔长度hc<sub>i</sub>是第i个通讯步的长度（通信步长必须大于零）：hc<sub>i</sub>=tc<sub>i+1</sub>-tc<sub>i</sub></li></ul><p>用于联合仿真的FMI相关流程如下</p><ul><li>该流程从实例化和初始化（准备好所有从设备进行计算，建立通信链接）开始</li><li>然后进行仿真（强制从设备模拟通信step）</li><li>最后在完成时关闭</li></ul><ol start="2"><li>数学模型</li></ol><p>本节包含联合仿真 FMU 的正式数学模型，可以作出以下基本假设：</p><ul><li><p>从模拟器被主模拟器视为纯粹的采样数据系统，可以是</p><ul><li>“真实的”采样数据系统（离散控制器；输入和输出可以是Real，Integer，Boolean，String或枚举类型。此类变量的定义为variability =“ discrete”；最小FMU外部可访问的采样周期由元素DefaultExperiment中的属性stepSize定义）</li><li>混合ODE被集成在通信点间（对时间连续系统的采样存取），在其中内部事件可能发生并被处理，但在FMU外部看不到。在此假定此混合ODE的所有输入和所有输出均为实际信号（以variability =“ continuous”定义）</li><li>上述系统的组合</li></ul></li><li><p>主站和从站之间的通信仅在一组离散的时刻进行，这些时间点称为通信点。</p></li></ul><p>FMI联合仿真模型相关变量描述：</p><ul><li>t：自变量time∈ℝ（causality =“independent”定义的变量）;第i个通信点表示为t=tc<sub>i</sub>,通信步长表示为hc<sub>i</sub> = tc<sub>i+1</sub> - tc<sub>i</sub></li><li>v：所有暴露变量的向量</li><li>p：仿真过程中不变的参数</li><li>不带下标符号引用p 表示独立参数（causality = “parameter”）；</li><li>因变参数 p<sub>calculated</sub>（causality = “calculatedParameter”）</li><li>可调参数 p<sub>tune</sub>（causality = “parameter”、variability= “tunable”）</li><li>u(tc<sub>i</sub>)：输入变量</li><li>y(tc<sub>i</sub>)：输出变量</li><li>w(tc<sub>i</sub>)：不能用于FMU连接的FMU的局部变量,通过causality = “local”定义</li><li>x<sub>c</sub>(t)：用实际连续时间变量的向量表示连续时间状态</li><li>x<sub>d</sub>(t)：离散时间变量</li><li><sup>.</sup>x<sub>d</sub>(t)：上一个离散时间变量</li></ul><p>存在如下定义：</p><ul><li>在通信点上，主站向从站提供通用输入</li><li>从机向主机提供通用输出</li><li>Initialization：从站是一个采样数据系统，其内部状态（连续时间或离散时间都没关系）需要初始化为t=tc<sub>0</sub>。这是通过辅助函数执行的[此关系在<modelstructure> <initialunknowns>下的xml文件中定义]。计算FMI联合仿真模型的解意味着将解过程分为两个阶段，并且在每个阶段中使用不同的方程式和解方法。可以根据以下模式对阶段进行分类<ul><li>Initialization Mode：如果从站与其他模型循环连接，则可以对FMU方程进行迭代。在这种模式下，将求解代数方程</li><li>Step Mode：通过对常微分、代数和离散方程进行数值求解，此模式用于计算通信点上所有（实际）连续时间和离散时间变量的值。如果从站与其他模型循环连接，则不可能对FMU方程进行迭代</li></ul></initialunknowns></modelstructure></li></ul><p>下表中使用的函数fmi2SetXXX是fmi2SetReal，fmi2SetBoolean，fmi2SetInteger和fmi2SetString的缩写。函数fmi2GetXXX是函数fmi2GetReal，fmi2GetBoolean，fmi2GetInteger和fmi2GetString的缩写</p><table><thead><tr><th align="left">方程式</th><th align="left">FMI函数</th></tr></thead><tbody><tr><td align="left"><b>初始化模式之前的方程式（状态机中的“实例化”）</b></td><td align="left"></td></tr><tr><td align="left">设置 i=0并设置自变量的tc<sub>i</sub></td><td align="left">fmi2SetupExperiment</td></tr><tr><td align="left">设置变量v<sub>initial=exact</sub>以及v<sub>initial=approx</sub></td><td align="left">fmi2SetXXX</td></tr><tr><td align="left"><b>初始化模式之后的方程式</b></td><td align="left"></td></tr><tr><td align="left">在 t=t<sub>0</sub>时进入初始化模式（激活初始化，离散时间和连续时间方程式）</td><td align="left">fmi2EnterInitializationMode</td></tr><tr><td align="left">设置变量v<sub>initial=exact</sub>（包括初始值为x<sub>c,initial=exact</sub>独立参数p和连续时间状态）</td><td align="left">fmi2SetXXX</td></tr><tr><td align="left">设置连续时间以及离散时间输入 u<sub>c+d</sub>(tc<sub>0</sub>)以及可以选择设置连续时间导数的输入u<sub>c</sub><sup>j</sup>(tc<sub>0</sub>)</td><td align="left">fmi2SetXXX、fmi2SetRealInputDerivative</td></tr><tr><td align="left">v<sub>InitialUnknows</sub>:=f<sub>init</sub>(u<sub>c</sub>,u<sub>d</sub>,t<sub>0</sub>,v<sub>initial=exact</sub>)</td><td align="left">fmi2GetXXX、fmi2GetDirectionalDerivativ</td></tr><tr><td align="left">退出初始化模式（停用初始化方程式）</td><td align="left">fmi2ExitInitializationMode</td></tr><tr><td align="left"><b>Step模式下的方程式（状态机中的“ stepComplete”，“ stepInProgress”</b></td><td align="left"></td></tr><tr><td align="left">设置独立的可调参数p<sub>tune</sub>（不要设置其他参数p<sub>other</sub>）</td><td align="left">fmi2SetXXX</td></tr><tr><td align="left">设置参数连续时间和离散时间输入 u<sub>c+d</sub>(tc<sub>i</sub>)以及可选参数连续时间输入 u<sub>c</sub><sup>(j)</sup>(tc<sub>i</sub>)的导数</td><td align="left">fmi2SetXXX、fmi2SetRealInputDerivative</td></tr><tr><td align="left">tc<sub>i+1</sub>:=tc<sub>i</sub>+hc<sub>i</sub><br> (y<sub>c+d</sub>,y<sub>c</sub><sup>(j)</sup>,w<sub>c+d</sub>)<sub>tc<sub>i+1</sub></sub>    := f<sub>doStep</sub>(u<sub>c+d</sub>,u<sub>c</sub><sup>(j)</sup>,tc<sub>i</sub>,hc<sub>i</sub>,p<sub>tune</sub>,p<sub>other</sub>)<sub>tc<sub>i</sub></sub><br>tc<sub>i</sub>:=tc<sub>i+1</sub><br>其中f<sub>doStep</sub>也是内部变量的函数</td><td align="left">fmi2DoStep<br>fmi2GetXXX<br>fmi2GetRealOutputDerivatives<br>fmi2GetDirectionalDerivative</td></tr></tbody></table><h1 id="三、FMI应用程序编程接口"><a href="#三、FMI应用程序编程接口" class="headerlink" title="三、FMI应用程序编程接口"></a>三、FMI应用程序编程接口</h1><p>本节包含用于从C程序访问联合仿真从站的输入/输出数据和状态信息的接口说明。</p><ol><li>输入/输出值和参数的传输</li></ol><p>输入变量、输出变量以及变量 通过本节中定义的fmi2GetXXX和fmi2SetXXX函数进行传输。</p><p>为了使从机能够在通信步长间使用连续实数作为输入的插值，可以提供输入对时间的导数；为了允许更高阶的插值，还可以设置更高阶的导数。从机是否能够进行插值由函数属性canInterpolateInputs提供（假如输入为速度，那么需要提供速度对时间的导数，即速率；那么在两个时间点间，可以使用<code>速率*时间t</code>求出时间t时的速度）。以下是相关函数：</p><p><code>fmi2SetRealInputDerivatives</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 设置实数输入变量在第n个时间点的导数</span><br><span class="line">fmi2Status fmi2SetRealInputDerivatives(fmi2Component c, constfmi2ValueReference vr[], size_t nvr, constfmi2Integer order[], constfmi2Real value[])</span><br><span class="line">“vr”：包含变量值的向量，定义了需要设置导数的变量</span><br><span class="line">“nvr”：向量维数</span><br><span class="line">“order[]”：导数的阶（1表示一阶导数，不允许0）。</span><br><span class="line">“value[]”：导数的向量</span><br></pre></td></tr></table></figure><p>使用该函数的限制与fmi2SetReal函数相同。输入及其导数是在通信时间步开始时设置的。为了允许实际输出变量作为其他从站输入在通讯步间进行插值/逼近，可以读取输出相对于时间的导数。从站是否能够提供输出导数由函数标志<code>MaxOutputDerivativeOrder</code>(无符号整数类型)决定；它定义了输出导数的阶数。如果实际阶数较低（因为积分算法的阶数较低），则检索到的值为0。例如：内部多项式为1阶，并且主机请求输出变量的二阶导数，则从机将返回零。</p><p><code>fmi2GetRealOutputDerivatives</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 检索输出值的第n个导数</span><br><span class="line">fmi2Status fmi2GetRealOutputDerivatives (fmi2Component c, constfmi2ValueReference vr[], size_t nvr, constfmi2Integer order[], fmi2Real value[]);</span><br><span class="line">“vr”：包含变量值的向量，定义了需要设置导数的变量</span><br><span class="line">“nvr”：向量维数</span><br><span class="line">“order[]”：导数的阶（1表示一阶导数，不允许0）。</span><br><span class="line">“value[]”：导数的向量</span><br></pre></td></tr></table></figure><p>返回的输出变量对应于当前从机时间，例如在成功执行fmi2DoStep后，返回值与通信时间步的结束有关。</p><ol start="2"><li>计算</li></ol><p>2.1 fmi2DoStep</p><p>时间步长的计算由以下函数控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmi2Status fmi2DoStep(fmi2Component c, </span><br><span class="line">fmi2Real currentCommunicationPoint, </span><br><span class="line">fmi2Real communicationStepSize, </span><br><span class="line">fmi2Boolean noSetFMUStatePriorToCurrentPoint)</span><br></pre></td></tr></table></figure><p>该函数用于计算时间步长，参数currentCommunicationPoint表示主机的当前通信点（tc<sub>i</sub>）、参数communicationStepSize表示通信步长（hc<sub>i</sub> &gt; 0.0）。从站必须集成，直到tc<sub>i+1</sub> = tc<sub>i</sub> +hc<sub>i</sub>.【调用环境定义了通信点，fmi2DoStep必须求精确到tc<sub>i</sub> +hc<sub>i</sub> 的积分来与这些点进行同步。而如何实现此目标取决于fmi2DoStep】。</p><p>在调用<code>fmi2ExitInitializationMode</code>函数之后，第一次调用fmiDoStep时，参数<code>currentCommunicationPoint</code>必须等于由<code>fmi2SetupExperiment</code>设置的<code>startTime</code>参数。【参数<code>currentCommunicationPoint</code>不会被正式使用，定义它是为了解决主节点与从节点间FMU状态不匹配的问题：由前一个的<code>fmi2DoStep</code>或<code>fmi2SetFMUStatecall</code>函数定义的参数<code>currentCommunicationPoint</code>、从节点中的FMU状态必须彼此一致】</p><p>例如，如果从节点未按照上述要求对自变量使用更新公式（tc<sub>i+1</sub> = tc<sub>i</sub> +hc<sub>i</sub>），而是在内部使用自己的更新公式，例如tc<sub>s,i+1</sub> = tc<sub>s,i</sub> +hc<sub>s,i</sub> （fmi2DoStep函数中，tc<sub>i</sub>=currentCommunicationPoint）；则从节点可以使用时间增量hc<sub>s,i</sub> :=(tc<sub>i</sub>-tc<sub>s,i</sub>)+hc<sub>i</sub>(替代hc<sub>s,i</sub> :=hc<sub>i</sub>)去避免主节点时间tc<sub>i+1</sub>和从节点内部时间tc<sub>s,i+1</sub>偏差过大。</p><p>在此次模拟运行中，如果在currentCommunicationPoint到预先设定的时刻之间不再调用<code>fmi2SetFMUState</code>函数，则设置参数<code>noSetFMUStatePriorToCurrentPoint</code> = “fmi2True” [从节点可以使用该标志刷新结果缓冲区]。</p><p>函数返回值：</p><ul><li><code>fmi2OK</code> —— 直到通信步长（主时间步）结束，每一子步长计算都成功。</li><li><code>fmi2Discard</code> —— 从节点只成功计算出通讯步长的部分间隔，主节点可以调用相应的 <code>fmi2GetXXXStatus</code> 函数来获取更多信息。如果可能的话，主节点应使用更短的通信步长重复模拟。只有函数<code>fmi2GetFMUState</code>当前（失败）步骤开始时记录了 FMU 状态，才能重复步长；这是通过调用 <code>fmi2SetFMUState</code> 并随后使用新的<code>communicationStepSize</code> 调用<code>fmi2DoStep</code> 来实现的。</li><li><code>fmi2Error</code> —— FMU 遇到错误。该 FMU 实例无法继续模拟。如果其中一个函数返回 fmi2Error，则可以尝试通过调用 <code>fmi2SetFMUstate</code> 从以前存储的 FMU 状态重新启动仿真。</li><li><code>fmi2Fatal</code> —— 所有 FMU 实例的模型计算都无法修复（例如，由于在执行 fmi 函数期间出现访问冲突或整数除以零等运行时异常）</li><li><code>fmi2Pending</code> —— 从节点异步执行，即开始执行时立即返回。如果从节点返回这个状态，主节点必须调用函数<code>fmi2GetStatus(...,fmi2DoStep,...)</code>来确定从节点是否完成；另一种方法是等待slave调用回调函数<code>fmi2StepFinished</code>；而调用函数<code>fmi2CancelStep</code>可以取消当前的计算。如果返回这个值，在<code>fmi2DoStep</code>执行期间，不允许调用其它函数。</li></ul><p>如果<code>fmi2DoStep</code>返回了<code>fmi2Pending</code>，则可以调用<code>fmi2CancelStep</code>函数停止当前的异步执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmi2Status fmi2CancelStep(fmi2Component c);</span><br></pre></td></tr></table></figure><p>如果用户或从节点之一停止运行联合仿真，则主节点调用次函数。之后，只允许调用<code>fmi2Reset</code>或<code>fmi2FreeInstance</code>。</p><ol start="3"><li>获取从节点的状态信息</li></ol><p>通过以下函数向主节点反馈从节点的当前状态信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">fmi2Status fmi2GetStatus(fmi2Component c,const fmi2StatusKind s, fmi2Status* value); </span><br><span class="line">fmi2Status fmi2GetRealStatus   (fmi2Component c, const fmi2StatusKind s,fmi2Real* value); </span><br><span class="line">fmi2Status fmi2GetIntegerStatus(fmi2Component c, const fmi2StatusKind s, fmi2Integer* value); </span><br><span class="line">fmi2Status fmi2GetBooleanStatus(fmi2Component c, const fmi2StatusKind s, fmi2Boolean* value); </span><br><span class="line">fmi2Status fmi2GetStringStatus (fmi2Component c, const fmi2StatusKind s, fmi2String* value);</span><br><span class="line"></span><br><span class="line">-- 通知主节点，模拟运行的实际状态（响应正文）</span><br><span class="line">typedefenum&#123;</span><br><span class="line">fmi2DoStepStatus, </span><br><span class="line">fmi2PendingStatus,</span><br><span class="line">fmi2LastSuccessfulTime,</span><br><span class="line">fmi2Terminated </span><br><span class="line">&#125; fmi2StatusKind;</span><br><span class="line"></span><br><span class="line">-- （响应）</span><br><span class="line">typedef enum &#123;</span><br><span class="line">    fmi2OK, // 通信步骤已成功计算到结束</span><br><span class="line">    fmi2Warning, // 警告</span><br><span class="line">    fmi2Discard, // 从节点成功计算出通讯步骤的一个子间隔</span><br><span class="line">    fmi2Error, // 错误</span><br><span class="line">    fmi2Fatal, // 发生错误，导致FMU无法修复损坏</span><br><span class="line">    fmi2Pending // 异步</span><br><span class="line">&#125; fmi2Status;</span><br></pre></td></tr></table></figure><p>通知主节点有关模拟运行的实际状态，由参数<code>fmi2StatusKind</code>决定要返回的状态信息。从节点可以提供哪些状态信息取决于从节点的能力。如果需要从节点无法检索的状态，它将返回状态<code>fmi2Discard</code>。</p><p>结构体fmi2StatusKind包含以下状态：</p><table><thead><tr><th align="left">状态</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">fmi2DoStepStatus</td><td align="left">fmi2Status</td><td align="left">当fmi2DoStep函数返回fmi2Pending时可以调用。如果计算未完成，该函数将提供fmi2Pending。否则，该函数将返回异步执行的fmi2DoStep调用的结果。</td></tr><tr><td align="left">fmi2PendingStatus</td><td align="left">fmi2String</td><td align="left">当fmi2DoStep函数返回fmi2Pending时可以调用。该函数提供一个字符串，该字符串告知当前正在运行的异步fmi2DoStep计算的状态</td></tr><tr><td align="left">fmi2LastSuccessfulTime</td><td align="left">fmi2Real</td><td align="left">返回上一个成功完成的通信步骤的结束时间。可以在fmi2DoStep（…）返回fmi2Discard之后调用。</td></tr><tr><td align="left">fmi2Terminate</td><td align="left">fmi2Boolean</td><td align="left">如果从节点希望终止仿真，则返回true。可以在fmi2DoStep（…）返回fmi2Discard之后调用。使用fmi2LastSuccessfulTime确定从节点终止的时刻</td></tr></tbody></table><ol start="3"><li>主节点到从节点调用次序的状态机</li></ol><p>以下状态机定义了fmi规范所支持的调用序列</p><p><img src="/image/co-simulation/cos-status-machine.png" alt="以UML 2.0状态机形式表示的联合仿真C函数的调用序列"></p><p>状态机的每个状态对应于模拟的某个特定阶段，如下所示：</p><ul><li><p>instantiated（实例化）：在这种状态下，可以设置起始值和估计值（变量属性initial = “exact” or “approx.”）、设置导数、设置仿真条件</p></li><li><p>Initialization Mode（初始化模式）：在这种状态下，方程式可用于确定所有输出（以及导出工具到处的其他可选变量）、可以通过fmi2GetXXX调用变量是在xml文件中的<modelstructure> <initialunknowns>下定义的（causality=”output”）变量、可以设置initial=”exact”的变量以及具有variability=”input”的变量</initialunknowns></modelstructure></p></li><li><p>slaveInitialized（从节点初始化）：在这种状态下，将对从节点进行初始化并执行联合仿真计算；使用函数“ fmi2DoStep”执行计算直到下一个通讯点。根据返回值，从节点处于不同的状态</p><ul><li>step complete</li><li>step failed</li><li>step canceled</li></ul></li><li><p>terminated（终止）：在这种状态下，可以获取仿真最后时刻的解。</p></li></ul><blockquote><p>注：在初始化模式下，可以根据xml文件中的元素<code>&lt;ModelStructure&gt;、 &lt;InitialUnknowns&gt;</code>定义模型结构，使用fmi2SetXXX设置输入变量，并使用fmi2GetXXX获取输出变量。【例如，如果一个输出y1取决于两个输入u1，u2，则必须先设置这两个输入，然后才能获取y1。 如果另外输出y2取决于输入u3，则可以设置u3，然后再获取y2；可以通过使用适当的数值算法来处理初始化模式下连接的FMU上的人工或“真实”代数环。】</p></blockquote><p>“slaveInitialized”状态还有一个额外的限制，在fmi2SetXXX函数之后如果没有fmi2DoStep调用，则不允许调用fmi2GetXXX函数。</p><p>与模型交换类型的FMI相反，为了避免缓存存在不同的解释，联合仿真的<code>fmi2DoStep</code>函数将执行实际的计算，而不是使用<code>fmi2GetXXX</code>函数。因此，模型交换时调用的<code>fmi2GetXXX</code>、<code>fmi2SetXXX</code>序列无法处理通讯点处的虚拟代数环。</p><h1 id="四、FMU联合仿真（CoSimulation）"><a href="#四、FMU联合仿真（CoSimulation）" class="headerlink" title="四、FMU联合仿真（CoSimulation）"></a>四、FMU联合仿真（CoSimulation）</h1><ol><li>标签的定义</li></ol><p>联合仿真功能在模型描述文件中的 <cosimulation></cosimulation>标签定义，相关定义如下：</p><p><img src="/image/co-simulation/cos-CoSimulation.png" alt="CoSimulation"></p><p>相关结构如下：</p><ul><li>CoSimulation<ul><li>modelIdentifier：类名缩写</li><li>needsExecution：决定是否需要外部工具执行模型</li><li>canHandleVariableCommunicationStepSize：从节点可以处理可变的通信步长。对于每个校准，通信步长（fmi2DoStep函数的参数communicationStepSize）在每次调用中不需要固定不变</li><li>canInterpolateInputs：从节点能够对连续输入插值</li><li>maxOutputDerivativeOrder：从节点能够提供最大阶数的输出导数</li><li>canRunAsynchronuously ：异步</li><li>canBeInstantiatedOnlyOncePerProcess：单FMU单实例（如果需要多个实例，则必须在不同的进程中实例化 FMU）</li><li>canNotUseMemoryManagementFunctions：如果为true，则从节点使用自身的函数进行内存分配和释放；忽略fmi2Instantiate中给出的回调函数 allocateMemory、freeMemory</li><li>canGetAndSetFMUstate：如果为true，则 仿真环境可以查询和恢复内部FMU状态（即支持fmi2GetFMUstate,fmi2SetFMUstate,fmi2FreeFMUstate）</li><li>canSerializeFMUstate：如果为true，则仿真环境可以序列化内部FMU状态，即FMU支持fmi2SerializedFMUstateSize，fmi2SerializeFMUstate，fmi2DeSerializeFMUstate。如果是这种情况，则标记canGetAndSetFMUstate也必须为true。</li><li>providesDirectionalDerivative：如果为true，在通信点时可以使用fmi2GetDirectionalDerivative（..）计算方程的方向导数。</li><li>SourceFiles：资源文件</li></ul></li></ul><ol start="2"><li>实例</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF8&quot;?&gt;</span><br><span class="line">&lt;fmiModelDescription   fmiVersion=&quot;2.0&quot;   modelName=&quot;MyLibrary.SpringMassDamper&quot;   guid=&quot;&#123;8c4e810f-3df3-4a00-8276-176fa3c9f9e0&#125;&quot;   description=&quot;Rotational Spring Mass Damper System&quot;   version=&quot;1.0&quot; generationDateAndTime=&quot;2011-09-23T16:57:33Z&quot;   variableNamingConvention=&quot;structured&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;CoSimulation modelIdentifier=&quot;MyLibrary_SpringMassDamper&quot; canHandleVariableCommunicationStepSize=&quot;true&quot;     canInterpolateInputs=&quot;true&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;UnitDefinitions&gt;</span><br><span class="line">&lt;Unit name=&quot;rad&quot;&gt;</span><br><span class="line">&lt;BaseUnit rad=&quot;1&quot;/&gt;</span><br><span class="line">&lt;DisplayUnit name=&quot;deg&quot; factor=&quot;57.2957795130823&quot;/&gt;</span><br><span class="line">&lt;/Unit&gt;</span><br><span class="line"></span><br><span class="line">&lt;Unit name=&quot;rad/s&quot;&gt;</span><br><span class="line">&lt;BaseUnit s=&quot;-1&quot; rad=&quot;1&quot;/&gt;</span><br><span class="line">&lt;/Unit&gt;</span><br><span class="line"></span><br><span class="line">&lt;Unit name=&quot;kg.m2&quot;&gt;</span><br><span class="line">&lt;BaseUnit kg=&quot;1&quot; m=&quot;2&quot;/&gt;</span><br><span class="line">&lt;/Unit&gt;</span><br><span class="line">&lt;/UnitDefinitions&gt;</span><br><span class="line"></span><br><span class="line">&lt;TypeDefinitions&gt;</span><br><span class="line">&lt;SimpleType name=&quot;Modelica.SIunits.Inertia&quot;&gt;</span><br><span class="line">&lt;Real quantity=&quot;MomentOfInertia&quot; unit=&quot;kg.m2&quot; min=&quot;0.0&quot;/&gt;</span><br><span class="line">&lt;/SimpleType&gt;</span><br><span class="line"></span><br><span class="line">&lt;SimpleType name=&quot;Modelica.SIunits.Torque&quot;&gt;</span><br><span class="line">&lt;Real quantity=&quot;Torque&quot; unit=&quot;N.m&quot;/&gt;</span><br><span class="line">&lt;/SimpleType&gt;</span><br><span class="line"></span><br><span class="line">&lt;SimpleType name=&quot;Modelica.SIunits.AngularVelocity&quot;&gt;</span><br><span class="line">&lt;Real quantity=&quot;AngularVelocity&quot; unit=&quot;rad/s&quot;/&gt;</span><br><span class="line">&lt;/SimpleType&gt;</span><br><span class="line"></span><br><span class="line">&lt;SimpleType name=&quot;Modelica.SIunits.Angle&quot;&gt;</span><br><span class="line">&lt;Real quantity=&quot;Angle&quot; unit=&quot;rad&quot;/&gt;</span><br><span class="line">&lt;/SimpleType&gt;</span><br><span class="line">&lt;/TypeDefinitions&gt;</span><br><span class="line"></span><br><span class="line">&lt;DefaultExperiment startTime=&quot;0.0&quot; stopTime=&quot;3.0&quot; tolerance=&quot;0.0001&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;ModelVariables&gt;</span><br><span class="line">&lt;ScalarVariable name=&quot;inertia1.J&quot; valueReference=&quot;1073741824&quot; description=&quot;Moment of load inertia&quot;       causality=&quot;parameter&quot; variability=&quot;fixed&quot;&gt;</span><br><span class="line">&lt;Real declaredType=&quot;Modelica.SIunits.Inertia&quot; start=&quot;1&quot;/&gt;</span><br><span class="line">&lt;/ScalarVariable&gt;</span><br><span class="line"></span><br><span class="line">&lt;ScalarVariable name=&quot;torque.tau&quot; valueReference=&quot;536870912&quot; description=&quot;Accelerating torque acting at flange (= -flange.tau)&quot; causality=&quot;input&quot;&gt;</span><br><span class="line">&lt;Real declaredType=&quot;Modelica.SIunits.Torque&quot; start=&quot;0&quot;/&gt;</span><br><span class="line">&lt;/ScalarVariable&gt;</span><br><span class="line"></span><br><span class="line">&lt;ScalarVariable name=&quot;inertia1.phi&quot; valueReference=&quot;805306368&quot; description=&quot;Absolute rotation angle of component&quot;       causality=&quot;output&quot;&gt;</span><br><span class="line">&lt;Real declaredType=&quot;Modelica.SIunits.Angle&quot; /&gt;</span><br><span class="line">&lt;/ScalarVariable&gt;</span><br><span class="line"></span><br><span class="line">&lt;ScalarVariable name=&quot;inertia1.w&quot; valueReference=&quot;805306369&quot; description=&quot;Absolute angular velocity of component (= der(phi))&quot; causality=&quot;output&quot;&gt;</span><br><span class="line">&lt;Real declaredType=&quot;Modelica.SIunits.AngularVelocity&quot; /&gt;</span><br><span class="line">&lt;/ScalarVariable&gt;</span><br><span class="line">&lt;/ModelVariables&gt;</span><br><span class="line"></span><br><span class="line">&lt;ModelStructure&gt;</span><br><span class="line">&lt;Outputs&gt;</span><br><span class="line">&lt;Unknown index=&quot;3&quot;/&gt;</span><br><span class="line">&lt;Unknown index=&quot;4&quot;/&gt;</span><br><span class="line">&lt;/Outputs&gt;</span><br><span class="line">&lt;InitialUnknowns&gt;</span><br><span class="line">&lt;Unknown index=&quot;3&quot;/&gt;</span><br><span class="line">&lt;Unknown index=&quot;4&quot;/&gt;</span><br><span class="line">&lt;/InitialUnknowns&gt;</span><br><span class="line">&lt;/ModelStructure&gt;</span><br><span class="line">&lt;/fmiModelDescription&gt;</span><br></pre></td></tr></table></figure><h1 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h1><p>模型交换是指同一仿真环境下某一个仿真实例生成（符合 FMI 接口定义）的可移植可调用的数学模型库；而联合仿真指的是将不同仿真环境（分布式或跨工具）的输入输出按照 FMI 标准定义好，通过Master Algorithm（ssp、dcp）传输数据，协同计算。</p><blockquote><p>《Functional Mock-up Interface forModel Exchange and Co-Simulation v2.0》</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文是来自于FMI2.0规范的第四章联合仿真的译文，基于机翻与个人理解修订而成。&lt;/p&gt;
&lt;h1 id=&quot;一、开题&quot;&gt;&lt;a href=&quot;#一、开题&quot; class=&quot;headerlink&quot; title=&quot;一、开题&quot;&gt;&lt;/a&gt;一、开题&lt;/h1&gt;&lt;p&gt;本文定义了函数模拟接口（FM</summary>
      
    
    
    
    
    <category term="co-simulation" scheme="http://zws6672.top/tags/co-simulation/"/>
    
  </entry>
  
  <entry>
    <title>JNA （Java Native Access）入门</title>
    <link href="http://zws6672.top/2021/05/26/jna-base/"/>
    <id>http://zws6672.top/2021/05/26/jna-base/</id>
    <published>2021-05-26T02:27:07.000Z</published>
    <updated>2021-05-26T02:29:57.227Z</updated>
    
    <content type="html"><![CDATA[<p>如果JNI是连接JAVA与C的独木桥，那么JNA就是在独木桥上的高速通道。</p><h1 id="一、入门"><a href="#一、入门" class="headerlink" title="一、入门"></a>一、入门</h1><ol><li>什么是JNA</li></ol><p>JNA(Java Native Access)框架是一个开源的Java框架，是SUN公司主导开发的，建立在经典的JNI的基础之上的一个框架。JNA提供一组Java工具类用于在运行期动态访问系统本地共享类库而不需要编写任何Native/JNI代码。开发人员只要在一个java接口中描述目标native library的函数与结构，JNA将自动实现Java接口到native function的映射，大大降低了Java调用本体共享库的开发难度。</p><p>JNI是Java调用原生函数的唯一途径，而JNA就是基于JNI的开发的工具包。使用JNI访问动态链接库过于复杂，而JNA简化了操作，提供了一个动态的C语言编写的转发器（实际上也是一个动态链接库，在Linux-i386中文件名是：libjnidispatch.so）可以自动实现Java与C之间的数据类型映射。从性能上会比JNI技术调用动态链接库要低。</p><p>Java Native Access（Java本地访问）具有一个单独的组件jna.jar；支持的Native库（jnidispatch）包含在jar文件中。 JNA能够自行提取和加载Native库，因此不需要其他配置。如果Native库尚未安装在通过<code>System.loadLibrary</code>可以访问的本地系统上，则JNA会退出提取。</p><p>首先下载最新版本的JNA，然后在项目的CLASSPATH中引用jna.jar；或者通过Maven导入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;net.java.dev.jna&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jna&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;4.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>如下所示，示例会将标准C库映射并调用printf函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">// 通过扩展Library接口，声明一个Java接口来保存Native库方法</span><br><span class="line">    interface CLibrary extends Library &#123;</span><br><span class="line">        CLibrary INSTANCE = (CLibrary) Native.loadLibrary((Platform.isWindows() ? &quot;msvcrt&quot; : &quot;c&quot;), CLibrary.class);</span><br><span class="line"></span><br><span class="line">        void printf(String format, Object... args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        CLibrary.INSTANCE.printf(&quot;Hello, World\n&quot;);</span><br><span class="line">        for (int i = 0; i &lt; args.length; i++) &#123;</span><br><span class="line">            CLibrary.INSTANCE.printf(&quot;Argument %d: %s\n&quot;, i, args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标识要使用的Native目标库，这可以是具有导出功能的任何共享库。在平台软件包中可以找到许多常见系统库的映射示例，尤其是在Windows上。</p><p>在Java程序中使用C库，有多种方法：</p><ul><li>首选方法是将jna.library.path系统属性设置为目标库的路径。此属性类似于java.library.path，但仅适用于JNA加载的库。</li><li>启动VM之前，请更改适当的库访问环境变量（在Windows上是PATH、在Linux上是LD_LIBRARY_PATH、在OSX上是DYLD_LIBRARY_PATH）</li><li>使您的Native库在类路径下{OS}-{ARCH} / {LIBRARY}下可用，其中{OS}-{ARCH}是JNANative库的规范前缀（例如win32-x86，linux-amd64）；如果资源在jar文件中，则在加载时将自动提取该资源。</li></ul><p>我们可以通过设置类似于SYNC_INSTANCE的变量，来将库加载到局部变量中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    interface CLibrary extends Library &#123;</span><br><span class="line">        CLibrary INSTANCE = (CLibrary) Native.loadLibrary((Platform.isWindows() ? &quot;msvcrt&quot; : &quot;c&quot;), CLibrary.class);</span><br><span class="line">//        确保单次使用</span><br><span class="line">        CLibrary SYNC_INSTANCE = (CLibrary)</span><br><span class="line">                Native.synchronizedLibrary(INSTANCE);</span><br><span class="line">        void printf(String format, Object... args);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>结构体</li></ol><p>C/C++里有结构体struct,甚至C#中也具有，相关语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">-- 大括号后面的分号&quot;;&quot;不能少，这是一条完整的语句。</span><br><span class="line">struct 结构体名&#123;</span><br><span class="line">    结构体所包含的变量或数组</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">-- EXAMPLE</span><br><span class="line">struct stu&#123;</span><br><span class="line">    char *name;  //姓名</span><br><span class="line">    int num;  //学号</span><br><span class="line">    int age;  //年龄</span><br><span class="line">    char group;  //所在学习小组</span><br><span class="line">    float score;  //成绩</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">-- 定义结构体数组</span><br><span class="line">struct stu&#123;</span><br><span class="line">    char *name;  //姓名</span><br><span class="line">    int num;  //学号</span><br><span class="line">    int age;  //年龄</span><br><span class="line">    char group;  //所在小组 </span><br><span class="line">    float score;  //成绩</span><br><span class="line">&#125;class[5];</span><br><span class="line"></span><br><span class="line">-- 定义结构体指针</span><br><span class="line">struct 结构体名 *变量名;</span><br><span class="line"></span><br><span class="line">struct stu&#123;</span><br><span class="line">    char *name;  //姓名</span><br><span class="line">    int num;  //学号</span><br><span class="line">    int age;  //年龄</span><br><span class="line">    char group;  //所在小组</span><br><span class="line">    float score;  //成绩</span><br><span class="line">&#125; stu1 = &#123; &quot;Tom&quot;, 12, 18, &apos;A&apos;, 136.5 &#125;;</span><br><span class="line">//结构体指针</span><br><span class="line">struct stu *pstu = &amp;stu1;</span><br><span class="line"></span><br><span class="line">-- 定义结构体的同时定义结构体指针</span><br><span class="line">struct stu&#123;</span><br><span class="line">    char *name;  //姓名</span><br><span class="line">    int num;  //学号</span><br><span class="line">    int age;  //年龄</span><br><span class="line">    char group;  //所在小组</span><br><span class="line">    float score;  //成绩</span><br><span class="line">&#125; stu1 = &#123; &quot;Tom&quot;, 12, 18, &apos;A&apos;, 136.5 &#125;, *pstu = &amp;stu1;</span><br></pre></td></tr></table></figure><p>而java中并没有结构体这个概念。当调用动态库.so和.dll时，函数接口上很多数据都是结构体，而Java通过定义一个类似于结构体的实体类来表示结构体对象。而jna提供了Structure类，用于定义结构体。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import com.sun.jna.Library;</span><br><span class="line">import com.sun.jna.Native;</span><br><span class="line">import com.sun.jna.Platform;</span><br><span class="line">import com.sun.jna.Structure;</span><br><span class="line">import com.sun.jna.win32.StdCallLibrary;</span><br><span class="line">import org.omg.Messaging.SYNC_WITH_TRANSPORT;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">// 这是一个标准库的Java接口</span><br><span class="line">    interface Kernel32 extends StdCallLibrary &#123;</span><br><span class="line">        // 方法声明，常量和结构定义在此处</span><br><span class="line">        void GetSystemTime(SYSTEMTIME result);</span><br><span class="line">// 定义结构体</span><br><span class="line">        static class SYSTEMTIME extends Structure &#123;</span><br><span class="line">            public short wYear;</span><br><span class="line">            public short wMonth;</span><br><span class="line">            public short wDayOfWeek;</span><br><span class="line">            public short wDay;</span><br><span class="line">            public short wHour;</span><br><span class="line">            public short wMinute;</span><br><span class="line">            public short wSecond;</span><br><span class="line">            public short wMilliseconds;</span><br><span class="line">// 返回字段,需要与结构体保持一致</span><br><span class="line">            @Override</span><br><span class="line">            protected List getFieldOrder() &#123;</span><br><span class="line">                return Arrays.asList(&quot;wYear&quot;, &quot;wMonth&quot;, &quot;wDayOfWeek&quot;, &quot;wDay&quot;, &quot;wHour&quot;, &quot;wMinute&quot;, &quot;wSecond&quot;, &quot;wMilliseconds&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Kernel32 lib = (Kernel32) Native.loadLibrary(&quot;kernel32&quot;, Kernel32.class);</span><br><span class="line">        Kernel32.SYSTEMTIME time = new Kernel32.SYSTEMTIME();</span><br><span class="line">        lib.GetSystemTime(time);</span><br><span class="line">        System.out.println(time.wYear + &quot;年&quot; +time.wMonth+ &quot;月&quot; + time.wDay +&quot;日&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要映射结构体，我们可以定义一个从Structure库接口定义中派生的公共静态类。它允许将结构共享为库接口定义的任何选项（如自定义类型映射），但是必须按顺序在FieldOrder注解或getFieldOrder()方法返回的列表中包括每个声明的字段名称。</p><p>如果代码的结构特别长或复杂，则可以考虑使用由Olivier Chafik编写的<a href="https://code.google.com/p/jnaerator/" target="_blank" rel="noopener">JNAerator</a> 工具，该工具可以为您生成JNA映射。</p><ol start="4"><li>函数描述</li></ol><p>通过<code>Native.loadLibrary()</code>实例化Native库接口时，JNA将创建一个代理。该代理通过的<code>invoke</code>函数路由所有方法来调用 <code>Library.Handler</code>。此方法会查找一个适当的 <code>Function</code>对象，该对象表示由Native库导出的函数。代理处理程序可以执行一些初始名称转换，借此从调用的代理函数中获取实际的Native库函数名称。</p><p>找到 <code>Function</code> 对象后，可以通过<code>invoke</code> 函数与所有可用参数来调用通用方法。代理函数的方法签名用于确定传入参数的类型和所需的返回类型。Function对象执行参数的转换，可以将<code>NativeMapped</code>类型转换为它们的Native表示形式，或将<code>TypeMapper</code>应用于任何传入类型，然后在函数返回时执行类似的转换。默认情况下，所有Structure对象的Java字段均会在调用Native函数之前复制到其Native内存中，并在调用后复制回去。</p><p>所有函数调用均基于其返回类型通过不同的Native方法进行路由，但所有这些Native方法均通过native / dispatch.c中的同一分派调用分派。该函数在构建供<code>libffi</code>使用的函数调用描述之前，会将Java对象最终转换为Native表示形式。libffi库需要描述目标函数的参数和返回类型，以便执行适合最终本地调用调用的特定于平台的堆栈结构。一旦libffi执行了本地调用 (via ffi_call()),它将结果复制到JNA提供的缓冲区中，然后将其转换回适当的Java对象。</p><ol start="5"><li>数据类型的使用</li></ol><p>C语言中的数据类型与java数据类型可以通过JNA相互转换，Java基本类型（及其对等对象）可以直接映射到相同大小的NativeC类型：</p><table><thead><tr><th align="left">原生类型</th><th align="left">Size</th><th align="left">Java 类型</th><th align="left">WINDOWS类型</th></tr></thead><tbody><tr><td align="left">char</td><td align="left">8-bit integer</td><td align="left">byte</td><td align="left">BYTE, TCHAR</td></tr><tr><td align="left">short</td><td align="left">16-bit integer</td><td align="left">short</td><td align="left">WORD</td></tr><tr><td align="left">wchar_t</td><td align="left">16/32-bit character</td><td align="left">char</td><td align="left">TCHAR</td></tr><tr><td align="left">int</td><td align="left">32-bit integer</td><td align="left">int</td><td align="left">DWORD</td></tr><tr><td align="left">int</td><td align="left">boolean value</td><td align="left">boolean</td><td align="left">BOOL</td></tr><tr><td align="left">long</td><td align="left">32/64-bit integer</td><td align="left">NativeLong</td><td align="left">LONG</td></tr><tr><td align="left">long long</td><td align="left">64-bit integer</td><td align="left">long</td><td align="left">__int64</td></tr><tr><td align="left">float</td><td align="left">32-bit FP</td><td align="left">float</td><td align="left"></td></tr><tr><td align="left">double</td><td align="left">64-bit FP</td><td align="left">double</td><td align="left"></td></tr><tr><td align="left">char*</td><td align="left">C string</td><td align="left">String</td><td align="left">LPCSTR</td></tr><tr><td align="left">void*</td><td align="left">pointer</td><td align="left">Pointer</td><td align="left">LPVOID, HANDLE, LPXXX</td></tr></tbody></table><p>无符号类型使用与有符号类型相同的映射，C枚举通常可以与“ int”互换。</p><ol start="6"><li>指针和数组</li></ol><p>原始数组参数（包括结构）由其对应的Java类型表示。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//原始C声明</span><br><span class="line">void  fill_buffer（ int * buf， int len）;</span><br><span class="line">void  fill_buffer（ int buf []， int len）; //与数组语法相同</span><br><span class="line">//等效的JNA映射</span><br><span class="line">void fill_buffer（ int [] buf， int len）;</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果参数由函数调用范围之外的Native函数使用，则必须使用内存或NIO直接缓冲区。Java基本数组提供的内存仅在函数调用期间有效，以供Native代码使用。</p></blockquote><ol start="7"><li>ByReference参数的使用</li></ol><p>当函数接收指针到形参时，可以使用一个ByReference类型来捕获返回的值或者用户自定义的子类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// C语言声明</span><br><span class="line">void allocate_buffer(char **bufp, int* lenp);</span><br><span class="line"></span><br><span class="line">// 等效JNA映射</span><br><span class="line">void allocate_buffer(PointerByReference bufp, IntByReference lenp);</span><br><span class="line"></span><br><span class="line">// 用法</span><br><span class="line">PointerByReference pref = new PointerByReference();</span><br><span class="line">IntByReference iref = new IntByReference();</span><br><span class="line">lib.allocate_buffer(pref, iref);</span><br><span class="line">Pointer p = pref.getValue();</span><br><span class="line">byte[] buffer = p.getByteArray(0, iref.getValue());</span><br></pre></td></tr></table></figure><p>或者，也可以使用具有所需类型的单元素Java数组，但ByReference 可以更好地传达代码的意图。 Pointer类除了GetByteArray（）之外，还提供了许多访问者方法。通过<code>PointerType</code>类，可以声明安全指针。</p><ol start="8"><li>从Java到本机的自定义映射</li></ol><p><code>TypeMapper</code> 类和相关接口 可以通过参数、返回值或结构成员将 任何Java类型 转换为native类（或相反操作），这种转换限于Java中默认的类型。如果用户自定义类型，那么可以实现<code>NativeMapped接口</code>，该接口可以逐级的转换原始类型。</p><ol start="9"><li>回调，函数指针和闭包（Callbacks, Function Pointers and Closures）</li></ol><p>回调声明包括一个简单的接口，该接口扩展了<code>Callback</code>接口，并实现回调方法（或定义单个任意名称的方法）。通过在一点C代码中包装Java对象方法来实现回调。最简单的使用类似于使用匿名内部类来注册事件侦听器。以下是回调用法的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 原生C定义</span><br><span class="line">typedef void (*sig_t) (int);</span><br><span class="line">sig_t signal(int sig, sig_t func);</span><br><span class="line">int SIGUSR1 = 30;</span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line">// 等价的JNA映射</span><br><span class="line">public interface CLibrary extends Library &#123;</span><br><span class="line">int SIGUSR1 = 30;</span><br><span class="line">interface sig_t extends Callback &#123;</span><br><span class="line">void invoke(int signal);</span><br><span class="line">&#125;</span><br><span class="line">sig_t signal(int sig, sig_t fn);</span><br><span class="line">int raise(int sig);</span><br><span class="line">&#125;</span><br><span class="line">/* ... */</span><br><span class="line">CLibrary lib = (CLibrary)Native.load(&quot;c&quot;, CLibrary.class);</span><br><span class="line">// WARNING: 您必须对回调对象进行引用直到取消解除回调;如果是回调对象被垃圾回收，原生回调的调用将可能崩溃。</span><br><span class="line">CLibrary.sig_t fn = new CLibrary.sig_t() &#123;</span><br><span class="line">public void invoke(int sig) &#123;</span><br><span class="line">System.out.println(&quot;signal &quot; + sig + &quot; was raised&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">CLibrary.sig_t old_handler = lib.signal(CLibrary.SIGUSR1, fn);</span><br><span class="line">lib.raise(CLibrary.SIGUSR1);</span><br></pre></td></tr></table></figure><p>以下是一个更介绍的示例，使用Win32 API枚举所有本机窗口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//C声明</span><br><span class="line">typedef int (__stdcall *WNDENUMPROC)(void*,void*);</span><br><span class="line">int __stdcall EnumWindows(WNDENUMPROC,void*);</span><br><span class="line"></span><br><span class="line">----------------------------------------------------</span><br><span class="line">// 等价的JNA映射</span><br><span class="line">public interface User32 extends StdCallLibrary &#123;</span><br><span class="line">interface WNDENUMPROC extends StdCallCallback &#123;</span><br><span class="line">/** Return whether to continue enumeration. */</span><br><span class="line">boolean callback(Pointer hWnd, Pointer arg);</span><br><span class="line">&#125;</span><br><span class="line">boolean EnumWindows(WNDENUMPROC lpEnumFunc, Pointer arg);</span><br><span class="line">&#125;</span><br><span class="line">/* ... */</span><br><span class="line">User32 user32 = User32.INSTANCE;</span><br><span class="line"></span><br><span class="line">user32.EnumWindows(new WNDENUMPROC() &#123;</span><br><span class="line">int count;</span><br><span class="line">public boolean callback(Pointer hWnd, Pointer userData) &#123;</span><br><span class="line">System.out.println(&quot;Found window &quot; + hWnd + &quot;, total &quot; + ++count);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, null);</span><br></pre></td></tr></table></figure><h1 id="二、相关资料"><a href="#二、相关资料" class="headerlink" title="二、相关资料"></a>二、相关资料</h1><p><a href="https://github.com/java-native-access/jna/blob/master/www/GettingStarted.md" target="_blank" rel="noopener">官网文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果JNI是连接JAVA与C的独木桥，那么JNA就是在独木桥上的高速通道。&lt;/p&gt;
&lt;h1 id=&quot;一、入门&quot;&gt;&lt;a href=&quot;#一、入门&quot; class=&quot;headerlink&quot; title=&quot;一、入门&quot;&gt;&lt;/a&gt;一、入门&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;什么是JNA&lt;/li&gt;</summary>
      
    
    
    
    
    <category term="jna" scheme="http://zws6672.top/tags/jna/"/>
    
  </entry>
  
  <entry>
    <title>Java内存模型与线程</title>
    <link href="http://zws6672.top/2021/05/25/java-memory-model-thread/"/>
    <id>http://zws6672.top/2021/05/25/java-memory-model-thread/</id>
    <published>2021-05-25T12:51:42.000Z</published>
    <updated>2021-05-25T12:54:24.705Z</updated>
    
    <content type="html"><![CDATA[<p>并发处理的广泛应用是Amdahl定律代替摩尔定律成为计算机性能发展源动力的根本原因，也是人类压榨计算机运算能力的最有力武器。</p><p>在许多场景下，让计算机同时去做几件事情，不仅是因为计算机的运算能力强大了，还有一个很重要的原因是计算机的运算速度与它的存储和通信子系统的速度差距太大，大量的时间都花费在磁盘I/O、网络通信或者数据库访问上。而衡量一个服务性能的高低好坏，每秒事务处理数（Transactions Per Second，TPS）是重要的指标之一，它代表着一秒内服务端平均能响应的请求总数，而TPS值与程序的并发能力又有非常密切的关系。对于计算量相同的任务，程序线程并发协调得越有条不紊，效率自然就会越高；反之，线程之间频繁争用数据，互相阻塞甚至死锁，将会大大降低程序的并发能力。</p><p>各种中间件服务器、各类框架也都努力地替程序员隐藏尽可能多的线程并发细节，使得程序员在编码时能更关注业务逻辑，而不是花费大部分时间去关注此服务会同时被多少人调用、如何处理数据争用、协调硬件资源。</p><h1 id="一、硬件的效率与一致性"><a href="#一、硬件的效率与一致性" class="headerlink" title="一、硬件的效率与一致性"></a>一、硬件的效率与一致性</h1><p>绝大多数的运算任务都不可能只靠处理器“计算”就能完成。处理器至少要与内存交互，如读取运算数据、存储运算结果等，这个I/O操作就是很难消除的（无法仅靠寄存器来完成所有运算任务）。</p><p>由于计算机的存储设备与处理器的运算速度有着几个数量级的差距，所以现代计算机系统都不得不加入一层或多层读写速度尽可能接近处理器运算速度的高速缓存（Cache）来作为内存与处理器之间的缓冲：将运算需要使用的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存之中，这样处理器就无须等待缓慢的内存读写了。</p><ol><li>缓存一致性</li></ol><p>基于高速缓存的存储交互很好地解决了处理器与内存速度之间的矛盾，但是也为计算机系统带来更高的复杂度，它引入了一个新的问题：缓存一致性（Cache Coherence）。在多路处理器系统中，每个处理器都有自己的高速缓存，而它们又共享同一主内存（Main Memory），这种系统称为共享内存多核系统（Shared Memory Multiprocessors System）。</p><p>当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致。如果真的发生这种情况，那同步回到主内存时该以谁的缓存数据为准呢？为了解决一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作，这类协议有MSI、MESI（Illinois Protocol）、MOSI、Synapse、Firefly及Dragon Protocol等。</p><p><img src="/image/jvm/jhcxy.png" alt="java 缓存协议"></p><p>除了增加高速缓存之外，为了使处理器内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行乱序执行（Out-Of-Order Execution）优化，处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果是一致的，但并不保证程序中各个语句计算的先后顺序与输入代码中的顺序一致，因此如果存在一个计算任务依赖另外一个计算任务的中间结果，那么其顺序性并不能靠代码的先后顺序来保证。与处理器的乱序执行优化类似，Java虚拟机的即时编译器中也有指令重排序（Instruction Reorder）优化。</p><h1 id="二、Java内存模型"><a href="#二、Java内存模型" class="headerlink" title="二、Java内存模型"></a>二、Java内存模型</h1><p>Java内存模型的主要目的是定义程序中各种变量的访问规则，即关注在虚拟机中把变量值存储到内存和从内存中取出变量值这样的底层细节。此处的变量（Variables）与Java编程中所说的变量有所区别，它包括了实例字段、静态字段和构成数组对象的元素，但是不包括局部变量与方法参数，因为后者是线程私有的，不会被共享，自然就不会存在竞争问题。</p><p>为了获得更好的执行效能，Java内存模型并没有限制执行引擎使用处理器的特定寄存器或缓存来和主内存进行交互，也没有限制即时编译器是否要进行调整代码执行顺序这类优化措施。</p><ol><li>主内存与工作内存</li></ol><p>Java内存模型规定了所有的变量都存储在主内存（Main Memory）中，每条线程还有自己的工作内存（Working Memory，可与前面讲的处理器高速缓存类比），线程的工作内存中保存了被该线程使用的变量的主内存副本，线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的数据。</p><p>不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成，线程、主内存、工作内存三者的交互关系如下图所示</p><p><img src="/image/jvm/jvm-xzg.png" alt="jvm 线程-主内存-工作内存"></p><p>从变量、主内存、工作内存的定义来看，主内存主要对应于Java堆中的对象实例数据部分，而工作内存则对应于虚拟机栈中的部分区域。</p><blockquote><p>根据《Java虚拟机规范》的约定，volatile变量依然有工作内存的拷贝，但是由于它特殊的操作顺序性规定（后文会讲到），所以看起来如同直接在主内存中读写访问一般。<br>如果局部变量是一个reference类型，它引用的对象在Java堆中可被各个线程共享，但是reference本身在Java栈的局部变量表中是线程私有的.</p></blockquote><ol start="2"><li>内存间交互操作</li></ol><p>关于主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存这一类的实现细节，Java内存模型中定义了以下8种操作来完成：</p><ul><li>lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态。</li><li>unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li>read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。</li><li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li>use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。</li><li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li>store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用。</li><li>write（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。<ul><li>变量从主内存拷贝到工作内存：read、load</li><li>变量从工作内存同步回主内存：store、write</li></ul></li></ul><blockquote><p>注，Java内存模型只要求上述两个操作必须按顺序执行，但不要求是连续执行。也就是说read与load之间、store与write之间是可插入其他指令的.</p></blockquote><p>Java内存模型规定如下规则：</p><ul><li>不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者工作内存发起回写了但主内存不接受的情况出现。</li><li>不允许一个线程丢弃它最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。</li><li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。</li><li>一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或</li><li>assign）的变量，换句话说就是对一个变量实施use、store操作之前，必须先执行assign和load操作。</li><li>一个变量在同一个时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。</li><li>如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作以初始化变量的值。</li><li>如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定的变量。</li><li>对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）。</li></ul><p>以上的规则相当严谨，但也十分繁琐。所以，Java开发团队将Java内存模型的操作简化为read、write、lock和unlock四<br>种，但这只是语言描述上的等价化简，Java内存模型的基础设计并未改变，但也只有虚拟机开发人员需要以这种方式思考并发问题</p><ol start="3"><li>对于volatile型变量的特殊规则</li></ol><p>当一个变量被定义成volatile之后，它将具备两项特性：</p><p>3.1 可见性</p><p>第一项是保证此变量对所有线程的可见性，这里的“可见性”是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。（普通变量在线程间传递，需要回写到主内存）</p><p>volatile变量对所有线程是立即可见的，对volatile变量所有的写操作都能立刻反映到其他线程之中。但是，基于volatile变量的运算在并发下并不是线程安全的。Java里面的运算操作符并非原子操作，这导致volatile变量的运算在并发下一样是不安全的。</p><p>相关例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class VolatileTest &#123;</span><br><span class="line">public static volatile int race = 0;</span><br><span class="line">public static void increase() &#123;</span><br><span class="line">race++;</span><br><span class="line">&#125;</span><br><span class="line">private static final int THREADS_COUNT = 20;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Thread[] threads = new Thread[THREADS_COUNT];</span><br><span class="line">for (int i = 0; i &lt; THREADS_COUNT; i++) &#123;</span><br><span class="line">threads[i] = new Thread(new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">for (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">increase();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">threads[i].start();</span><br><span class="line">&#125;</span><br><span class="line">// 等待所有累加线程都结束</span><br><span class="line">while (Thread.activeCount() &gt; 1)</span><br><span class="line">Thread.yield();</span><br><span class="line">System.out.println(race);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用volatile修饰变量的场景：</p><ul><li>运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值。</li><li>变量不需要与其他的状态变量共同参与不变约束。</li></ul><p>3.2 禁止指令重排序优化</p><p>使用volatile变量的第二个语义是禁止指令重排序优化，普通的变量仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证变量赋值操作的顺序与程序代码中的执行顺序一致。因为在同一个线程的方法执行过程中无法感知到这点，这就是Java内存模型中描述的所谓“线程内表现为串行的语义”（Within-Thread As-If-Serial Semantics）。</p><p>DCL单例模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">private volatile static Singleton instance;</span><br><span class="line">public static Singleton getInstance() &#123;</span><br><span class="line">if (instance == null) &#123;</span><br><span class="line">synchronized (Singleton.class) &#123;</span><br><span class="line">if (instance == null) &#123;</span><br><span class="line">instance = new Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Singleton.getInstance();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有volatile修饰的变量会添加一个内存屏障<br>（Memory Barrier或Memory Fence，指重排序时不能把后面的指令重排序到内存屏障之前的位置）。如果只有一个处理器访问内<br>存时，并不需要内存屏障；但如果有两个或更多处理器访问同一块内存，且其中有一个在观测另一<br>个，就需要内存屏障来保证一致性了。</p><p>volatile变量读操作的性能消耗与普通变量几乎没有什么差别，但是写操作则可能会慢上一些，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。不过即便如此，大多数场景下volatile的总开销仍然要比锁来得更低。</p><blockquote><p>volatile屏蔽指令重排序的语义在JDK 5中才被完全修复，此前的JDK中即使将变量声明为volatile也仍然不能完全避免重排序所导致的问题（主要是volatile变量前后的代码仍然存在重排序问题），这一点也是在JDK 5之前的Java中无法安全地使用DCL（双锁检测）来实现单例模式的原因</p></blockquote><ol start="4"><li>针对long和double型变量的特殊规则</li></ol><p>Java内存模型要求lock、unlock、read、load、assign、use、store、write这八种操作都具有原子性，但是对于64位的数据类型（long和double），在模型中特别定义了一条宽松的规定：允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32位的操作来进行，即允许虚拟机实现自行选择是否要保证64位数据类型的load、store、read和write这四个操作的原子性，这就是所谓的“long和double的非原子性协定”（Non-Atomic Treatment of double and long Variables）。</p><p>如果有多个线程共享一个并未声明为volatile的long或double类型的变量，并且同时对它们进行读取和修改操作，那么某些线程可能会读取到一个既不是原值，也不是其他线程修改值的代表了“半个变量”的数值.</p><p>在目前主流平台下商用的64位Java虚拟机中并不会出现非原子性访问行为，但是对于32位的Java虚拟机，譬如比较常用的32位x86平台下的HotSpot虚拟机，对long类型的数据确实存在非原子性访问的风险.</p><ol start="5"><li>原子性、可见性与有序性</li></ol><p>Java内存模型是围绕着在并发过程中如何处理原子性、可见性和有序性这三个特征来建立的，相关细节如下：</p><p>5.1 原子性（Atomicity）<br>由Java内存模型来直接保证的原子性变量操作包括read、load、assign、use、store和write这六个，我们大致可以认为，基本数据类型的访问、读写都是具备原子性的（例外就是long和double的非原子性协定。</p><p>5.2 可见性（Visibility）</p><ul><li>可见性就是指当一个线程修改了共享变量的值时，其他线程能够立即得知这个修改。，volatile的特殊规则保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。</li><li>synchronized的可见性是由“对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）”这条规则获得的。</li><li>final关键字的可见性是指：被final修饰的字段在构造器中一旦被初始化完成，并且构造器没有把“this”的引用传递出去（this引用逃逸是一件很危险的事情，其他线程有可能通<br>过这个引用访问到“初始化了一半”的对象），那么在其他线程中就能看见final字段的值</li></ul><p>5.3 有序性（Ordering）</p><p>如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的。前半句是指“线程内似表现为串行的语义”（Within-Thread As-If-SerialSemantics），后半句是指“指令重排序”现象和“工作内存与主内存同步延迟”现象。</p><p>Java语言提供了volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语义，而synchronized则是由“一个变量在同一个时刻只允许一条线程对其进行lock操作”这条规则获得的，这个规则决定了持有同一个锁的两个同步块只能串行地进入。</p><ol start="6"><li>先行发生原则</li></ol><p>Java语言中有一个“先行发生”（Happens-Before）的原则，这个原则非常重要，它是判断数据是否存在竞争，线程是否安全的非常有用的手段。依赖这个原则，我们可以通过几条简单规则一揽子解决并发环境下两个操作之间是否可能存在冲突的所有问题，而不需要陷入Java内存模型苦涩难懂的定义之中</p><p>先行发生是Java内存模型中定义的两项操作之间的偏序关系，比如说操作A先行发生于操作B，其实就是说在发生操作B之前，操作A产生的影响能被操作B观察到，“影响”包括修改了内存中共享变量的值、发送了消息、调用了方法等。</p><p>下面是Java内存模型下一些“天然的”先行发生关系，这些先行发生关系无须任何同步器协助就已经存在，可以在编码中直接使用。如果两个操作之间的关系不在此列，并且无法从下列规则推导出来，则它们就没有顺序性保障，虚拟机可以对它们随意地进行重排序。</p><ul><li><p>程序次序规则（Program Order Rule）：在一个线程内，按照控制流顺序，书写在前面的操作先行发生于书写在后面的操作。注意，这里说的是控制流顺序而不是程序代码顺序，因为要考虑分支、循环等结构。</p></li><li><p>管程锁定规则（Monitor Lock Rule）：一个unlock操作先行发生于后面对同一个锁的lock操作。这里必须强调的是“同一个锁”，而“后面”是指时间上的先后。</p></li><li><p>volatile变量规则（Volatile Variable Rule）：对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里的“后面”同样是指时间上的先后。</p></li><li><p>线程启动规则（Thread Start Rule）：Thread对象的start()方法先行发生于此线程的每一个动作。</p></li><li><p>线程终止规则（Thread Termination Rule）：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread::join()方法是否结束、Thread::isAlive()的返回值等手段检测线程是否已经终止执行。</p></li><li><p>线程中断规则（Thread Interruption Rule）：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread::interrupted()方法检测到是否有中断发生。</p></li><li><p>对象终结规则（Finalizer Rule）：一个对象的初始化完成（构造函数执行结束）先行发生于它的finalize()方法的开始。</p></li><li><p>传递性（Transitivity）：如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C的结论。</p></li></ul><p>先行发生原则示例如下，假设存在线程A和B，线程A先（时间上的先后）调用了setValue(1)，然后线程B调用了同一个对象的getValue()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private int value = 0;</span><br><span class="line">pubilc void setValue(int value)&#123;</span><br><span class="line">this.value = value;</span><br><span class="line">&#125;</span><br><span class="line">public int getValue()&#123;</span><br><span class="line">return value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据先行优先规则进行分析，</p><ul><li>两个方法并不是同一个线程调用，所以程序次序规则并不适用；</li><li>没有配置同步代码块，没有unlock、lock操作，所以管程锁定规则并不适用；</li><li>没有用volatile修饰变量，所以volatile变量规则并不适用；</li><li>后面的线程启动、终止、中断规则和对象终结规则也和这里完全没有关系，传递性也无从谈起。</li></ul><p>尽管线程A在操作时间上先于线程B，但是无法确定线程B中getValue()方法的返回结果，换句话说，这里面的操作不是线程安全的。</p><blockquote><p>时间先后顺序与先行发生原则之间基本没有因果关系，所以我们衡量并发安全问题的时候不要受时间顺序的干扰，一切必须以先行发生原则为准。</p></blockquote><h1 id="三、Java与线程"><a href="#三、Java与线程" class="headerlink" title="三、Java与线程"></a>三、Java与线程</h1><ol><li>线程的实现</li></ol><p>线程是比进程更轻量级的调度执行单位，线程的引入，可以把一个进程的资源分配和执行调度分开，各个线程既可以共享进程资源（内存地址、文件I/O等），又可以独立调度。目前线程是Java里面进行处理器资源调度的最基本单位，不过如果日后Loom项目能成功为Java引入纤程（Fiber）的话，可能就会改变这一点。</p><p>主流的操作系统都提供了线程实现，Java语言则提供了在不同硬件和操作系统平台下对线程操作的统一处理，每个已经调用过start()方法且还未结束的java.lang.Thread类的实例就代表着一个线程。Thread类中所有关键方法都被声明为Native，就意味着这个方法没有使用或无法使用平台无关的手段来实现。</p><p>实现线程主要有三种方式：</p><ul><li>使用内核线程实现（1：1实现）</li><li>使用用户线程实现（1：N实现），</li><li>使用用户线程加轻量级进程混合实现（N：M实现）</li></ul><p>使用内核线程实现的方式也被称为1：1实现。内核线程（Kernel-Level Thread，KLT）就是直接由操作系统内核（Kernel，下称内核）支持的线程，这种线程由内核来完成线程切换，内核通过操纵调度器（Scheduler）对线程进行调度，并负责将线程的任务映射到各个处理器上。每个内核线程可以视为内核的一个分身，这样操作系统就有能力同时处理多件事情，支持多线程的内核就称为多线程内核（Multi-Threads Kernel）。</p><p>1.1 内核线程</p><p>程序一般不会直接使用内核线程，而是使用内核线程的一种高级接口——轻量级进程（Light Weight Process，LWP），轻量级进程就是我们通常意义上所讲的线程，由于每个轻量级进程都由一个内核线程支持，因此只有先支持内核线程，才能有轻量级进程。这种轻量级进程与内核线程之间1：1的关系称为一对一的线程模型。</p><p><img src="/image/jvm/jvm-ql-nh.png" alt="轻量级进程与内核线程"></p><p>由于内核线程的支持，每个轻量级进程都成为一个独立的调度单元，即使其中某一个轻量级进程在系统调用中被阻塞了，也不会影响整个进程继续工作。</p><p>由于内核线程的支持，每个轻量级进程都成为一个独立的调度单元，即使其中某一个轻量级进程在系统调用中被阻塞了，也不会影响整个进程继续工作。轻量级进程也具有它的局限性：首先，由于是基于内核线程实现的，所以各种线程操作，如创建、析构及同步，都需要进行系统调用。而系统调用的代价相对较高，需要在用户态（User Mode）和内核态（Kernel Mode）中来回切换。其次，每个轻量级进程都需要有一个内核线程的支持，因此轻量级进程要消耗一定的内核资源（如内核线程的栈空间），因此一个系统支持轻量级进程的数量是有限的。</p><p>1.2 用户线程实现</p><p>使用用户线程实现的方式被称为1：N实现。广义上来讲，一个线程只要不是内核线程，都可以认为是用户线程（User Thread，UT）的一种，因此从这个定义上看，轻量级进程也属于用户线程，但轻量级进程的实现始终是建立在内核之上的，许多操作都要进行系统调用，因此效率会受到限制，并不具备通常意义上的用户线程的优点。</p><p><img src="/image/jvm/jvm-jc-yhxc.png" alt="进程与用户线程之间1：N的关系"></p><p>而狭义上的用户线程指的是完全建立在用户空间的线程库上，系统内核不能感知到用户线程的存在及如何实现的。用户线程的建立、同步、销毁和调度完全在用户态中完成，不需要内核的帮助。如果程序实现得当，这种线程不需要切换到内核态，因此操作可以是非常快速且低消耗的，也能够支持规模更大的线程数量，部分高性能数据库中的多线程就是由用户线程实现的。这种进程与用户线程之间1：N的关系称为一对多的线程模型。</p><p>用户线程的优势在于不需要系统内核支援，劣势也在于没有系统内核的支援，所有的线程操作都需要由用户程序自己去处理。</p><p>1.3 混合实现</p><p>线程除了依赖内核线程实现和完全由用户程序自己实现之外，还有一种将内核线程与用户线程一起使用的实现方式，被称为N：M实现。在这种混合实现下，既存在用户线程，也存在轻量级进程。用户线程还是完全建立在用户空间中，因此用户线程的创建、切换、析构等操作依然廉价，并且可以支持大规模的用户线程并发。</p><p>而操作系统支持的轻量级进程则作为用户线程和内核线程之间的桥梁，这样可以使用内核提供的线程调度功能及处理器映射，并且用户线程的系统调用要通过轻量级进程来完成，这大大降低了整个进程被完全阻塞的风险。在这种混合模式中，用户线程与轻量级进程的数量比是不定的，是N：M的关系。</p><p><img src="/image/jvm/jvm-hhxc.png" alt="混合线程"></p><p>许多UNIX系列的操作系统，如Solaris、HP-UX等都提供了M：N的线程模型实现。在这些操作系统上的应用也相对更容易应用M：N的线程模型。</p><p>1.4 Java线程的实现</p><p>Java线程在早期的Classic虚拟机上（JDK 1.2以前），是基于一种被称为“绿色线程”（Green Threads）的用户线程实现的，但从JDK 1.3起，“主流”平台上的“主流”商用Java虚拟机的线程模型普遍都被替换为基于操作系统原生线程模型来实现，即采用1：1的线程模型。以HotSpot为例，它的每一个Java线程都是直接映射到一个操作系统原生线程来实现的，而且中间没有额外的间接结构，所以HotSpot自己是不会去干涉线程调度的。</p><p>操作系统支持怎样的线程模型，在很大程度上会影响上面的Java虚拟机的线程是怎样映射的，这一点在不同的平台上很难达成一致，因此《Java虚拟机规范》中才不去限定Java线程需要使用哪种线程模型来实现。</p><ol start="2"><li>Java线程调度<br>线程调度是指系统为线程分配处理器使用权的过程，调度主要方式有两种，分别是协同式（Cooperative Threads-Scheduling）线程调度和抢占式（Preemptive Threads-Scheduling）线程调度。</li></ol><ul><li><p>如果使用协同式调度的多线程系统，线程的执行时间由线程本身来控制，线程把自己的工作执行完了之后，要主动通知系统切换到另外一个线程上去。（例如Lua语言中“协同例程”）。好处是简单易用，坏处是线程不会通知系统进行线程切换，执行时间不可控制。</p></li><li><p>如果使用抢占式调度的多线程系统，那么每个线程将由系统来分配执行时间，线程的切换不由线程本身来决定。譬如在Java中，有Thread::yield()方法可以主动让出执行时间，但是如果想要主动获取执行时间，线程本身是没有什么办法的。虽然说Java线程调度是系统自动完成的，但是我们仍然可以“建议”操作系统给某些线程多分配一点执行时间，另外的一些线程则可以少分配一点——这项操作是通过设置线程优先级来完成的</p></li></ul><p>优先级配置如下：<br><img src="/image/jvm/jvm-thread-yxj.png" alt="线程优先级"></p><ol start="3"><li>状态转换<br>Java语言定义了6种线程状态，在任意一个时间点中，一个线程只能有且只有其中的一种状态，并<br>且可以通过特定的方法在不同状态之间转换。这6种状态分别是：</li></ol><ul><li>新建（New）：创建后尚未启动的线程处于这种状态。</li><li>运行（Runnable）：包括操作系统线程状态中的Running和Ready，也就是处于此状态的线程有可能正在执行，也有可能正在等待着操作系统为它分配执行时间。</li><li>无限期等待（Waiting）：处于这种状态的线程不会被分配处理器执行时间，它们要等待被其他线程显式唤醒。以下方法会让线程陷入无限期的等待状态：<ul><li>没有设置Timeout参数的Object::wait()方法；</li><li>没有设置Timeout参数的Thread::join()方法；</li><li>LockSupport::park()方法。</li></ul></li><li>限期等待（Timed Waiting）：处于这种状态的线程也不会被分配处理器执行时间，不过无须等待被其他线程显式唤醒，在一定时间之后它们会由系统自动唤醒。以下方法会让线程进入限期等待状态：<ul><li>Thread::sleep()方法；</li><li>设置了Timeout参数的Object::wait()方法；</li><li>设置了Timeout参数的Thread::join()方法；</li><li>LockSupport::parkNanos()方法；</li><li>LockSupport::parkUntil()方法</li></ul></li><li>阻塞（Blocked）：线程被阻塞了，“阻塞状态”与“等待状态”的区别是“阻塞状态”在等待着获取到一个排它锁，这个事件将在另外一个线程放弃这个锁的时候发生；而“等待状态”则是在等待一段时间，或者唤醒动作的发生。在程序等待进入同步区域的时候，线程将进入这种状态。</li><li>结束（Terminated）：已终止线程的线程状态，线程已经结束执行。</li></ul><p>转换关系如下：<br><img src="/image/jvm/jvm-xczt.png" alt="线程状态转换关系"></p><h1 id="四、Java与协程"><a href="#四、Java与协程" class="headerlink" title="四、Java与协程"></a>四、Java与协程</h1><p>在Web应用要求越来越高（复杂、响应速度要求）、分布式架构悄然兴起的时代背景下，Java 1:1 的内核线程模型已经无法适应当前的主流架构。传统的Java Web服务器的线程池的容量通常在几十个到两百之间，当程序员把数以百万计的请求往线程池里面灌时，系统即使能处理得过来，但其中的切换损耗也是相当可观的。</p><ol><li>中断的损耗</li></ol><p>内核线程的调度成本主要来自于用户态与核心态之间的状态转换，而这两种状态转换的开销主要来自于响应中断、保护和恢复执行现场的成本。如果发生了一次线程切换，如<code>线程A -&gt; 系统中断 -&gt; 线程B</code>。</p><p>处理器要去执行线程A的程序代码时，并不是仅有代码程序就能跑得起来，程序是数据与代码的组合体，代码执行时还必须要有上下文数据（局部变量与资源、是方法的调用栈中存储的各类信息）的支撑。</p><p>当中断发生，从线程A切换到线程B去执行之前，操作系统首先要把线程A的上下文数据妥善保管好，然后把寄存器、内存分页等恢复到线程B挂起时候的状态，这样线程B被重新激活后才能仿佛从来没有被挂起过。这种保护和恢复现场的工作，免不了涉及一系列数据在各种寄存器、缓存中的来回拷贝，当然不可能是一种轻量级的操作。即便把线程改为采用用户线程，这部分开销也不能够省略掉。</p><ol start="2"><li>轻量级的协程</li></ol><p>有一些古老的操作系统（譬如DOS）是单人单工作业形式的，天生就不支持多线程，自然也不会有多个调用栈这样的基础设施。而早在那样的蛮荒时代，就已经出现了今天被称为栈纠缠（Stack Twine）的、由用户自己模拟多线程、自己保护恢复现场的工作模式。其大致的原理是通过在内存里划出一片额外空间来模拟调用栈，只要其他“线程”中方法压栈、退栈时遵守规则，不破坏这片空间即可，这样多段代码执行时就会像相互缠绕着一样，非常形象。</p><p>由于最初多数的用户线程是被设计成协同式调度（Cooperative Scheduling）的，所以它有了一个别名——“协程”（Coroutine）。又由于这时候的协程会完整地做调用栈的保护、恢复工作，所以今天也被称为“有栈协程”（Stackfull Coroutine），起这样的名字是为了便于跟后来的“无栈协程”（Stackless Coroutine）区分开。</p><p>协程的主要优势是轻量，无论是有栈协程还是无栈协程，都要比传统内核线程要轻量得多。如果进0行量化的话，那么如果不显式设置-Xss或-XX：ThreadStackSize，则在64位Linux上HotSpot的线程栈容量默认是1MB，此外内核数据结构（Kernel Data Structures）还会额外消耗16KB内存。与之相对的，一个协程的栈通常在几百个字节到几KB之间，所以Java虚拟机里线程池容量达到两百就已经不算小了，而很多支持协程的应用中，同时并存的协程数量可数以十万计。</p><p>协程当然也有它的局限，需要在应用层面实现的内容（调用栈、调度器这些）特别多。</p><ol start="3"><li>Java的解决方案</li></ol><p>对于有栈协程，有一种特例实现名为纤程（Fiber），这个词最早是来自微软公司，后来微软还推出过系统层面的纤程包来方便应用做现场保存、恢复和纤程调度。OpenJDK在2018年创建了Loom项目，也是为了应对如今高并发的场景。</p><p>Loom项目背后的意图是重新提供对用户线程的支持，会有两个并发编程模型在Java虚拟机中并存，可以在程序中同时使用。</p><p>在新并发模型下，一段使用纤程并发的代码会被分为两部分——执行过程（Continuation）和调度器（Scheduler）。执行过程主要用于维护执行现场，保护、恢复上下文状态，而调度器则负责编排所有要执行代码的顺序。将调度程序与执行过程分离的好处是：用户可以选择自行控制其中的一个或者多个，而且Java中现有的调度器也可以被直接重用。事实上，Loom中默认的调度器就是原来已存在的用于任务分解的Fork/Join池（JDK 7中加入的ForkJoinPool）。</p><p>Loom项目目前仍然在进行当中，还没有明确的发布日期。如果现在就想尝试协程，那可以在项目中使用Quasar协程库，这是一个不依赖Java虚拟机的独立实现的协程库。</p><h1 id="五、相关资料"><a href="#五、相关资料" class="headerlink" title="五、相关资料"></a>五、相关资料</h1><blockquote><p>《深入理解Java虚拟机：JVM高级特性与最佳实践（第3版）》</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;并发处理的广泛应用是Amdahl定律代替摩尔定律成为计算机性能发展源动力的根本原因，也是人类压榨计算机运算能力的最有力武器。&lt;/p&gt;
&lt;p&gt;在许多场景下，让计算机同时去做几件事情，不仅是因为计算机的运算能力强大了，还有一个很重要的原因是计算机的运算速度与它的存储和通信子系统</summary>
      
    
    
    
    
    <category term="jdk" scheme="http://zws6672.top/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>FMI2.0 ———— 	模型交换</title>
    <link href="http://zws6672.top/2021/05/25/fmi-modelexchange/"/>
    <id>http://zws6672.top/2021/05/25/fmi-modelexchange/</id>
    <published>2021-05-25T09:43:04.000Z</published>
    <updated>2021-06-10T05:33:55.659Z</updated>
    
    <content type="html"><![CDATA[<p>本文是来自于FMI2.0规范的第三章模型交换的译文，基于机翻与个人理解修订而成。</p><style>table th:first-of-type {    width: 10%;}</style><h1 id="一、模型交换的数学描述"><a href="#一、模型交换的数学描述" class="headerlink" title="一、模型交换的数学描述"></a>一、模型交换的数学描述</h1><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>下图包含了访问C程序动态系统的方程的接口描述，示意图如下</p><p><img src="/image/co-simulation/me-view.png" alt="接口示意图"></p><p>模型交换接口的目标是用数值方法求解由微分、代数和离散时间方程构成的系统。在2.0版本的接口中，需要处理在状态空间中由事件组成的常微分方程（缩写为“hybrid ODE”）。在FMU中可能包含代数方程系统；FMU也​​可能仅包含离散时间方程（例如描述采样数据控制器）。</p><p>自变量时间t属于元祖 t=(t<sub>R</sub>…t<sub>i</sub>)。其中tR为实数，t<sub>i</sub>为{0,1,2,…}；</p><ul><li>实数部分t<sub>R</sub>是FMU的自变量，用于描述事件之间模型的连续时间行为；</li><li>而整数部分t<sub>i</sub>是一个计数器，用于枚举在同一连续时间中发生的事件，该时间定义在文献中也称为“超密集时间”，参见（Lee and Zheng 2007）。</li></ul><blockquote><p>ODE意为常微分方程，hybrid ODE 意为 混合常微分方程<br>超密集时间（super dense time）：按我的理解是在一个时间段中，存在多个时间点，每个时间点的间隔是毫秒甚至微秒级的，可以称之为超密集时间。</p></blockquote><p>相关符号的含义如下<br><img src="/image/co-simulation/me-t-symbol.png" alt="记号"></p><hr><h3 id="事件-Event"><a href="#事件-Event" class="headerlink" title="事件(Event)"></a>事件(Event)</h3><p>FMI支持的混合ODE被描述为分段连续时间系统，不连续性可能发生在T<sub>0</sub>….T<sub>i</sub>时刻，其中T<sub>i</sub> &lt; T<sub>i+1</sub>。这些时刻称为“事件”，事件可以被预先声明（定时器），也可以隐式定义（状态、步长事件）。</p><p>在两个事件间，变量的值是连续的或不变的：如果变量仅在事件瞬间更改其值，则该变量称为离散时间；否则称为连续时间。只有实数变量可以是连续时间。以下变量索引用于描述相应变量的时序行为（例如，v<sub>d</sub>是离散时间变量）</p><ul><li>c：连续时间变量，取值范围为t<sub>i</sub><sup>+</sup> &lt;= t &lt;= <sup>-</sup>t<sub>i+1</sub></li><li>d：离散时间变量，只在时刻t<sub>i</sub>改变它的值</li><li>c+d： 连续时间变量以及离散时间变量的集合</li></ul><p>相关例子如下：</p><p><img src="/image/co-simulation/me-event.png" alt="记号"></p><p>瞬时事件由以下条件之一定义，这些条件给出了最小的时刻（event instant）t<sub>i</sub>：</p><ol><li>外部事件(external event)：参数变化导致分段不连续</li></ol><ul><li>离散时间的输入值发生变化</li><li>连续时间输入变量存在一个非连续的变化</li><li>可调参数（tunable）发生了变化</li></ul><p>这几个被称之为外部事件。【如果A连接到B，当A触发了事件，那么A所有的输出在当前时间点是非连续的。因此，如果A的输出连接到B，也建议为B触发一个外部事件，这意味着在B上调用fmi2EnterEventMode】</p><ol start="2"><li><p>时间事件（time event）：当前瞬间取值依赖于前一个取值<br>预定义的 时刻 t<sub>i</sub> =（T<sub>next</sub>(t<sub>i-1</sub>), 0) 取决于FMU的前一个 时刻 t<sub>i-1</sub>，这样的事件称之为时间事件。</p></li><li><p>状态事件：指示器z取值发生变化<br>事件指示器 z<sub>j</sub>(t)的取值范围发生类似从z<sub>j</sub> &gt; 0修改为z<sub>j</sub> &lt;= 0的变化，这种事件称之为状态事件。所有事件指示器都是分段连续的，并集中在一个实数向量z（t）中。</p></li></ol><p><img src="/image/co-simulation/me-state-event.png" alt="状态事件"></p><ol start="4"><li>步进事件（step）:</li></ol><p>在完成的积分器步进中可能发生的事件。它不是由精确的时间或条件定义的，因此通常不是由用户定义的。程序可以使用它，例如在不同状态之间动态切换。步进事件比状态事件的处理效率高得多，因为在完成积分器步进时执行检查后才触发事件，而状态事件需要一个搜索过程。</p><p>在积分器的每个步中，都必须调用 fmi2CompletedIntegratorStep（函数标志ModelDescription.completedIntegratorStepNotNeeded = false）；如果返回参数 <code>nextMode = EventMode</code>，则此时会发生一个事件，称之为步进事件。【步进事件用于动态的修改FMU内部模型（连续）状态，因为以前的状态在数值上不再适用】</p><blockquote><p>积分器（Integrator、数值积分）：积分器是软件中的一部分。在一些计算物理的电脑模拟软件中，像是数值天气预报、分子动力学、飞行模拟器、油层模拟法、隔音屏障设计、建筑声学及电子电路仿真等应用中，积分器是可以用离散步骤计算积分的数值方法。</p></blockquote><p>FMI模型交换模型由以下变量描述：</p><table><thead><tr><th align="center">变量</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">t</td><td align="center">自变量时间T，使用causality = “independent”定义变量</td></tr><tr><td align="center">v</td><td align="center">所有暴露变量的向量</td></tr><tr><td align="center">p</td><td align="center">在仿真过程中恒定的参数，不带下标的表示自变量（causality = “parameter”）；因变量（causality = “calculatedParameter”）用p<sub>calculated</sub>表示</td></tr><tr><td align="center">u(t)</td><td align="center">输入变量（causality = “input”、variability= “discrete” or “ continuous”），这些变量的值在模式之外定义</td></tr><tr><td align="center">u(t)</td><td align="center">输出变量（causality = “output”、variability= “discrete” or “ continuous”），这些变量的值在FMU中计算，并被设计用于模型连接中。因此，输出变量可以在环境中用作其他FMU或其他子模型的输入值。</td></tr><tr><td align="center">w(t)</td><td align="center">无法用于FMU连接的FMU的局部变量(causality = “local”)。</td></tr><tr><td align="center">z(t)</td><td align="center">用于定义状态事件的实际连续时间变量的向量</td></tr><tr><td align="center">x<sub>c</sub>(t)</td><td align="center">代表连续时间状态的实际连续时间变量的向量.为了符号上的方便，连续时间状态在概念上被视为另一种类型的变量，作为以下数学描述的输出或局部变量。实际上，连续时间状态是FMU的输出y或局部变量w的一部分</td></tr><tr><td align="center">x<sub>d</sub>(t)<br><sup>.<sup>x<sub>d</sub>(t)</sup></sup></td><td align="center">第一个符号表示（内部）离散时间变量（任何类型）的向量，表示离散状态；第二个表示前离散时间变量的向量</td></tr><tr><td align="center">T<sub>next</sub>(t<sub>i</sub>)</td><td align="center">在初始化或事件瞬间，FMU可以定义下一个瞬间</td></tr><tr><td align="center">r(t<sub>i</sub>)</td><td align="center">布尔变量的向量</td></tr></tbody></table><hr><h3 id="模式（Mode）"><a href="#模式（Mode）" class="headerlink" title="模式（Mode）"></a>模式（Mode）</h3><ol><li>模式分类</li></ol><p>计算FMI模型的解意味着将求解过程划分为不同的阶段，并且在每个阶段都使用不同的方程式和求解方法，可根据以下模式划分阶段：</p><ul><li><p>初始化模式：该模式用于在开始时间t<sub>0</sub>时，通过其它模式中不存在的额为方程式来计算 连续时间状态x<sub>c</sub>(t<sub>0</sub>) 、（内部）前离散时间状态<sup>.</sup>x<sub>d</sub>(t<sub>0</sub>) 的初始值。（例如，用于定义状态或状态导数的起始值的方程式）</p></li><li><p>连续时间模式：通过数值求解常微分方程和代数方程，此模式用于计算事件之间所有（实时）连续时间变量的值。在此阶段中，所有离散时间变量都是固定的，并且不分析相应的离散时间方程。</p></li><li><p>事件模式：此模式用于为所有连续时间变量、所有在当前时刻<em>t</em>以及在前一时刻<sup>.</sup>t 的离散时间变量计算新值。这是通过求解由所有连续时间方程和所有活动离散时间方程组成的代数方程实现的。在FMI 2.0中，没有对应机制能够提供事件发生时 离散时间变量是否变化的信息。因此，在环境中必须假定某个瞬时事件总是计算所有离散时间变量，尽管在FMU内部只有一个新的子集可能会被计算出来。</p></li></ul><ol start="2"><li>代数环</li></ol><p>将FMU连接在一起时会出现回路结构，这会加大求解模型的难度。因为在实数变量、布尔变量或整数变量中可能存在线性或非线性代数方程组。为了有效地解决FMU中的这类方程系统，需要声明依赖性信息（例如，其输出直接取决于输入）。在xml文件下的元素<modelstructure>中，可以有选择性的提供此数据。如果未提供此数据，则必须假定最坏的情况（例如，所有输出变量都代数依赖于所有输入变量）</modelstructure></p><p><img src="/image/co-simulation/ms-algebraicloop.png" alt="代数环"></p><p>在上图中，FMU1和FMU2通过适合的fmi2SetXXX、fmi2GetXXX调用序列来调用可计算的FMU变量，可以计算FMU变量。在下图中，FMU3和FMU4通过存在的“真实”代数环连接。这类循环可以使用牛顿迭代法解决。在每个迭代中，求解器提供的迭代变量u<sub>4</sub>以及通过fmi2SetXXX 和 fmi2GetXXX的显示序列调用的残差都会被计算并提供给求解器。基于残差，提供u<sub>4</sub>的新值。当残差趋向于0时，迭代会被终止。</p><p>这种类型的代数环会在初始化模式、事件模式、连续-时间模式等模式下发生。由于在每个模式中都会计算不同的变量，并且与其他两个模式相比，在初始化模式中变量计算的因果关系可能会有所不同，因此可能有必要在不同的模式中解决不同种类的循环。</p><p>如下表所示，函数fmi2SetXXX是函数fmi2SetReal，fmi2SetBoolean，fmi2SetInteger和fmi2SetString的缩写。函数fmi2GetXXX是函数fmi2GetReal，fmi2GetBoolean，fmi2GetInteger和fmi2GetString的缩写。</p><p><img src="/image/co-simulation/me-et.png" alt="相关公式"></p><p>在某个瞬时事件中，离散系统的代数方程可以描述为 前一个离散时间状态<sup>.</sup>x<sub>d</sub> 以及 离散时间输入 u<sub>d</sub>的函数。如果FMU被循环连接，则会迭代调用这些代数方程，直到找到解为止。如果实际离散时间状态x<sub>d</sub>和前离散时间状态<sup>.</sup>x<sub>d</sub> 不同，则更新离散时间状态；时间的整数部分将增加，并执行新的事件迭代。</p><p>FMU在 初始化模式 下使用init方法进行初始化。该函数的输入参数包括输入变量（causality =“input”）和自变量（causality =“independent”；通常为默认值“time”）。所有的变量都具有一个初始化（initial = ”exact“），这是为了在初始时间 t<sub>0</sub> 中，计算连续时间状态和输出变量。例如，可通过为状态提供初始值或声明状态导数为零来定义初始化。</p><p>初始化本身是一个复杂的话题，而且还要求FMU在初始化模式下解决FMU内部明确定义的初始化问题。调用<code>fmi2ExitInitializationMode</code>之后，FMU隐式处于事件模式，所有的离散时间变量和连续时间变量都会在初始化时间实例中被计算处理。如果喜欢，还可以依靠代数循环进行迭代。完成后必须调用fmi2NewDiscreteStates，并且根据返回参数的值，FMU要么在初始时刻继续事件迭代、要么切换到连续时间模式。</p><ul><li>切换到连续时间模式后，开始计算积分；在此阶段中，将计算连续状态的导数。如果FMU和子模型连接在一起，则这些模型的输入是其他模型的输出，因此必须计算相应的FMU输出。每当存储结果值时，通常在模拟开始之前定义的输出点上，都必须调用与所需变量有关的fmi2GetXXX函数。</li></ul><p>事件时刻由时间、状态/步进事件/环境触发的外部事件确定。为了确定状态事件，必须在每个完成的积分器步骤中查询事件指示器。一旦事件指示符发出信号指示其域的更改，将在前一个积分器步骤与实际完成的积分器步骤之间执行随时间的迭代，以便确定达到一定精度的域更改的瞬间。</p><p>触发事件后，需要将FMU切换到事件模式。在这种模式下，可以解决连接的FMU上的方程组（类似于连续时间模式）。一旦达到收敛，就必须调用fmi2NewDiscreteStates（..）来增加超密集时间。根据离散时间模型，可能需要新的事件迭代（例如，因为FMU在内部描述了状态机，并且转换仍然可以触发，但是必须考虑新的输入）。</p><hr><h1 id="二、FMI应用程序编程接口"><a href="#二、FMI应用程序编程接口" class="headerlink" title="二、FMI应用程序编程接口"></a>二、FMI应用程序编程接口</h1><p>本节包含接口说明，用于声明C程序中的不同实体部分</p><h3 id="提供自变量（Independent-Variables）和缓存的重新初始化（Re-initialization）"><a href="#提供自变量（Independent-Variables）和缓存的重新初始化（Re-initialization）" class="headerlink" title="提供自变量（Independent Variables）和缓存的重新初始化（Re-initialization）"></a>提供自变量（Independent Variables）和缓存的重新初始化（Re-initialization）</h3><p>根据实际情况，需要计算不同的变量；而为了提高效率，需要接口仅用于计算当前上下文中所需的变量。例如，在进行积分迭代的过程中，仅需要计算状态导数，前提是模型的输出未连接。有可能在同一时刻，也需要其它的变量。</p><p>如果积分步长已经完成，则还需要计算事件指示（event indicator）函数。为了提高效率，在调用计算事件指示符函数时，如果状态导数已经在之前时刻进行了计算，则不要重新计算状态导数。这意味着状态导数支持重用，此功能被称为“变量缓存”。</p><p>当输入参数（例如：时间或状态）发生改变，缓存需要模型评估可以探测到。这是通过用函数调用显式设置它们来实现的，因为每个这样的函数调用调用的信号（signal）恰好是相应变量的变化。因此，本节包含用于设置方程估计函数的输入参数的函数。这对于时间和状态变量来说没有问题，但是参数和输入则涉及更多，因为后者可能具有不同的数据类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 设置新的时刻，重新初始化依赖时间的变量缓存，新的时间值需要与当前时间不一致（仅依赖于常量或参数的变量不需要在后面重新计算，可以重用先前计算的值）</span><br><span class="line">fmi2Status fmi2SetTime(fmi2Component c, fmi2Realtime);</span><br><span class="line"></span><br><span class="line">-- 设置一个新的（连续）状态向量，重新初始化依赖状态的变量缓存</span><br><span class="line">-- nx 表示向量x的长度，目的是用于检测；仅依赖于常量、参数、时间和输入的变量不需要在后续中重新计算，但可以重复使用先前计算的值</span><br><span class="line">-- 连续状态可能在事件模式中更改</span><br><span class="line">fmi2Status fmi2SetContinuousStates(fmi2Component c, constfmi2Realx[], size_tnx);</span><br><span class="line"></span><br><span class="line">-- 为（独立）参数、起始值、输入和变量缓存重新初始化 设置新值。</span><br><span class="line">fmi2Status fmi2SetXXX(..)</span><br></pre></td></tr></table></figure><hr><h3 id="模型方程评估（Evaluation-of-Model-Equations）"><a href="#模型方程评估（Evaluation-of-Model-Equations）" class="headerlink" title="模型方程评估（Evaluation of Model Equations）"></a>模型方程评估（Evaluation of Model Equations）</h3><p>本小节包含核心函数用于估计模型方程。下列函数之一在被调用前，需要调用合适的（上一小节）函数为当前的模型方程设置输入参数。</p><ol><li>fmi2EnterEventMode（进入事件模式）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 模型从连续时间模式进入事件模式，离散时间方程可能变为活动状态（并且关系未“冻结”）。</span><br><span class="line">fmi2Status fmi2EnterEventMode(fmi2Component c);</span><br></pre></td></tr></table></figure><ol start="2"><li>fmi2NewDiscreteStates（递增超密集时间  (t<sub>R</sub>,t<sub>I</sub>) ==&gt; t<sub>R</sub>,t<sub>I+1</sub>)）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 模型从连续时间模式进入事件模式，离散时间方程可能被激活（不是冻结状态（frozen），可以与其它fmu交互）</span><br><span class="line">fmi2Status fmi2NewDiscreteStates(fmi2Component  c , fmi2EventInfo* fmi2eventInfo);</span><br><span class="line"></span><br><span class="line">-- 表示事件信息</span><br><span class="line">typedef struct&#123;</span><br><span class="line">// 需要新的离散状态</span><br><span class="line">fmi2Boolean newDiscreteStatesNeeded;</span><br><span class="line">//终止仿真</span><br><span class="line">fmi2Boolean terminateSimulation; </span><br><span class="line">//连续状态的标称改变</span><br><span class="line">fmi2Boolean nominalsOfContinuousStatesChanged;</span><br><span class="line">//连续状态的标称值改变</span><br><span class="line">fmi2Boolean valuesOfContinuousStatesChanged; </span><br><span class="line">// 如果设置nextEventTimeDefined=fmi2True，则使用nextEventTime显示下一个事件时间</span><br><span class="line">fmi2Boolean nextEventTimeDefined;  </span><br><span class="line">fmi2Real nextEventTime;</span><br><span class="line">&#125; fmi2EventInfo;</span><br></pre></td></tr></table></figure><blockquote><p>超密集时间：在一个事件中，使用迭代器计数用于表示事件的精确描述，即 t = (t<sub>R</sub>,t<sub>I</sub>)。</p></blockquote><p>fmi2EventInfo 的参数如下：</p><ul><li>FMU 处于事件模式，在这个函数调用中递增超密集时间。在调用<code>fmi2NewDiscreteStates</code>函数之前，如果超密集时间的值为(t<sub>R</sub>,t<sub>I</sub>)；那么调用之后的时间是(t<sub>R</sub>,t<sub>I+1</sub>)。如果返回参数(fmi2eventInfo-&gt;<code>newDiscreteStatesNeeded=fmi2True</code>)，那么FMU仍然需要保持为事件模式，还需要为FMU设置新的输入、计算和获取输出以及重新调用<code>fmi2NewDiscreteStates</code>函数。这还取决于其他FMU的连接，环境应当为：<ul><li>如果至少有一个FMU返回参数 <code>TerminateSimulation=fmi2True</code>，即有模块表示可以终止模型交换了；则调用<code>fmi2Terminate</code>函数；</li><li>如果所有FMU返回<code>newDiscreteStatesNeeded=fmi2False</code>，则调用<code>fmi2EnterContinuousTimeMode</code>。</li><li>否则，保持事件模式</li></ul></li><li>如果 <code>nominalsOfContinuousStatesChanged=fmi2True</code>，则状态的值由于函数调用而发生了变化，可以使用 fmi2GetNominalsOfContinuousStates 进行查询</li><li>如果 <code>valuesOfContinuousStatesChanged=fmi2True</code>，则由于函数调用，连续状态向量中至少一个元素已更改其值。可以使用 fmi2GetContinuousStates 查询状态的新值。如果连续状态向量的任何元素均未更改其值，则 valuesOfContinuousStatesChanged 必须返回fmi2False（如果在这种情况下将返回fmi2True，则可能发生无限事件循环）。</li><li>如果 <code>nextEventTimeDefined=fmi2True</code>，则模拟将最大次数的进行积分，直到 <code>time=nextEventTime</code>，并且此时应调用<code>fmi2EnterEventMode</code>。如果由于状态事件而在<code>nextEventTime</code>之前停止积分，那么nextEventTime的定义将过时。</li></ul><p><img src="/image/co-simulation/fmi2NewDiscreteStates.png" alt="fmi2NewDiscreteStates"></p><ol start="3"><li>fmi2EnterContinuousTimeMode（进入连续时间模式）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmi2Status fmi2EnterContinuousTimeMode(fmi2Component c);</span><br></pre></td></tr></table></figure></li></ol><p>模型进入连续时间模式，所有离散时间方程变为非活动状态，所有关系都被“冻结”。从事件模式更改为（在所有涉及的FMU和其他模型的事件模式中的全局事件迭代已收敛之后）连续时间模式时，必须调用此函数。</p><p>使用这个函数的目的是为了：</p><ul><li>将FMU内部结果存储在文件中，可以存储初始化后的结果和已被处理的事件；</li><li>如果FMU包含动态变化的状态，新状态可能选择这个函数执行。</li></ul><ol start="4"><li>fmi2CompletedIntegratorStep（完成积分器步长）</li></ol><p>如果<code>completedIntegratorStepNotNeeded=false</code>，则需要在每次积分器步长完成后调用这个函数，用于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fmi2Status fmi2CompletedIntegratorStep(</span><br><span class="line">// 表示fmu实例</span><br><span class="line">fmi2Component c,</span><br><span class="line">// 表示在本次模拟运行中，不再对上一个时刻调用 fmi2SetFMUState 函数（FMU可以使用此标志刷新结果缓冲区）</span><br><span class="line">fmi2Boolean  noSetFMUStatePriorToCurrentPoint, </span><br><span class="line">// 表示将进入 fmi2EnterEventMode 函数</span><br><span class="line">fmi2Boolean* enterEventMode, </span><br><span class="line">// 表示将调用 terminateSimulation 函数终止模拟</span><br><span class="line">fmi2Boolean* terminateSimulation</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果<code>enterEventMode = fmi2False并且 terminateSimulation = fmi2False</code>，则FMU保持在连续时间模式，而无需再次调用fmi2EnterContinuousTimeMode函数。</p><p>当积分器步长完成并且在随后修改状态（例如通过BDF方法进行校正）时，在调用<code>fmi2CompletedIntegratorStep(..)</code>函数之前，必须调用<code>fmi2SetContinuousStates(..)</code>函数更新状态。</p><p>当积分步长完成且一个或多个事件指示器改变符号（相对于先前完成的积分步长来说）时，则积分器或者环境必须确定符号改变时最接近<br>的上一个完成时间，这个时间必须具有一定精度（通常是计算机中最小的浮点数的小倍数）。这通常是通过迭代来执行的，其中时间是变化的，并且迭代期间所需的状态变量是通过插值确定的。函数 <code>fmi2CompletedIntegratorStep</code>必须在此状态事件定位程序之后调用，而不是在积分算法成功计算出时间步长之后调用。该函数调用的预期目的是向FMU指示，在此阶段，所有输入和状态变量都具有有效（接受）值。</p><p>调用<code>fmi2CompletedIntegratorStep</code>之后，仍然允许其返回时间（调用fmi2SetTime）并使用fmi2GetXXX查询前时刻中变量的值（例如，确定输出点处的非状态变量的值）：但是，它不是允许在上一个完成的``IntegratorStep或上一个fmi2EnterEventMode调用之前返回时间。</p><p>在以下几种情况中，需要调用这个函数：</p><ul><li>延迟：delay(…)操作中使用的所有变量都存储在适当的缓冲区中，并且函数返回 nextMode = fmi2ContinuousTimeMode</li><li>动态状态选择：检查动态选择的状态在数值上是否仍然合适。如果合适，则函数返回enterEventMode = fmi2False，否则返回enterEventMode=fmi2True。在第二种情况下，必须调用fmi2EnterEventMode（..），然后通过fmi2NewDiscreteStates（..）函数动态更改状态。</li></ul><p>注意：此函数不用于检测时间或状态事件。例如，通过将前一个事件的指示符与<code>fmi2CompletedIntegratorStep（..）</code>的当前调用进行比较，来检测时间或状态事件。这些类型的事件是在环境中检测到的，在这种情况下，环境必须调用<code>fmi2EnterEventMode（..）</code>，而与<code>fmi2CompletedIntegratorStep（..）</code>的返回参数<code>enterEventMode</code>是fmi2True还是fmi2False无关。</p><blockquote><p>积分步长：积分区间[a,b]等分为n段,积分步长h=(b-a)/n<br>BDF方法：时间步相关的算法</p></blockquote><ol start="5"><li>fmi2GetDerivatives、fmi2GetEventIndicators（获取导数、事件指示符）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmi2Status fmi2GetDerivatives    (fmi2Component c, fmi2Real derivatives[], size_t nx); </span><br><span class="line">fmi2Status fmi2GetEventIndicators(fmi2Component c, fmi2Real eventIndicators[], size_t ni)</span><br></pre></td></tr></table></figure></li></ol><p>在当前时刻和当前状态下，计算状态导数和事件指示符：</p><ul><li>导数作为带有“ nx”个元素的向量返回，事件指示符作为带有“ ni”个元素的向量返回。</li><li>当事件指示器的域从z<sub>j</sub> &gt; 0变为z<sub>j</sub> ≤0或相反操作时，将触发状态事件。 FMU必须保证在事件发生时重启z<sub>j</sub>≠0，例如通过以较小值改变z<sub>j</sub>来保证。此外，z<sub>j</sub>应在FMU中使用其标称值进行缩放（因此，返回的矢量“ eventIndicators”的所有元素应按“ one”的顺序排列）。</li></ul><p>导数向量中元素的顺序与状态向量的顺序相同（例如，导数[2]是x [2]的导数），而事件指示器不一定与模型描述文件中的变量相关。</p><blockquote><p>注：fmi2Status = fmi2Discard 对于上述两个函数来说都是可能的取值。</p></blockquote><ol start="6"><li>fmi2GetContinuousStates（连续状态）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmi2Status fmi2GetContinuousStates(fmi2Component c, fmi2Realx[], size_t nx);</span><br></pre></td></tr></table></figure></li></ol><p>返回新的（连续）状态向量x。如果函数以 <code>eventInfo-&gt; valuesOfContinuousStatesChanged = fmi2True</code>返回（标识（连续时间）状态向量已更改），则必须在调用函数 fmi2EnterContinuousTimeMode 之后直接调用此函数。</p><ol start="7"><li>fmi2GetNominalsOfContinuousStates</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmi2Status fmi2GetNominalsOfContinuousStates(fmi2Component c, fmi2Realx_nominal[],size_tnx);</span><br></pre></td></tr></table></figure><p>返回连续状态的标称值。如果此函数返回<code>eventInfo-&gt; nominalsOfContinuousStatesChanged = fmi2True</code>，则在调用函数 <code>fmi2NewDiscreteStates</code>之后应调用此函数，因为连续状态的标称值已更改[例如，因为连续状态与变量的关联由于内部动态状态选择而发生了变化。如果FMU没有与连续状态i有关的标称值信息，则应返回标称值x_nominal [i] = 1.0。注意，要求x_nominal [i]&gt; 0.0。 【通常，连续状态的标称值用于计算积分器所需的绝对公差：<code>absoluteTolerance[i] = 0.01*tolerance*x_nominal[i];</code>】</p><hr><h3 id="基于函数调用顺序的状态机"><a href="#基于函数调用顺序的状态机" class="headerlink" title="基于函数调用顺序的状态机"></a>基于函数调用顺序的状态机</h3><p>根据以下状态图,FMI的每个实现都必须支持的函数调用序列（以 UML 2.0 状态机的形式调用模型交换 C函数的序列）：</p><p><img src="/image/co-simulation/me-state-chart.png" alt="状态机"></p><p><img src="/image/co-simulation/ctm-em.png" alt="连续时间模式-事件模式"></p><p>定义状态图的最初目的是为了定义 FMI函数允许的调用顺序：</p><p>FMI不支持状态图不接受的调用顺序。对于这样的调用序列，FMU的行为是不确定的。例如，状态图表示当用于模型交换的FMU处于状态“连续时间模式”时，不支持对离散输入的fmi2SetReal调用。如果转换被标记为一个或多个函数名称（例如 fmi2GetReal、fmi2GetInteger），这意味着如果成功调用了这些函数中的任何一个，则会进行转换。注意，由于每个状态都是通过特定的函数调用（例如fmi2EnterEventMode）或特定的返回值（例如fmi2Fatal）输入的，因此FMU始终可以确定它处于哪种状态。</p><p>状态机的每个状态对应于仿真的特定阶段，如下所示</p><ol><li>instantiated(实例化)</li></ol><p>在这种状态下，可以设置起始值和估计值（initial =”exact/approx”的变量）</p><ol start="2"><li>Initialization Mode（初始化模式）<br>在此状态下，方程式可用于确定所有连续时间状态以及所有输出（可选：导出工具公开的其他变量）。可以通过fmi2GetXXX调用检索的变量为：</li></ol><ul><li>在xml文件中的<modelstructure> <initialunknowns>下定义的</initialunknowns></modelstructure></li><li>具有 causality =”output”的变量；可以设置为 initial =”exact” 的变量以及 variability =”input” 的变量。</li></ul><ol start="3"><li><p>Continuous-Time Mode（连续时间模式）<br>在这种状态下，连续时间模型方程处于活动状态，并执行了积分器步进。如果在完成积分器步进结束时，至少一个事件指示域被检测到发生了变化，则可以确定状态事件的事件时间。</p></li><li><p>Event Mode（事件模式）<br>如果在连续时间模式下触发了事件，则通过调用fmi2EnterEventMode进入事件模式。</p></li></ol><p>在这种模式下，所有的连续时间方程和离散时间方程都是有效的，并且可以计算和检索事件中的未知数。事件完全处理后，必须调用fmi2NewDiscreteStates函数并根据返回参数（newDiscreteStatesNeeded）决定保持状态图处于事件模式或切换到连续时间模式。当初始化模式以 <code>fmi2ExitInitializationMode</code>终止时，将直接进入事件模式，并根据在初始化模式下确定的初始连续时间状态来计算初始时间的连续时间和离散时间变量。</p><ol start="5"><li>terminated（终止）<br>在这种状态下，可以获取模拟的最后一次结果。</li></ol><blockquote><p>注1：仅在连续的时间间隔内才允许在时间上向后仿真。一旦发生事件（调用了fmi2EnterEventMode），就禁止时间向前回溯，因为fmi2EnterEventMode / fmi2NewDiscreteStates只能计算下一个离散状态，而不能计算前一个离散状态。<br>注2：在初始化，事件和连续时间模式期间，可以根据xml文件中元素<modelstructure>下定义的模型结构，使用<code>fmi2SetXXX</code>函数设置输入变量，并使用<code>fmi2GetXXX</code>函数互换获取输出变量。</modelstructure></p></blockquote><p>下表汇总了各个状态下允许的函数调用：<br>（黄色的仅适用于模型交换，而其它函数可使用于模型交换以及联合仿真）</p><p><img src="/image/co-simulation/me-allowed-function.png" alt="允许的函数调用"></p><p>“x”表示：在相应状态下允许调用<br>数字表示：如果指示的条件成立，则允许调用</p><ul><li>（1）variability ≠”constant”initial = “exact/approx”</li><li>（2）causality = “output/“ 或者 continuous-time 状态 或者状态导数 </li><li>（3）variability≠”constant” &amp; (hasinitial=”exact” || causality=”input”)</li><li>（4）causality = “input” || (causality = “parameter” &amp; variability = “tunable”)</li><li>（5）causality = “input” &amp; variability = “continuous”</li><li>（7）检索到的值仅可用于调试</li></ul><hr><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><p>模型交换的伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">m = M_fmi2Instantiate(&quot;m&quot;, ...)  // &quot;m&quot; 是实例名称</span><br><span class="line">                                 // &quot;M_&quot; 表示模型标识</span><br><span class="line">// 来自XML文件</span><br><span class="line">nx = ...         // 状态数量</span><br><span class="line">nz = ...         // 事件标识数量</span><br><span class="line">Tstart = 0       // 开始时间</span><br><span class="line">Tend = 10        // 结束时间</span><br><span class="line">dt = 0.01        // 固定步长为 10 毫秒</span><br><span class="line"></span><br><span class="line">// 设置开始时间</span><br><span class="line">time = TStart</span><br><span class="line"></span><br><span class="line">// 设置所有变量的初始值 (&quot;ScalarVariable / &lt;type&gt; / start&quot;) 以及 设置time = Tstart</span><br><span class="line">M_fmi2SetReal/Integer/Boolean/String(m, ...)</span><br><span class="line"></span><br><span class="line">// 初始化</span><br><span class="line">// 确定连续和离散时间状态</span><br><span class="line">M_fmi2SetupExperiment(m, fmi2False, 0.0, Tstart, fmi2True, Tend)</span><br><span class="line">M_fmi2EnterInitializationMode(m)</span><br><span class="line">M_fmi2ExitInitializationMode(m)</span><br><span class="line"></span><br><span class="line">initialEventMode = fmi2True</span><br><span class="line">enterEventMode = fmi2False</span><br><span class="line">timeEvent = fmi2False</span><br><span class="line">stateEvent = fmi2False</span><br><span class="line">previous_z = zeros(nz)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 检索初始状态 x 以及 x的标称值（如果需要绝对公差）</span><br><span class="line">M_fmi2GetContinuousStates(m, x, nx)</span><br><span class="line">M_fmi2GetNominalsOfContinuousStates(m, x_nominal, nx)</span><br><span class="line"></span><br><span class="line">// 例如，在 t=Tstart 处检索解，用于输出</span><br><span class="line">M_fmi2GetReal/Integer/Boolean/String(m, ...)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">do</span><br><span class="line">  // 处理事件</span><br><span class="line">  if initialEventMode or enterEventMode or timeEvent or stateEvent then</span><br><span class="line">    if not initialEventMode then</span><br><span class="line">      M_fmi2EnterEventMode(m)</span><br><span class="line">    end if</span><br><span class="line">    // 事件迭代</span><br><span class="line">    eventInfo.newDiscreteStatesNeeded = fmi2True;</span><br><span class="line">    valuesOfContinuousStatesChanged   = fmi2False;</span><br><span class="line">    nominalsOfContinuousStatesChanged = fmi2False</span><br><span class="line">    while eventInfo.newDiscreteStatesNeeded loop</span><br><span class="line">      // 在超密集时间点设置输入</span><br><span class="line">      M_fmi2SetReal/Integer/Boolean/String(m, ...)</span><br><span class="line">      // 更新离散状态</span><br><span class="line">      M_fmi2NewDiscreteStates(m, &amp;eventInfo)</span><br><span class="line">      // 在超密集时间点获取输出</span><br><span class="line">      M_fmi2GetReal/Integer/Boolean/String(m, ...)</span><br><span class="line">      valuesOfContinuousStatesChanged = valuesOfContinuousStatesChanged or eventInfo.valuesOfContinuousStatesChanged;</span><br><span class="line">      nominalsOfContinuousStatesChanged = nominalsOfContinuousStatesChanged or eventInfo.nominalsOfContinuousStatesChanged;</span><br><span class="line">      if eventInfo.terminateSimulation then goto TERMINATE_MODEL</span><br><span class="line">    end while</span><br><span class="line"></span><br><span class="line">    // 进入连续时间模式</span><br><span class="line">    M_fmi2EnterContinuousTimeMode(m)</span><br><span class="line">    //在模拟（重新）开始时求解</span><br><span class="line">    M_fmi2GetReal/Integer/Boolean/String(m, ...)</span><br><span class="line">    if initialEventMode or valuesOfContinuousStatesChanged then</span><br><span class="line">      //模型发出状态值变化的信号，检索它们</span><br><span class="line">      M_fmi2GetContinuousStates(m, x, nx)</span><br><span class="line">    end if</span><br><span class="line"></span><br><span class="line">    if initialEventMode or nominalsOfContinuousStatesChanged then</span><br><span class="line">      // 状态的含义发生了变化；检索新的标称值</span><br><span class="line">      M_fmi2GetNominalsOfContinuousStates(m, x_nominal, nx)</span><br><span class="line">    end if</span><br><span class="line"></span><br><span class="line">    if eventInfo.nextEventTimeDefined then</span><br><span class="line">      tNext = min(eventInfo.nextEventTime, Tend)</span><br><span class="line">    else</span><br><span class="line">      tNext = Tend</span><br><span class="line">    end if</span><br><span class="line">    initialEventMode = fmi2False</span><br><span class="line">  end if</span><br><span class="line"></span><br><span class="line">  if time &gt;= Tend then</span><br><span class="line">   goto TERMINATE_MODEL</span><br><span class="line">  end if</span><br><span class="line"></span><br><span class="line">  // 计算导数</span><br><span class="line">  M_fmi2GetDerivatives(m, der_x, nx)</span><br><span class="line"></span><br><span class="line">  // 获取时间</span><br><span class="line">  h    = min(dt, tNext-time)</span><br><span class="line">  time = time + h</span><br><span class="line">  M_fmi2SetTime(m, time)</span><br><span class="line"></span><br><span class="line">  // 在 t=time 设置连续输入</span><br><span class="line">  M_fmi2SetReal(m, ...)</span><br><span class="line"></span><br><span class="line">  // 在 t=time 设置状态并执行一步</span><br><span class="line">  x = x + h * der_x // forward Euler method</span><br><span class="line">  M_fmi2SetContinuousStates(m, x, nx)</span><br><span class="line"></span><br><span class="line">  // 在 t=time 获取事件指标</span><br><span class="line">  M_fmi2GetEventIndicators(m, z, nz)</span><br><span class="line"></span><br><span class="line">  // 如果有的话，检测事件</span><br><span class="line">  timeEvent = time &gt;= tNext</span><br><span class="line">  stateEvent = sign(z) &lt;&gt; sign(previous_z) or previous_z != 0 &amp;&amp; z == 0</span><br><span class="line">  previous_z = z</span><br><span class="line"></span><br><span class="line">  // 通知模型接收积分步长</span><br><span class="line">  M_fmi2CompletedIntegratorStep(m, fmi2True, &amp;enterEventMode, &amp;terminateSimulation)</span><br><span class="line">  // 获取连续输出</span><br><span class="line">  M_fmi2GetReal(m, ...)</span><br><span class="line">until terminateSimulation</span><br><span class="line"></span><br><span class="line">// 终止仿真和获取最终值</span><br><span class="line">TERMINATE_MODEL:</span><br><span class="line">M_fmi2Terminate(m)</span><br><span class="line">M_fmi2GetReal/Integer/Boolean/String(m, ...)</span><br><span class="line"></span><br><span class="line">// cleanup</span><br><span class="line">M_fmi2FreeInstance(m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line">status = M_fmi2GetDerivatives(m, der_x, nx);</span><br><span class="line">switch ( status ) &#123; case fmi2Discard: ....; break; // reduce step size and try again</span><br><span class="line">                    case fmi2Error  : ....; break; // cleanup and stop simulation</span><br><span class="line">                    case fmi2Fatal  : ....; &#125;      // stop using the model</span><br></pre></td></tr></table></figure><hr><h1 id="三、FMI描述文件（Schema-ModelExchange）"><a href="#三、FMI描述文件（Schema-ModelExchange）" class="headerlink" title="三、FMI描述文件（Schema-ModelExchange）"></a>三、FMI描述文件（Schema-ModelExchange）</h1><p>本节节将定义“模型交换”特定元素“ModelExchange”。</p><ol><li>modelexchange标签相关定义</li></ol><p><img src="/image/co-simulation/me-modelexchange.png" alt="modelexchange"></p><ol start="2"><li>modelexchange标签相关结构</li></ol><p>modelexchange</p><ul><li>modelIdentifier：根据C语法的简短类名称，例如“ A_B_C”</li><li>needsExecutionTool：如果为true，则需要一个工具来执行模型，并且FMU仅包含与此工具的通信。</li><li>completedIntegratorStepNotNeeded：如果为true，则无需调用函数 fmi2CompletedIntegratorStep（这将使集成效率稍微提高一点）。如果调用该函数，则无效。如果为false（默认值），则必须在完成每个积分器步长后调用该函数，请参见3.2.2节。</li><li>canBeInstantiatedOnlyOncePerProcess：该标志指示情况（尤其是对于嵌入式代码），其中每个FMU只能有一个实例（多个实例默认为false；如果需要多个实例且此标志为true，则必须在不同的进程中实例化FMU）。</li><li>canNotUseMemoryManagementFunctions：如果为true，则FMU使用其自身的函数仅用于内存分配和释放。 fmi2Instantiate中的回调函数allocateMemory和freeMemorygiven被忽略</li><li>canGetAndSetFMUstate：如果为true，则环境可以查询内部FMU状态并可以将其还原。也就是说，FMU支持函数fmi2GetFMUstate、fmi2SetFMUstate和fmi2FreeFMUstate。</li><li>canSerializeFMUstate：如果为true，则环境可以序列化内部FMU状态，换句话说，FMU支持函数fmi2SerializedFMUstateSize、fmi2SerializeFMUstat 、fmi2DeSerializeFMUstate。如果是这种情况，则标记canGetAndSetFMUstate也必须为true</li><li>providesDirectionalDerivative：如果为true，则可以使用fmi2GetDirectionalDerivative（..）计算方程的方向导数。</li><li>sourceFiles<ul><li>name</li></ul></li></ul><ol start="3"><li>示例XML描述文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF8&quot;?&gt;</span><br><span class="line">&lt;fmiModelDescription   fmiVersion=&quot;2.0&quot;   modelName=&quot;MyLibrary.SpringMassDamper&quot;   guid=&quot;&#123;8c4e810f-3df3-4a00-8276-176fa3c9f9e0&#125;&quot;   description=&quot;Rotational Spring Mass Damper System&quot;   version=&quot;1.0&quot;   generationDateAndTime=&quot;2011-09-23T16:57:33Z&quot;   variableNamingConvention=&quot;structured&quot;   numberOfEventIndicators=&quot;2&quot;&gt; </span><br><span class="line">&lt;ModelExchange     modelIdentifier=&quot;MyLibrary_SpringMassDamper&quot;/&gt;</span><br><span class="line">&lt;UnitDefinitions&gt; </span><br><span class="line">&lt;Unit name=&quot;rad&quot;&gt;</span><br><span class="line">&lt;BaseUnit rad=&quot;1&quot;/&gt; </span><br><span class="line">&lt;DisplayUnit name=&quot;deg&quot; factor=&quot;57.2957795130823&quot;/&gt;&lt;/Unit&gt; &lt;Unit name=&quot;rad/s&quot;&gt;</span><br><span class="line">&lt;BaseUnit s=&quot;-1&quot; rad=&quot;1&quot;/&gt; </span><br><span class="line">&lt;/Unit&gt; </span><br><span class="line">&lt;Unit name=&quot;kg.m2&quot;&gt;</span><br><span class="line">&lt;BaseUnit kg=&quot;1&quot; m=&quot;2&quot;/&gt; </span><br><span class="line">&lt;/Unit&gt; </span><br><span class="line">&lt;/UnitDefinitions&gt;</span><br><span class="line"></span><br><span class="line">&lt;TypeDefinitions&gt;</span><br><span class="line">&lt;SimpleType name=&quot;Modelica.SIunits.Inertia&quot;&gt;</span><br><span class="line">&lt;Real quantity=&quot;MomentOfInertia&quot; unit=&quot;kg.m2&quot; min=&quot;0.0&quot;/&gt;</span><br><span class="line">&lt;/SimpleType&gt; </span><br><span class="line"></span><br><span class="line">&lt;SimpleType name=&quot;Modelica.SIunits.Torque&quot;&gt;</span><br><span class="line">&lt;Real quantity=&quot;Torque&quot; unit=&quot;N.m&quot;/&gt;</span><br><span class="line">&lt;/SimpleType&gt;</span><br><span class="line"></span><br><span class="line">&lt;SimpleType name=&quot;Modelica.SIunits.AngularVelocity&quot;&gt;</span><br><span class="line">&lt;Real quantity=&quot;AngularVelocity&quot; unit=&quot;rad/s&quot;/&gt;</span><br><span class="line">&lt;/SimpleType&gt;</span><br><span class="line"></span><br><span class="line">&lt;SimpleType name=&quot;Modelica.SIunits.Angle&quot;&gt;</span><br><span class="line">&lt;Real quantity=&quot;Angle&quot; unit=&quot;rad&quot;/&gt;</span><br><span class="line">&lt;/SimpleType&gt;</span><br><span class="line">&lt;/TypeDefinitions&gt;</span><br><span class="line"></span><br><span class="line">&lt;DefaultExperiment startTime=&quot;0.0&quot; stopTime=&quot;3.0&quot; tolerance=&quot;0.0001&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;ModelVariables&gt;</span><br><span class="line">&lt;ScalarVariable name=&quot;inertia1.J&quot; valueReference=&quot;1073741824&quot; description=&quot;Moment of load inertia&quot; causality=&quot;parameter&quot; variability=&quot;fixed&quot;&gt;</span><br><span class="line">&lt;Real declaredType=&quot;Modelica.SIunits.Inertia&quot; start=&quot;1&quot;/&gt;</span><br><span class="line">&lt;/ScalarVariable&gt;</span><br><span class="line">&lt;!—index=&quot;1&quot; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;ScalarVariable name=&quot;torque.tau&quot; valueReference=&quot;536870912&quot; description=&quot;Accelerating torque acting at flange (= -flange.tau)&quot;       causality=&quot;input&quot;&gt; </span><br><span class="line">&lt;Real declaredType=&quot;Modelica.SIunits.Torque&quot; start=&quot;0&quot; /&gt;</span><br><span class="line">&lt;/ScalarVariable&gt;</span><br><span class="line">&lt;!—index=&quot;2&quot; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;ScalarVariable name=&quot;inertia1.phi&quot; valueReference=&quot;805306368&quot; description=&quot;Absolute rotation angle of component&quot; causality=&quot;output&quot;&gt;</span><br><span class="line">&lt;Real declaredType=&quot;Modelica.SIunits.Angle&quot; /&gt;</span><br><span class="line">&lt;/ScalarVariable&gt;</span><br><span class="line">&lt;!—index=&quot;3&quot; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;ScalarVariable name=&quot;inertia1.w&quot; valueReference=&quot;805306369&quot; description=&quot;Absolute angular velocity of component (= der(phi))&quot;       causality=&quot;output&quot;&gt;</span><br><span class="line">&lt;Real declaredType=&quot;Modelica.SIunits.AngularVelocity&quot; /&gt;</span><br><span class="line">&lt;/ScalarVariable&gt;</span><br><span class="line">&lt;!—index=&quot;4&quot; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;ScalarVariable name=&quot;x[1]&quot; valueReference=&quot;0&quot;, initial=&quot;exact&quot;&gt; </span><br><span class="line">&lt;Real/&gt;</span><br><span class="line">&lt;/ScalarVariable&gt;</span><br><span class="line">&lt;!—index=&quot;5&quot; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;ScalarVariable name=&quot;x[2]&quot; valueReference=&quot;1&quot;, initial=&quot;exact&quot;&gt;</span><br><span class="line">&lt;Real/&gt;</span><br><span class="line">&lt;/ScalarVariable&gt;</span><br><span class="line">&lt;!—index=&quot;6&quot; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;ScalarVariable name=&quot;der(x[1])&quot; valueReference=&quot;2&quot;&gt;</span><br><span class="line">&lt;Real derivative=&quot;5&quot;/&gt;</span><br><span class="line">&lt;/ScalarVariable&gt;</span><br><span class="line">&lt;!—index=&quot;7&quot; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;ScalarVariable name=&quot;der(x[2])&quot; valueReference=&quot;3&quot;&gt;</span><br><span class="line">&lt;Real derivative=&quot;6&quot;/&gt;</span><br><span class="line">&lt;/ScalarVariable&gt;</span><br><span class="line">&lt;!—index=&quot;8&quot; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;/ModelVariables&gt;</span><br><span class="line"></span><br><span class="line">&lt;ModelStructure&gt;</span><br><span class="line">&lt;Outputs&gt;</span><br><span class="line">&lt;Unknown index=&quot;3&quot; /&gt; </span><br><span class="line">&lt;Unknown index=&quot;4&quot; /&gt;</span><br><span class="line">&lt;/Outputs&gt;</span><br><span class="line"></span><br><span class="line">&lt;Derivatives&gt;  </span><br><span class="line">   &lt;Unknown index=&quot;7&quot; /&gt; </span><br><span class="line">   &lt;Unknown index=&quot;8&quot; /&gt;</span><br><span class="line">&lt;/Derivatives&gt;</span><br><span class="line"></span><br><span class="line">&lt;InitialUnknowns&gt;</span><br><span class="line">&lt;Unknown index=&quot;3&quot; /&gt;</span><br><span class="line">&lt;Unknown index=&quot;4&quot; /&gt;</span><br><span class="line">&lt;Unknown index=&quot;7&quot; dependencies=&quot;5 2&quot; /&gt;             </span><br><span class="line">&lt;Unknown index=&quot;8&quot; dependencies=&quot;5 6&quot; /&gt; </span><br><span class="line">&lt;/InitialUnknowns&gt;  </span><br><span class="line"></span><br><span class="line">&lt;/ModelStructure&gt; </span><br><span class="line"></span><br><span class="line">&lt;/fmiModelDescription&gt;</span><br></pre></td></tr></table></figure><h1 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h1><blockquote><p>《Functional Mock-up Interface forModel Exchange and Co-Simulation v2.0》</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文是来自于FMI2.0规范的第三章模型交换的译文，基于机翻与个人理解修订而成。&lt;/p&gt;
&lt;style&gt;
table th:first-of-type {
    width: 10%;
}
&lt;/style&gt;
&lt;h1 id=&quot;一、模型交换的数学描述&quot;&gt;&lt;a href=&quot;#一</summary>
      
    
    
    
    
    <category term="co-simulation" scheme="http://zws6672.top/tags/co-simulation/"/>
    
  </entry>
  
  <entry>
    <title>恢复git删除的分支</title>
    <link href="http://zws6672.top/2021/05/21/git-branch-recover/"/>
    <id>http://zws6672.top/2021/05/21/git-branch-recover/</id>
    <published>2021-05-21T07:21:52.000Z</published>
    <updated>2021-05-21T07:23:17.258Z</updated>
    
    <content type="html"><![CDATA[<p>误删分支可以分为以下几种情况：</p><ul><li>分支数据存在本地，远端没有最新分支数据，通过本地删除</li><li>分支数据存在远端，通过本地删除</li><li>分支数据存在远端，通过github网页删除，而本地没有分支数据</li></ul><p>Git会自行负责分支的管理，所以当我们删除一个分支时，Git只是删除了指向相关提交的指针，但该提交对象依然会留在版本库中。如果在本地进行删除，那么一般会返回一个相关提交的哈希值，通过该哈希值，可以找回分支。</p><ol><li>删除本地分支如何恢复</li></ol><p>在删除分支的位置打开bash，输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log -g </span><br><span class="line">git branch newbranch commit_id</span><br><span class="line">git checkout newbranch</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在本地误删远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 按时间格式输出HEAD(当前分支)日志</span><br><span class="line">git reflog --date=iso</span><br><span class="line">ce0eee6a HEAD@&#123;2021-05-21 14:53:26 +0800&#125;: commit: XXX</span><br><span class="line">第一个序列号，就是相关分支ID</span><br><span class="line">git checkout -b recovery_branch_name commit_ID</span><br><span class="line">-- 恢复后推送远端即可</span><br><span class="line">git push  origin recovery_branch_name</span><br></pre></td></tr></table></figure></li><li><p>恢复在网页端删除的远端分支</p></li></ol><p>暂时没找到法子，因为网页删除后不会返回哈希之类的信息；只能通过本地推送恢复。</p><ol start="4"><li>删除分支的相关命令(慎用)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git checkout other</span><br><span class="line">-- 本地</span><br><span class="line">git branch -d XX</span><br><span class="line">-- 强制删除</span><br><span class="line">git branch -D XX</span><br><span class="line">-- 删除远端分支</span><br><span class="line">git push origin --delete XX</span><br><span class="line">-- 远端拉取分支</span><br><span class="line">git fetch origin XX1:XX1</span><br><span class="line">git checkout XX1</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;误删分支可以分为以下几种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分支数据存在本地，远端没有最新分支数据，通过本地删除&lt;/li&gt;
&lt;li&gt;分支数据存在远端，通过本地删除&lt;/li&gt;
&lt;li&gt;分支数据存在远端，通过github网页删除，而本地没有分支数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;G</summary>
      
    
    
    
    
    <category term="tool" scheme="http://zws6672.top/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>FMI2.0 ———— 接口与文件</title>
    <link href="http://zws6672.top/2021/05/21/fmi-jkwj/"/>
    <id>http://zws6672.top/2021/05/21/fmi-jkwj/</id>
    <published>2021-05-21T06:51:08.000Z</published>
    <updated>2021-06-03T02:25:38.683Z</updated>
    
    <content type="html"><![CDATA[<p>本文是来自于FMI2.0规范的前两章的部分译文，基于机翻与个人理解修订而成；描述了FMI模型交换和联合仿真，还包括了程序接口以及模型描述文件两部分。</p><h1 id="一、FMI程序接口"><a href="#一、FMI程序接口" class="headerlink" title="一、FMI程序接口"></a>一、FMI程序接口</h1><ol><li>模型交换</li></ol><p>支持该功能是为了在建模环境中可以生成动态系统模型的C代码，该模型可以被其他建模和仿真环境使用。通过代数、离散方程和具有时间，状态和阶跃事件的离散方程来描述模型。如果C代码描述了一个连续的系统，那么该系统将由使用它的环境的集成商来解决。该接口要处理的模型可以很大，可以在离线或在线仿真中使用，也可以在微处理器的嵌入式控制系统中使用。设计该接口是旨在描述大型模型。</p><ol start="2"><li>联合仿真</li></ol><p>支持该功能的意图是提供一个接口标准，用于在联合仿真环境中与其它仿真工具协同工作。子系统之间的数据交换仅限于离散的通信点（通讯时间）；在两个通信点之外的时间中，子系统由各自的求解器彼此独立地求解。主算法控制子系统之间的数据交换以及所有模拟求解器（从属）的同步。</p><ol start="3"><li>FMI通用概念</li></ol><p>这两个接口标准有很多共同点。我们可以利用模型以及联合仿真工具的多个实例单独或协同的将它们连接在一起。这些接口独立于目标环境，因为没有使用依赖于目标环境的头文件（目标平台的数据类型除外）。这允许生成一个可在同一平台上的任何环境中使用的动态链接库。</p><ol start="4"><li>FMU</li></ol><p>模型、联合仿真从属/工具的关联部分被存储在一个称为FMU（功能模拟单元）的zip文件中，包含以下内容：</p><ul><li>XML包含FMU中所有公开变量的定义以及其他静态信息。这样就可以在没有此信息的情况下在目标系统上运行FMU</li><li>提供了所需的模型方程式或联合仿真工具的访问权限，并提供了一小组易于使用的C函数。与其他方法相比，一种新的缓存技术可以更有效地评估模型方程；同一平台的FMU zip文件中可以包含不同平台的二进制格式</li><li>可以直接在FMU中提供模型方程式或联合仿真工具，或与外部工具通信的功能模块。</li><li>包含模型图标（位图文件）、FMU所需的文档文件、地图和表格</li></ul><p>FMU包含文件如下：</p><ul><li>XML 用于描述模型</li><li>DLL 运行库</li><li>其它用户所需资源</li></ul><p>FMU模型的数据流：</p><ul><li>数据类型为 Real, Integer, Boolean, String</li><li>inputs</li><li>outputs</li><li>对外暴露的变量</li></ul><ol start="5"><li>头文件和函数命名</li></ol><p>提供了几个头文件，它们定义了FMU的接口。在所有头文件中，均约定所有相关的C函数和类型定义均使用前缀“fmi2”开头</p><ul><li>“fmi2TypesPlatform.h“：包含函数的输入和输出参数的类型定义，FMU和目标模拟器都必须使用此头文件。</li><li>“fmi2FunctionTypes.h“：包含FMU所有函数原型的 typedef 定义</li><li>“fmi2Functions.h“；包含FMU的函数原型，这些原型可以在仿真环境中访问</li></ul><p>定义这几个接口的目的是支持FMU的文本表示和二进制表示，并且可执行文件中可能同时存在多个FMU（例如FMU A可以使用FMU B）。所以不同的fmu中函数名应当不一致，避免同时使用时冲突。</p><p>5.1 类型平台</p><p>“fmi2TypesPlatform.h”：包含类型平台的所有定义，用于唯一地标识用于编译二进制文件的头文件，相关源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#ifndef fmi2TypesPlatform_h</span><br><span class="line">#define fmi2TypesPlatform_h</span><br><span class="line">#define fmi2TypesPlatform &quot;default&quot;</span><br><span class="line"></span><br><span class="line">   typedef void*           fmi2Component;               /* 该数据结构包含处理模型方程式或处理各个从站的联合仿真所需的信息 */</span><br><span class="line">   typedef void*           fmi2ComponentEnvironment;    /* 可以在仿真环境和记录器功能之间传输来自modelDescription.xml文件 */</span><br><span class="line">   typedef void*           fmi2FMUstate;                /* 保存实际或先前时刻的内部FMU状态*/</span><br><span class="line">   typedef unsigned int    fmi2ValueReference; /* 模型变量值的句柄，句柄和基类型（例如fmi2Real）唯一地标识变量的值*/</span><br><span class="line">   typedef double          fmi2Real   ;</span><br><span class="line">   typedef int             fmi2Integer;</span><br><span class="line">   typedef int             fmi2Boolean;</span><br><span class="line">   typedef char            fmi2Char;</span><br><span class="line">   typedef const fmi2Char* fmi2String;</span><br><span class="line">   typedef char            fmi2Byte;</span><br><span class="line">#define fmi2True  1</span><br><span class="line">#define fmi2False 0</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>这个接口用于定义FMI中支持的所有数据类型。</p><p>5.2 函数返回值</p><p>文件中定义了“状态”标识（在文件“ fmi2FunctionTypes.h”中定义的fmi2Status类型的枚举），所有函数均返回该标志以指示函数调用成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedefenum&#123;</span><br><span class="line">fmi2OK,</span><br><span class="line">fmi2Warning, </span><br><span class="line">fmi2Discard, </span><br><span class="line">fmi2Error, </span><br><span class="line">fmi2Fatal, </span><br><span class="line">fmi2Pending</span><br><span class="line">&#125; fmi2Status;</span><br></pre></td></tr></table></figure><p>这个接口用于定义FMI中函数的返回值类型。</p><p>5.3 fmu函数库</p><p>部分源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">。。。</span><br><span class="line">#define fmi2GetTypesPlatform         fmi2FullName(fmi2GetTypesPlatform)</span><br><span class="line">#define fmi2GetVersion               fmi2FullName(fmi2GetVersion)</span><br><span class="line">#define fmi2SetDebugLogging          fmi2FullName(fmi2SetDebugLogging)</span><br><span class="line">#define fmi2Instantiate              fmi2FullName(fmi2Instantiate)</span><br><span class="line">#define fmi2FreeInstance             fmi2FullName(fmi2FreeInstance)</span><br><span class="line">#define fmi2SetupExperiment          fmi2FullName(fmi2SetupExperiment)</span><br><span class="line">#define fmi2EnterInitializationMode  fmi2FullName(fmi2EnterInitializationMode)</span><br><span class="line">#define fmi2ExitInitializationMode   fmi2FullName(fmi2ExitInitializationMode)</span><br><span class="line">。。。</span><br></pre></td></tr></table></figure><p>这个接口用于定义FMI中使用的函数。</p><ol start="6"><li>初始化，终止和重置FMU</li></ol><p>fmi2SetupExperiment函数会在fmi2Instantiate被调用之后和fmi2EnterInitializationMode被调用之前调用，参数公差定义和公差取决于FMU类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fmi2Status fmi2SetupExperiment (fmi2Component c,</span><br><span class="line">fmi2Boolean   toleranceDefined,</span><br><span class="line">fmi2Real      tolerance, </span><br><span class="line">fmi2Real      startTime,</span><br><span class="line">fmi2Boolean   stopTimeDefined, </span><br><span class="line">fmi2Real    stopTime);</span><br></pre></td></tr></table></figure><p><code>fmuType = fmi2ModelExchange</code>: 如果“ toleranceDefined = fmi2True”，则使用数值积分方案调用模型，其中通过使用“ tolerance”控制误差来控制步长（通常使用相对公差）<br><code>fmuType = fmi2CoSimulation</code>：如果“toleranceDefined = fmi2True”，通信间隔由估计误差控制；如果从站具有可变步长和估计误差的积分，那么通过公差来控制通信间隔</p><p>参数 startTime 和 stopTime 可用于检查模型在给定范围内是否有效，或分配存储结果所需的内存。如果当前时间超过 stopTime，则FMU必须返回fmi2Status = fmi2Error。如果stopTimeDefined = fmi2False，则没有定义自变量的最终值，并且参数stopTime没有意义。</p><p>相关函数定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 使FMU进入初始化模式</span><br><span class="line">fmi2Status fmi2EnterInitializationMode(fmi2Component c);</span><br><span class="line">-- 使FMU退出初始化模式</span><br><span class="line">fmi2Status fmi2ExitInitializationMode(fmi2Component c);</span><br><span class="line">-- 终止FMU</span><br><span class="line">fmi2Status fmi2Terminate(fmi2Component c);</span><br><span class="line">-- 重置FMU</span><br><span class="line">fmi2Status fmi2Reset(fmi2Component c);</span><br></pre></td></tr></table></figure><ol start="7"><li>偏导数的支持</li></ol><p>fmi标准可以选择评估FMU的偏导数。对于模型交换，这意味着在特定时刻计算偏导数；对于联合仿真，这意味着要在特定的通信点上计算偏导数。fmi标准提供了一种函数来计算方向导数，此函数可用于构造所需的偏导数矩阵。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fmi2Status fmi2GetDirectionalDerivative(fmi2Component c, </span><br><span class="line">const fmi2ValueReference vUnknown_ref[], </span><br><span class="line">size_t nUnknown, </span><br><span class="line">const fmi2ValueReference vKnown_ref[]  , </span><br><span class="line">size_t nKnown,</span><br><span class="line">const fmi2Real dvKnown[], </span><br><span class="line">fmi2Real dvUnknown[])</span><br><span class="line"></span><br><span class="line">初始化模式（Initialization Mode）：在&lt;ModelStructure&gt; &lt;InitialUnknowns&gt;下列出的公开类型为实数的未知数。</span><br><span class="line"></span><br><span class="line">连续时间模式（Continuous-Time Mode —— ModelExchange）：连续时间输出和状态导数（在&lt;ModelStructure&gt; &lt;Outputs&gt;下列出的类型为Real和variability =&apos;continuous&apos;的变量，以及在&lt;ModelStructure&gt; &lt;Derivatives&gt;下列出为状态导数的变量）。</span><br><span class="line"></span><br><span class="line">事件模式（Event Mode —— ModelExchange）：与连续时间模式中相同的变量，以及&lt;ModelStructure&gt; &lt;Outputs&gt;下类型为Real和variability =&apos;discrete&apos;的变量</span><br><span class="line"></span><br><span class="line">步进模式（Step Mode —— CoSimulation）：在&lt;ModelStructure&gt; &lt;Outputs&gt;下列出的类型为Real且variability =&apos;continuous&apos;或&apos;discrete&apos;的变量。如果存在&lt;ModelStructure&gt; &lt;Derivatives&gt;，则此处列出的变量也是状态导数。</span><br></pre></td></tr></table></figure><h1 id="二、FMI模型架构（ModelDescription）"><a href="#二、FMI模型架构（ModelDescription）" class="headerlink" title="二、FMI模型架构（ModelDescription）"></a>二、FMI模型架构（ModelDescription）</h1><p>与FMU相关的所有静态信息都以XML格式存储在文本文件 modelDescription.xml 中(FMU变量及其属性如名称，单位，默认初始值等都存储在此文件中)；使用模式文件“ fmiModelDescription.xsd”定义此XML文件的结构。该架构文件使用了以下辅助架构文件：</p><ul><li>fmi2Unit.xsd</li><li>fmi2Type.xsd</li><li>fmi2Annotation.xsd</li><li>fmi2ScalarVariable.xsd</li><li>fmi2AttributeGroups.xsd</li><li>fmi2VariableDependency.xsd</li></ul><p>该架构所需的数据类型（例如：xs：normalizedString）在<a href="http：//www.w3.org/TR/XMLschema-2/">XML架构标准</a>中定义，类型的定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xs:double 表示 double</span><br><span class="line">xs:int 表示  int</span><br><span class="line">xs:unsignedInt 表示   unsigned int</span><br><span class="line">xs:boolean 表示  char</span><br><span class="line">xs:string 表示  char*</span><br><span class="line">xs:normalizedString 表示  char*</span><br><span class="line">xs:dateTime tool 表示  specific</span><br></pre></td></tr></table></figure><p>XML文件的第一行（如modelDescription.xml）必须包含XML文件的编码方案,要求编码方案始终为UTF8，需要如下定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br></pre></td></tr></table></figure><p>以下是根级别的架构文件，包含架构文件中的所有元素，而数据由这些元素的属性定义：</p><p><img src="/image/co-simulation/fmi-md.png" alt="元素架构"></p><hr><ol><li>fmiModelDescription（fmi模型描述）</li></ol><p>定义如下：</p><p><img src="/image/co-simulation/fmi-md-attr.png" alt="元素架构-属性"></p><p>标签结构如下：</p><ul><li>fmiModelDescription<ul><li>属性<ul><li>fmiVersion（必需）：FMI规范版本</li><li>modelName（必需）：生成XML的模型名称</li><li>guid（必需）：全球唯一标识</li><li>description：模型简短描述</li><li>author：模型作者的名称和组织</li><li>version：模型版本</li><li>copyright：知识版权定义（例如“© My Company 2011”）</li><li>generationTool：生成XMLfile的工具</li><li>generationDateAndTime：生成XML文件的日期和时间（格式为“YYYY-MM-DDThh:mm:ssZ”，Z表示Zulu 时区）</li><li>variableNamingConvention：该约束定义了如何构造 ScalarVariable的名称（flat表示唯一的非空字符串；structured表示使用”.“作为分隔符，名称由“_”、字母和数字组成，也可以由单撇号括起来的任何字符组成）</li><li>numberOfEventIndicators：基于FMI 模型交换的事件指标的（固定）数量，联合仿真下可以忽略</li></ul></li><li>子标签<ul><li>ModelExchange：如果存在，则FMU基于“用于模型交换的FMI”（换句话说，FMU包含模型或与提供模型的工具进行通信，而环境提供模拟引擎）。</li><li>CoSimulation： 如果存在，则FMU基于“用于联合仿真的FMI”（换句话说，FMU包括模型和仿真引擎，或者与提供模型和仿真引擎的工具进行通信，该环境提供了主算法来运行耦合的FMU联合仿真从设备以共同运行)。</li><li>UnitDefinitions：定义单位和显示单位的全局列表（例如，将显示单位转换为模型方程式中使用的单位）。这些定义在XML元素“ ModelVariables”中使用</li><li>TypeDefinitions：“ ModelVariables”中使用的类型定义列表</li><li>LogCategories：日志类别的全局列表，可以设置该列表以定义FMU支持的日志信息</li><li>DefaultExperiment：提供积分的默认设置，例如停止时间和相对公差</li><li>VendorAnnotations：供应商可能想要存储而其他供应商可能会忽略的其他数据</li><li>ModelVariables：定义了FMU的所有变量</li><li>ModelStructure：定义模型的结构，包括输出，连续时间状态和初始未知数</li></ul></li></ul></li></ul><hr><ol start="2"><li>UnitDefinitions （变量单位）</li></ol><p>变量的单位是（可选）自定义的，单位的支持对于技术系统很重要，因为很容易发生错误。</p><p>相关定义如下</p><p><img src="/image/co-simulation/fmi-unit.png" alt="变量单位"><br><img src="/image/co-simulation/fmi-unit2.png" alt="变量单位"></p><p>标签结构如下</p><ul><li>UnitDefinitions<ul><li>Unit（多个）<ul><li>属性<ul><li>name：</li></ul></li><li>标签<ul><li>BaseUnit（基本单位 前七个是国际单位制中的基本单位）<ul><li>kg：质量-千克</li><li>m：距离-米</li><li>s：时间-秒</li><li>A：电流-安培</li><li>K：温度-开尔文</li><li>mol：物质的量-摩尔</li><li>cd：发光强度-坎德拉</li><li>rad：辐射吸收剂量-拉德</li><li>factor：因子（乘法）</li><li>offset：偏移量（增益）</li></ul></li><li>DisplayUnit<ul><li>name</li><li>factor</li><li>offset<br>其中，DisplayUnit用于定义转换值，转换公式如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DisplayUnit_value = factor*Unit_value + offset</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul></li></ul><p>示例如下：</p><figure class="highlight plain"><figcaption><span>name</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;BaseUnit s=&quot;-1&quot; rad=&quot;1&quot;/&gt;</span><br><span class="line">&lt;DisplayUnit name=&quot;deg/s&quot; factor= &quot;57.29577951308232&quot;/&gt;</span><br><span class="line">&lt;DisplayUnit name=&quot;rev/min&quot; factor= &quot;9.549296585513721&quot;/&gt;</span><br><span class="line">&lt;/Unit&gt;</span><br><span class="line">&lt;Unit name=&quot;bar&quot;&gt;</span><br><span class="line">&lt;BaseUnit kg=&quot;1&quot;, m=&quot;-1&quot;, s=&quot;-2&quot;, factor=&quot;1.0e5&quot;, offset=&quot;0&quot;/&gt;</span><br><span class="line">&lt;/Unit&gt;</span><br><span class="line">&lt;Unit name=&quot;Re&quot;&gt;</span><br><span class="line">&lt;BaseUnit/&gt; // unit = &quot;1&quot;</span><br><span class="line">//(dimensionless, all exponents of BaseUnit are zero)</span><br><span class="line">&lt;/Unit&gt;</span><br><span class="line">&lt;Unit name=&quot;Euro/PersonYear&quot;/&gt; // no mapping to BaseUnit defined</span><br></pre></td></tr></table></figure><hr><ol start="3"><li>TypeDefinitions（类型定义）</li></ol><p>该元素是一个名为“SimpleType”的集合，在 fmi2Type.xsd文件中的 fmi2SimpleType 架构下定义的。</p><p>相关定义如下</p><p><img src="/image/co-simulation/fmi-type.png" alt="类型定义"></p><p>标签结构如下：</p><ul><li>TypeDefinitions<ul><li>SimpleType（多个）<ul><li>属性<ul><li>name</li><li>description</li></ul></li><li>子标签<ul><li>Real<ul><li>declaredType：定义的类型</li><li>quantity：变量的物理量</li><li>unit：单位</li><li>displayUnit：显示单位</li><li>relativeQuantity：为true，那么忽略“ displayUnit”的“ offset”</li><li>min：时间最小值</li><li>max：时间最大值</li><li>nominal：变量的标称值。如果未定义并且没有有关标称值的其他信息，则假定标称= 1</li><li>unbounded：如果为true，则表示该变量在时间积分中远大于其标称值nominal。</li><li>start：如果 initiaJ= exact/approx，那么需要满足min&lt;start&lt;max.</li><li>derivative：导数</li><li>reinit：为true，运行重新初始化</li></ul></li><li>Integer<ul><li>declaredType</li><li>quantity</li><li>min</li><li>max</li><li>start</li></ul></li><li>Boolean<ul><li>declaredType</li><li>start</li></ul></li><li>String<ul><li>declaredType</li><li>start        </li></ul></li><li>Enumeration<ul><li>declaredType</li><li>quantity</li><li>min</li><li>max</li><li>start</li><li>Items</li></ul></li></ul></li></ul></li></ul></li></ul><hr><ol start="4"><li>LogCategories（日志类别）</li></ol><p>LogCategories定义了一组无序字符串，可用于通过函数“ logger”定义日志输出。“名称”属性对于LogCategories列表的所有其他元素必须是唯一的</p><p>定义如下<br><img src="/image/co-simulation/fmi-log.png" alt="日志类别的定义"></p><p>标签结构如下</p><ul><li>LogCategories<ul><li>Category(多个、分类)<ul><li>name(在日志列表中唯一)</li><li>description</li></ul></li></ul></li></ul><hr><ol start="5"><li>DefaultExperiment（默认设置）</li></ol><p>DefaultExperiment提供积分器的默认设置，例如开始时间、停止时间、相对公差和第一次仿真步长等（默认、可选）。对于用户来说，比较方便的是这些变量已经为模型提供了有意义的默认值。</p><p>定义如下<br><img src="/image/co-simulation/fmi-de.png" alt="默认设置"></p><p>标签结构如下</p><ul><li>DefaultExperiment<ul><li>tolerance：相对公差（默认值为1e-6）</li><li>startTime：开始时间</li><li>stopTime：结束时间</li><li>stepSize：步长大小（决定最小采样周期）</li></ul></li></ul><hr><ol start="6"><li>VendorAnnotations（附加信息）</li></ol><p>VendorAnnotations由一组有序的注释组成，这些注释由可以解释“ any”元素的工具名称标识。</p><p>定义如下<br><img src="/image/co-simulation/fmi-annotation.png" alt="附加信息"></p><p>标签结构如下</p><ul><li>VendorAnnotations<ul><li>Tool（多个）<ul><li>name（必须、唯一）</li><li>#any：是可以由工具定义的任意XML数据结构（例如javafmi中的v2.Tool类中定义的HybridCoSim）</li></ul></li></ul></li></ul><hr><ol start="7"><li>ModelVariables（模型变量）</li></ol><p>fmiModelDescription的“ ModelVariables”元素是模型描述的核心部分，它提供所有公开变量的静态信息，并定义为：</p><p><img src="/image/co-simulation/fmi-variables.png" alt="模型变量"></p><p>“ ModelVariables”元素由“ ScalarVariable”元素的有序集合组成（请参见上图）,标签结构如下</p><ul><li>ModelVariables<ul><li>ScalarVariable（多个）：标量变量,即存储一个数据的变量<ul><li>属性<ul><li>name（必需）：变量唯一名称</li><li>valueReference：使用被称为值引用的整数句柄识别FMU的标量变量的值。</li><li>description</li><li>causality（    因果关系）：默认值为local，一个连续时间状态需要设置causality = “local/output”<ul><li>parameter：独立参数（由环境提供的参数，在仿真期间数据值是固定的，且不能用于连接中） </li><li>calculatedParameter：计算参数（在仿真期间数据值是固定的，在初始化阶段以及可调（tunable）参数发生变化时被计算）</li><li>input：该变量是其它模块或从机提供的，不允许定义initial</li><li>output：该变量是提供给其它模块或从机的，与输入的代数关系是通过dependencies属性定义的（<code>&lt;fmiModelDescription&gt;&lt;ModelStructure&gt;&lt;Outputs&gt;&lt;Unknown&gt;</code>）</li><li>local（默认值）：由其他变量计算得到的局部变量或连续时间状态，不允许用于其它模块或从站。</li><li>independent：自变量（通常是时间）。所有变量与这个自变量构成函数。可变性必须是“continuous”。在FMU中，最多只有一个 <code>ScalarVariable</code>可以定义为自变量。如果没有变量定义为自变量，那可以是隐式的定义（name=’time’,unit=’s’）。如果有一个变量被定义为自变量，那它必须定义为’Real’类型，并且不设置’start’属性；也不允许调用<code>fmi2SetReal</code>函数。取而代之的是，通过<code>fmi2SetupExperiment</code>函数对自变量值进行初始化。在初始化后，模型交换类型的需要调用<code>fmi2SetTime</code>函数；联合仿真类型的，需要调用<code>fmi2DoStep</code>函数设置参数<code>currentCommunicationPoint</code>和<code>communicationStepSize</code>(实际值可以通过fmi2GetReal查询)。</li></ul></li><li>variability（可变性）:定义变量的时间依赖性，换句话说它规定了一个变量在什么时候可以改变它的值。<ul><li>constant：变量值永不改变</li><li>fixed：变量值在初始化后不可调整，换句话说在调用<code>fmi2ExitInitializationMode</code>函数后变量值不能够再改变</li><li>tunable：如果设置属性 <code>causality = &quot;parameter/input&quot;</code>以及<code>variability = &quot;tunable&quot;</code>，在外部事件（模型交换）间或者通讯点（联合仿真）间变量是固定不变的；如果发生了变化，那么就会触发一个外部事件（ModelExchange）或者在下一个通讯点（CoSimulation）执行改变。属性设置为<code>variability = &quot;tunable&quot;、causality = &quot;calculatedParameter\output&quot;</code>的变量必须被重新计算。</li><li>discrete（离散）：在模型交换类型中，在外部事件以及内部事件（time、state、step）间是固定不变的；在联合仿真中，通常变量来自“真实”的采样数据系统，其值仅在通信点（或从站内部）更改</li><li>continuous（默认值）：只有属性<code>ype = “Real”</code>的变量可以是连续的。在模型交换类型中，值的变化没有限制；在联合仿真中，变量通常来自微分。【注意，关于连续状态的信息是用元素 fmiModelDescription.ModelStructure.Derivatives 定义的】</li></ul></li><li>initial<ul><li>exact：变量用<code>start</code>进行初始化</li><li>approx：该变量是代数环的迭代变量，初始化时的迭代从起始值开始</li><li>calculated：该变量是在初始化期间根据其他变量计算得出的。不允许提供“起始”值</li></ul></li><li>canHandleMultipleSetPerTimeInstant：如果存在<code>canHandleMultipleSetPerTimeInstant = false</code>，则该变量在一个超密集时刻（模型评估）只允许调用一次 <code>fmi2SetXXX</code>函数；在模型交换中变量属性 <code>variability = &quot;input&quot;</code>时使用，不允许使用在代数环中。</li><li>previous</li></ul></li><li>子标签<ul><li>Real</li><li>Integer</li><li>Boolean</li><li>String</li><li>Enumeration</li><li>Annotations<ul><li>array-Tool</li></ul></li></ul></li></ul></li></ul></li></ul><p>ScalarVariable 标签的几个属性存在关联，如下所示</p><p><img src="/image/co-simulation/ScalarVariable.png" alt="ScalarVariable"></p><ul><li>（a）组合没有意义，因为parameters 和 input 是从环境设置的，而常数始终是一个值。</li><li>（b）组合没有意义，因为causality =parameter/calculatedParameter 定义了不依赖时间的变量，而“离散” ”和“连续”定义变量，在仿真过程中这些值可以更改</li><li>（c）对于独立变量，只有可变性为连续才有意义。    </li><li>（d）固定或可调的“输入”具有与固定或可调参数完全相同的属性。为简单起见，仅应定义固定参数和可调参数</li><li>（e）固定或可调的“输出”具有与固定或可调的calculatedParameter完全相同的属性。为简单起见，仅应定义固定和可调的calculatedParameters</li></ul><blockquote><p>代数环（algebraic loop）：代数环（algebraic loop)发生在两个或多个模块在输入端口具有信号直接传递而形成反馈的情况时，直接传递的模块在不知输入端口的值的情况下无法计算出输出端的值，也就是现在时刻的输出是依赖现在时刻的输入值来计算的。当这种情况出现时simulink会在每一次迭代言算完成时，去决定它是否会有解。代数回路会减缓方真执行的速度并可能会没有解。<br>为简单起见，此版本的模式文件中仅支持标量变量，并且必须将结构化实体（如数组或记录）映射到标量。</p></blockquote><hr><ol start="8"><li>ModelStructure（模型结构）</li></ol><p>该结构是针对基础模型方程式的，独立于这些模型方程式的求解方式。</p><p>相关定义如下</p><p><img src="/image/co-simulation/fmi-ms.png" alt="模型结构的定义"></p><p>标签结构如下</p><ul><li>ModelStructure<ul><li>Outputs（多个）：所有输出的有序列表<ul><li>Unknown</li></ul></li><li>Derivatives（多个）：所有状态导数的有序列表<ul><li>Unknown</li></ul></li><li>InitialUnknowns（多个）：初始化列表<ul><li>Unknown<ul><li>index 索引</li><li>dependencies 相关依赖项</li><li>dependenciesKind 依赖项类型，如果存在“ dependenciesKind”，则必须存在“ dependencies”，并且必须具有相同数量的列表元素<ul><li>constant：常数因子  </li><li>fixed</li><li>tunable</li><li>discrete</li><li>dependent：没有特定的结构</li></ul></li></ul></li></ul></li></ul></li></ul><p>定义例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;ModelVariables&gt;    </span><br><span class="line">&lt;ScalarVariable name=&quot;p&quot;      , ...&gt; ... &lt;/ScalarVariable&gt;  &lt;!—index=&quot;1&quot; --&gt;    </span><br><span class="line">&lt;ScalarVariable name=&quot;u1&quot;     , ...&gt; ... &lt;/ScalarVariable&gt;  &lt;!—index=&quot;2&quot; --&gt;    </span><br><span class="line">&lt;ScalarVariable name=&quot;u2&quot;     , ...&gt; ... &lt;/ScalarVariable&gt;  &lt;!—index=&quot;3&quot; --&gt;    </span><br><span class="line">&lt;ScalarVariable name=&quot;u3&quot;     , ...&gt; ... &lt;/ScalarVariable&gt;  &lt;!—index=&quot;4&quot; --&gt;    </span><br><span class="line">&lt;ScalarVariable name=&quot;x1&quot;     , ...&gt; ... &lt;/ScalarVariable&gt;  &lt;!—index=&quot;5&quot; --&gt;    </span><br><span class="line">&lt;ScalarVariable name=&quot;x2&quot;     , ...&gt; ... &lt;/ScalarVariable&gt;  &lt;!—index=&quot;6&quot; --&gt;    </span><br><span class="line">&lt;ScalarVariable name=&quot;x3&quot;     , ...&gt; ... &lt;/ScalarVariable&gt;  &lt;!—index=&quot;7&quot; --&gt;   </span><br><span class="line">&lt;ScalarVariable name=&quot;der(x1)&quot;, ...&gt; ... &lt;/ScalarVariable&gt;  &lt;!—index=&quot;8&quot; --&gt;    </span><br><span class="line">&lt;ScalarVariable name=&quot;der(x2)&quot;, ...&gt; ... &lt;/ScalarVariable&gt;  &lt;!—index=&quot;9&quot; --&gt;  </span><br><span class="line">&lt;ScalarVariable name=&quot;der(x3)&quot;, ...&gt; ... &lt;/ScalarVariable&gt;  &lt;!—index=&quot;10&quot; --&gt;    </span><br><span class="line">&lt;ScalarVariable name=&quot;y&quot;      , ...&gt; ... &lt;/ScalarVariable&gt;  &lt;!—index=&quot;11&quot; --&gt; </span><br><span class="line">&lt;/ModelVariables&gt; </span><br><span class="line"></span><br><span class="line">&lt;ModelStructure&gt;     </span><br><span class="line">&lt;Outputs&gt;      </span><br><span class="line">&lt;Unknown index=&quot;11&quot; dependencies=&quot;6 7&quot; /&gt;    </span><br><span class="line">&lt;/Outputs&gt; </span><br><span class="line">&lt;Derivatives&gt;</span><br><span class="line">&lt;Unknown index=&quot;8&quot;  dependencies=&quot;6&quot; /&gt;</span><br><span class="line">// 索引2是索引9的常量</span><br><span class="line">&lt;Unknown index=&quot;9&quot;  dependencies=&quot;2 4 5 6&quot; dependenciesKind=&quot;constant constant dependent fixed&quot;/&gt;</span><br><span class="line">&lt;Unknown index=&quot;10&quot; dependencies=&quot;2 3 4 5 6&quot; /&gt;</span><br><span class="line">&lt;/Derivatives&gt;</span><br><span class="line">&lt;InitialUnknowns&gt;</span><br><span class="line">&lt;Unknown index=&quot;6&quot; dependencies=&quot;2 4 5&quot; /&gt;</span><br><span class="line">&lt;Unknown index=&quot;7&quot; dependencies=&quot;2 4 5 11&quot; /&gt;</span><br><span class="line">&lt;Unknown index=&quot;8&quot; ... /&gt;</span><br><span class="line">&lt;Unknown index=&quot;10&quot; ... /&gt;</span><br><span class="line">&lt;/InitialUnknowns&gt;</span><br><span class="line">&lt;/ModelStructure&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="三、参考资料"><a href="#三、参考资料" class="headerlink" title="三、参考资料"></a>三、参考资料</h1><blockquote><p>《Functional Mock-up Interface forModel Exchange and Co-Simulation v2.0》</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文是来自于FMI2.0规范的前两章的部分译文，基于机翻与个人理解修订而成；描述了FMI模型交换和联合仿真，还包括了程序接口以及模型描述文件两部分。&lt;/p&gt;
&lt;h1 id=&quot;一、FMI程序接口&quot;&gt;&lt;a href=&quot;#一、FMI程序接口&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
    <category term="co-simulation" scheme="http://zws6672.top/tags/co-simulation/"/>
    
  </entry>
  
  <entry>
    <title>JDK8新特性 ———— Function接口</title>
    <link href="http://zws6672.top/2021/05/20/jdk-function/"/>
    <id>http://zws6672.top/2021/05/20/jdk-function/</id>
    <published>2021-05-20T06:17:17.000Z</published>
    <updated>2021-05-20T06:18:27.502Z</updated>
    
    <content type="html"><![CDATA[<p>Function接口是JDK8定义的一个函数式接口；函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。函数式接口可以被隐式转换为 lambda 表达式。</p><h1 id="一、Function接口"><a href="#一、Function接口" class="headerlink" title="一、Function接口"></a>一、Function接口</h1><p>java.util.function.Function是函数式接口，它的特点是有且只有一个抽象方法，这样的接口被@FunctionalInterface所注释，能够应用于JDK1.8开始的函数式编程。</p><p>相关源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package java.util.function;</span><br><span class="line">import java.util.Objects;</span><br><span class="line"></span><br><span class="line">// @FunctionalInterface 来限制函数式接口不能修改为普通的接口</span><br><span class="line">@FunctionalInterface</span><br><span class="line">public interface Function&lt;T, R&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将此函数应用于给定参数。</span><br><span class="line">     *</span><br><span class="line">     * @param t the function argument</span><br><span class="line">     * @return the function result</span><br><span class="line">     */</span><br><span class="line">    R apply(T t);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 先执行参数，然后执行调用者</span><br><span class="line">     *</span><br><span class="line">     * @param &lt;V&gt; the type of input to the &#123;@code before&#125; function, and to the</span><br><span class="line">     *           composed function</span><br><span class="line">     * @param before the function to apply before this function is applied</span><br><span class="line">     * @return a composed function that first applies the &#123;@code before&#125;</span><br><span class="line">     * function and then applies this function</span><br><span class="line">     * @throws NullPointerException if before is null</span><br><span class="line">     *</span><br><span class="line">     * @see #andThen(Function)</span><br><span class="line">     */</span><br><span class="line">    default &lt;V&gt; Function&lt;V, R&gt; compose(Function&lt;? super V, ? extends T&gt; before) &#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        return (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *  先执行调用者，然后再执行参数</span><br><span class="line">     *</span><br><span class="line">     * @param &lt;V&gt; the type of output of the &#123;@code after&#125; function, and of the</span><br><span class="line">     *           composed function</span><br><span class="line">     * @param after the function to apply after this function is applied</span><br><span class="line">     * @return a composed function that first applies this function and then</span><br><span class="line">     * applies the &#123;@code after&#125; function</span><br><span class="line">     * @throws NullPointerException if after is null</span><br><span class="line">     *</span><br><span class="line">     * @see #compose(Function)</span><br><span class="line">     */</span><br><span class="line">    default &lt;V&gt; Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after) &#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        return (T t) -&gt; after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回一个始终返回其输入参数的函数。</span><br><span class="line">     *</span><br><span class="line">     * @param &lt;T&gt; the type of the input and output objects to the function</span><br><span class="line">     * @return a function that always returns its input argument</span><br><span class="line">     */</span><br><span class="line">    static &lt;T&gt; Function&lt;T, T&gt; identity() &#123;</span><br><span class="line">        return t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以进行如下定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Integer,Integer&gt; f1 = n-&gt;n+2;</span><br></pre></td></tr></table></figure><p>在f1中，<code>n-&gt;n+2</code> 是Function接口中的抽象方法R apply(T t)的实现。</p><p>相关示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Function&lt;Integer,Integer&gt; f1 = n-&gt;n+2;</span><br><span class="line">        Function&lt;Integer,Integer&gt; f2 = n-&gt;n*3;</span><br><span class="line"></span><br><span class="line">//      identity  使用identity方法来产生一个Function对象，那么其apply方法的作用为：返回所传入apply方法中的参数</span><br><span class="line">        System.out.println(Function.identity().apply(2));</span><br><span class="line">//      andThen 先执行调用者，然后再执行参数 (10+2)*3</span><br><span class="line">        System.out.println(f1.andThen(f2).apply(10));</span><br><span class="line">//      compose 先执行参数，然后执行调用者 10*3+2</span><br><span class="line">        System.out.println(f1.compose(f2).apply(10));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、java-util-function包"><a href="#二、java-util-function包" class="headerlink" title="二、java.util.function包"></a>二、java.util.function包</h1><p>function包是JDK8新增的，该包中的接口大致分为了以下四类：</p><ul><li>Function: 接收参数，并返回结果，主要方法 R apply(T t)</li><li>Consumer: 接收参数，无返回结果, 主要方法为 void accept(T t)</li><li>Supplier: 不接收参数，但返回结构，主要方法为 T get()</li><li>Predicate: 接收参数，返回boolean值，主要方法为 boolean test(T t)</li></ul><ol><li>Function（函数）</li></ol><p>接收一个参数，并返回结果：</p><table><thead><tr><th align="left">Interface</th><th align="left">functional method</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Function&lt;T,R&gt;</td><td align="left">R apply(T t)</td><td align="left">接收参数类型为T，返回参数类型为R</td></tr><tr><td align="left">IntFunction<r></r></td><td align="left">R apply(int value)</td><td align="left">以下三个接口，指定了接收参数类型，返回参数类型为泛型R</td></tr><tr><td align="left">LongFunction<r></r></td><td align="left">R apply(long value)</td><td align="left"></td></tr><tr><td align="left">Double<r></r></td><td align="left">R apply(double value)</td><td align="left"></td></tr><tr><td align="left">ToIntFunction<t></t></td><td align="left">int applyAsInt(T value)</td><td align="left">以下三个接口，指定了返回参数类型，接收参数类型为泛型T</td></tr><tr><td align="left">ToLongFunction<t></t></td><td align="left">long applyAsLong(T value)</td><td align="left"></td></tr><tr><td align="left">ToDoubleFunction<t></t></td><td align="left">double applyAsDouble(T value)</td><td align="left"></td></tr><tr><td align="left">IntToLongFunction</td><td align="left">long applyAsLong(int value)</td><td align="left">以下六个接口，既指定了接收参数类型，也指定了返回参数类型</td></tr><tr><td align="left">IntToDoubleFunction</td><td align="left">double applyAsLong(int value)</td><td align="left"></td></tr><tr><td align="left">LongToIntFunction</td><td align="left">int applyAsLong(long value)</td><td align="left"></td></tr><tr><td align="left">LongToDoubleFunction</td><td align="left">double applyAsLong(long value)</td><td align="left"></td></tr><tr><td align="left">DoubleToIntFunction</td><td align="left">int applyAsLong(double value)</td><td align="left"></td></tr><tr><td align="left">DoubleToLongFunction</td><td align="left">long applyAsLong(double value)</td><td align="left"></td></tr><tr><td align="left">UnaryOperator<t></t></td><td align="left">T apply(T t)</td><td align="left">特殊的Function，接收参数类型和返回参数类型一样</td></tr><tr><td align="left">IntUnaryOperator</td><td align="left">int applyAsInt(int left, int right)</td><td align="left">以下三个接口，指定了接收参数和返回参数类型，并且都一样</td></tr><tr><td align="left">LongUnaryOperator</td><td align="left">long applyAsInt(long left, long right)</td><td align="left"></td></tr><tr><td align="left">DoubleUnaryOperator</td><td align="left">double applyAsInt(double left, double right)</td><td align="left"></td></tr></tbody></table><p>接受两个参数，并返回结果：</p><table><thead><tr><th align="left">interface</th><th align="left">functional method</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">BiFunction&lt;T,U,R&gt;</td><td align="left">R apply(T t, U u)</td><td align="left">接收两个参数的Function</td></tr><tr><td align="left">ToIntBiFunction&lt;T,U&gt;</td><td align="left">int applyAsInt(T t, U u)</td><td align="left">以下三个接口，指定了返回参数类型，接收参数类型分别为泛型T, U</td></tr><tr><td align="left">ToLongBiFunction&lt;T,U&gt;</td><td align="left">long applyAsLong(T t, U u)</td><td align="left"></td></tr><tr><td align="left">ToDoubleBiFunction&lt;T,U&gt;</td><td align="left">double appleyAsDouble(T t, U u)</td><td align="left"></td></tr><tr><td align="left">BinaryOperator<t></t></td><td align="left">T apply(T t, T u)</td><td align="left">特殊的BiFunction, 接收参数和返回参数类型一样</td></tr><tr><td align="left">IntBinaryOperator</td><td align="left">int applyAsInt(int left, int right)</td><td align="left"></td></tr><tr><td align="left">LongBinaryOperator</td><td align="left">long applyAsInt(long left, long right)</td><td align="left"></td></tr><tr><td align="left">DoubleBinaryOperator</td><td align="left">double applyAsInt(double left, double right)</td><td align="left"></td></tr></tbody></table><ol start="2"><li>Consumer（消费者）</li></ol><p>表示接收一个参数但不产生返回值：</p><table><thead><tr><th align="left">interface</th><th align="left">functional method</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Consumer<t></t></td><td align="left">void accept(T t)</td><td align="left">接收一个泛型参数，无返回值</td></tr><tr><td align="left">IntConsumer</td><td align="left">void accept(int value)</td><td align="left">以下三个类，接收一个指定类型的参数</td></tr><tr><td align="left">LongConsumer</td><td align="left">void accept(long value)</td><td align="left"></td></tr><tr><td align="left">DoubleConsumer</td><td align="left">void accept(double value)</td><td align="left"></td></tr></tbody></table><p>表示接收两个个参数但不产生返回值：</p><table><thead><tr><th align="left">interface</th><th align="left">functional method</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">BiConsumer&lt;T,U&gt;</td><td align="left">void accept(T t, U u)</td><td align="left">接收两个泛型参数</td></tr><tr><td align="left">ObjIntConsumer<t></t></td><td align="left">void accept(T t, int value)</td><td align="left">以下三个类，接收一个泛型参数，一个指定类型的参数</td></tr><tr><td align="left">ObjLongConsumer<t></t></td><td align="left">void accept(T t, long value)</td><td align="left"></td></tr><tr><td align="left">ObjDoubleConsumer<t></t></td><td align="left">void accept(T t, double value)</td><td align="left"></td></tr></tbody></table><ol start="3"><li>Supplier （提供者、创建对象）</li></ol><p>返回一个结果，并不要求每次调用都返回一个新的或者独一的结果：</p><table><thead><tr><th align="left">interface</th><th align="left">functional method</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Supplier<t></t></td><td align="left">T get()</td><td align="left">返回类型为泛型T</td></tr><tr><td align="left">BooleanSupplier</td><td align="left">boolean getAsBoolean()</td><td align="left">以下三个接口，返回指定类型</td></tr><tr><td align="left">IntSupplier</td><td align="left">int getAsInt()</td><td align="left"></td></tr><tr><td align="left">LongSupplier</td><td align="left">long getAsLong()</td><td align="left"></td></tr><tr><td align="left">DoubleSupplier</td><td align="left">double getAsDouble()</td><td align="left"></td></tr></tbody></table><ol start="4"><li>Predicate（断言）</li></ol><p>根据接收参数进行断言，返回boolean类型：</p><table><thead><tr><th align="left">interface</th><th align="left">functional method</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Predicate<t></t></td><td align="left">boolean test(T t)</td><td align="left">接收一个泛型参数</td></tr><tr><td align="left">IntPredicate</td><td align="left">boolean test(int value)</td><td align="left">以下三个接口，接收指定类型的参数</td></tr><tr><td align="left">LongPredicate</td><td align="left">boolean test(long value)</td><td align="left"></td></tr><tr><td align="left">DoublePredicate</td><td align="left">boolean test(double value)</td><td align="left"></td></tr><tr><td align="left">BiPredicate&lt;T,U&gt;</td><td align="left">boolean test(T t, U u)</td><td align="left">接收两个泛型参数，分别为T，U</td></tr></tbody></table><p>相关示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">//        创建对象</span><br><span class="line">        Supplier&lt;Test&gt; supplier = Test::new;</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line"></span><br><span class="line">        BooleanSupplier booleanSupplier = ()-&gt;7&gt;9;</span><br><span class="line">        System.out.println(booleanSupplier.getAsBoolean());</span><br><span class="line"></span><br><span class="line">        IntSupplier intSupplier = ()-&gt; 6*76;</span><br><span class="line">        System.out.println(intSupplier.getAsInt());</span><br><span class="line"></span><br><span class="line">        LongSupplier longSupplier = ()-&gt; 33*762;</span><br><span class="line">        System.out.println(longSupplier.getAsLong());</span><br><span class="line"></span><br><span class="line">//        断言</span><br><span class="line">        Predicate&lt;String&gt; predicate = (s)-&gt; s.matches(&quot;^[a-z][\\w]*&quot;);</span><br><span class="line">        System.out.println(predicate.test(&quot;abc&quot;));</span><br><span class="line">        System.out.println(predicate.test(&quot;1abc&quot;));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、参考资料"><a href="#三、参考资料" class="headerlink" title="三、参考资料"></a>三、参考资料</h1><blockquote><p><a href="https://segmentfault.com/a/1190000016596774" target="_blank" rel="noopener">java 8 函数式接口</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Function接口是JDK8定义的一个函数式接口；函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。函数式接口可以被隐式转换为 lambda 表达式。&lt;/p&gt;
&lt;h1 id=&quot;一、Function接口&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="jdk" scheme="http://zws6672.top/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>java Stream 流的使用</title>
    <link href="http://zws6672.top/2021/05/18/java-stream/"/>
    <id>http://zws6672.top/2021/05/18/java-stream/</id>
    <published>2021-05-18T07:28:20.000Z</published>
    <updated>2021-05-18T07:30:02.552Z</updated>
    
    <content type="html"><![CDATA[<p>Java 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据。Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。</p><h1 id="一、相关源码"><a href="#一、相关源码" class="headerlink" title="一、相关源码"></a>一、相关源码</h1><p>Stream流相关源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">public interface Stream&lt;T&gt; extends BaseStream&lt;T, Stream&lt;T&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);</span><br><span class="line">    IntStream mapToInt(ToIntFunction&lt;? super T&gt; mapper);</span><br><span class="line">    LongStream mapToLong(ToLongFunction&lt;? super T&gt; mapper);</span><br><span class="line">    DoubleStream mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper);</span><br><span class="line"></span><br><span class="line">    &lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper);</span><br><span class="line">    IntStream flatMapToInt(Function&lt;? super T, ? extends IntStream&gt; mapper);</span><br><span class="line">    LongStream flatMapToLong(Function&lt;? super T, ? extends LongStream&gt; mapper);</span><br><span class="line">    DoubleStream flatMapToDouble(Function&lt;? super T, ? extends DoubleStream&gt; mapper);</span><br><span class="line"></span><br><span class="line">    Stream&lt;T&gt; distinct();</span><br><span class="line">    Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);</span><br><span class="line">    Stream&lt;T&gt; sorted();</span><br><span class="line">    Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator);</span><br><span class="line">    Stream&lt;T&gt; peek(Consumer&lt;? super T&gt; action);</span><br><span class="line">    Stream&lt;T&gt; limit(long maxSize);</span><br><span class="line">    Stream&lt;T&gt; skip(long n);</span><br><span class="line"></span><br><span class="line">    void forEach(Consumer&lt;? super T&gt; action);</span><br><span class="line">    void forEachOrdered(Consumer&lt;? super T&gt; action);</span><br><span class="line"></span><br><span class="line">    Object[] toArray();</span><br><span class="line">    &lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt; generator);</span><br><span class="line"></span><br><span class="line">    T reduce(T identity, BinaryOperator&lt;T&gt; accumulator);</span><br><span class="line">    Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</span><br><span class="line">    &lt;U&gt; U reduce(U identity,</span><br><span class="line">                 BiFunction&lt;U, ? super T, U&gt; accumulator,</span><br><span class="line">                 BinaryOperator&lt;U&gt; combiner);</span><br><span class="line">    Optional&lt;T&gt; min(Comparator&lt;? super T&gt; comparator);</span><br><span class="line">    Optional&lt;T&gt; max(Comparator&lt;? super T&gt; comparator);</span><br><span class="line">    long count();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;R&gt; R collect(Supplier&lt;R&gt; supplier,</span><br><span class="line">                  BiConsumer&lt;R, ? super T&gt; accumulator,</span><br><span class="line">                  BiConsumer&lt;R, R&gt; combiner);</span><br><span class="line">    &lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    boolean anyMatch(Predicate&lt;? super T&gt; predicate);</span><br><span class="line">    boolean allMatch(Predicate&lt;? super T&gt; predicate);</span><br><span class="line">    boolean noneMatch(Predicate&lt;? super T&gt; predicate);</span><br><span class="line"></span><br><span class="line">    Optional&lt;T&gt; findFirst();</span><br><span class="line">    Optional&lt;T&gt; findAny();</span><br><span class="line"></span><br><span class="line">    // 用于生成流</span><br><span class="line">    public static&lt;T&gt; Builder&lt;T&gt; builder() &#123;</span><br><span class="line">        return new Streams.StreamBuilderImpl&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">// 返回空的顺序流</span><br><span class="line">    public static&lt;T&gt; Stream&lt;T&gt; empty() &#123;</span><br><span class="line">        return StreamSupport.stream(Spliterators.&lt;T&gt;emptySpliterator(), false);</span><br><span class="line">    &#125;</span><br><span class="line">//返回包含单个元素的顺序流</span><br><span class="line">    public static&lt;T&gt; Stream&lt;T&gt; of(T t) &#123;</span><br><span class="line">        return StreamSupport.stream(new Streams.StreamBuilderImpl&lt;&gt;(t), false);</span><br><span class="line">    &#125;</span><br><span class="line">// 返回包含多个的顺序流</span><br><span class="line">    @SafeVarargs</span><br><span class="line">    @SuppressWarnings(&quot;varargs&quot;) // Creating a stream from an array is safe</span><br><span class="line">    public static&lt;T&gt; Stream&lt;T&gt; of(T... values) &#123;</span><br><span class="line">        return Arrays.stream(values);</span><br><span class="line">    &#125;</span><br><span class="line">// 用于创建无限流</span><br><span class="line">    public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f) &#123;</span><br><span class="line">        Objects.requireNonNull(f);</span><br><span class="line">        final Iterator&lt;T&gt; iterator = new Iterator&lt;T&gt;() &#123;</span><br><span class="line">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">            T t = (T) Streams.NONE;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public boolean hasNext() &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public T next() &#123;</span><br><span class="line">                return t = (t == Streams.NONE) ? seed : f.apply(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(</span><br><span class="line">                iterator,</span><br><span class="line">                Spliterator.ORDERED | Spliterator.IMMUTABLE), false);</span><br><span class="line">    &#125;</span><br><span class="line">// 返回无限顺序无序流</span><br><span class="line">    public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s) &#123;</span><br><span class="line">        Objects.requireNonNull(s);</span><br><span class="line">        return StreamSupport.stream(</span><br><span class="line">                new StreamSpliterators.InfiniteSupplyingSpliterator.OfRef&lt;&gt;(Long.MAX_VALUE, s), false);</span><br><span class="line">    &#125;</span><br><span class="line">// concat可以把两个流组合为一个流</span><br><span class="line">    public static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b) &#123;</span><br><span class="line">        Objects.requireNonNull(a);</span><br><span class="line">        Objects.requireNonNull(b);</span><br><span class="line"></span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        Spliterator&lt;T&gt; split = new Streams.ConcatSpliterator.OfRef&lt;&gt;(</span><br><span class="line">                (Spliterator&lt;T&gt;) a.spliterator(), (Spliterator&lt;T&gt;) b.spliterator());</span><br><span class="line">        Stream&lt;T&gt; stream = StreamSupport.stream(split, a.isParallel() || b.isParallel());</span><br><span class="line">        return stream.onClose(Streams.composedClose(a, b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public interface Builder&lt;T&gt; extends Consumer&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        void accept(T t);</span><br><span class="line"></span><br><span class="line">        default Builder&lt;T&gt; add(T t) &#123;</span><br><span class="line">            accept(t);</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stream&lt;T&gt; build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、方法说明与示例"><a href="#二、方法说明与示例" class="headerlink" title="二、方法说明与示例"></a>二、方法说明与示例</h1><ol><li>map、mapToXXX、collect</li></ol><p>Stream提供了 mapToInt、mapToLong、mapToDouble、map等几个方法，用于将数据包装为其它类型的数据；map需要通过实现Function接口来自定义数据转换。 map 用于改变流中元素本身类型，即从元素中派生出另一种类型的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(&quot;2&quot;);</span><br><span class="line">        list.add(&quot;22&quot;);</span><br><span class="line">        list.add(&quot;222&quot;);</span><br><span class="line">        list.add(&quot;12&quot;);</span><br><span class="line">        list.add(&quot;23&quot;);</span><br><span class="line"></span><br><span class="line">        list.stream().mapToInt(str-&gt; Integer.parseInt(str)).forEach(System.out::println);</span><br><span class="line">        list.stream().mapToLong(str-&gt; Long.parseLong(str)).forEach(System.out::println);;</span><br><span class="line">        list.stream().mapToDouble(str-&gt; Double.parseDouble(str)).forEach(System.out::println);</span><br><span class="line">        list.stream().map(new Function&lt;String, Object&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object apply(String s) &#123;</span><br><span class="line">                return &quot;输出：&quot;+s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).forEach(System.out::println);;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 交集</span><br><span class="line">List&lt;T&gt; intersect = list1.stream()</span><br><span class="line">                         .filter(list2::contains)</span><br><span class="line">                         .collect(Collectors.toList());</span><br><span class="line">// 差集(list1 - list2)</span><br><span class="line">List&lt;String&gt; reduce1 = list1.stream().filter(item -&gt; !list2.contains(item)).collect(toList());</span><br><span class="line"></span><br><span class="line">// 使用并行流求并集</span><br><span class="line">List&lt;String&gt; listAll = list1.parallelStream().collect(toList());</span><br><span class="line">List&lt;String&gt; listAll2 = list2.parallelStream().collect(toList());</span><br><span class="line">listAll.addAll(listAll2);</span><br></pre></td></tr></table></figure><ol start="2"><li>flatMap、flatMapToXXX</li></ol><p>这是stream的一种中间操作，它和stream的map一样，是一种收集类型的stream中间操作，但是与map不同的是，它可以对stream流中单个元素再进行拆分（切片），相当于双重for循环。该类型的方法是二维转一维。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(&quot;2&quot;);</span><br><span class="line">        list.add(&quot;22&quot;);</span><br><span class="line">        list.add(&quot;222&quot;);</span><br><span class="line">        list.add(&quot;12&quot;);</span><br><span class="line">        list.add(&quot;23&quot;);</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; list2 = new ArrayList&lt;&gt;();</span><br><span class="line">        list2.add(new ArrayList&lt;&gt;(Arrays.asList(&quot;2&quot;,&quot;22&quot;)));</span><br><span class="line">        list2.add(new ArrayList&lt;&gt;(Arrays.asList(&quot;222&quot;,&quot;12&quot;)));</span><br><span class="line">        list2.add(new ArrayList&lt;&gt;(Arrays.asList(&quot;23&quot;)));</span><br><span class="line"></span><br><span class="line">        list.stream().flatMapToInt(s-&gt; IntStream.of(Integer.parseInt(s))).forEach(System.out::println);</span><br><span class="line">        list.stream().flatMapToDouble(s-&gt; DoubleStream.of(Double.parseDouble(s))).forEach(System.out::println);</span><br><span class="line">        list.stream().flatMapToLong(s-&gt; LongStream.of(Long.parseLong(s))).forEach(System.out::println);</span><br><span class="line">//        实现集合的并、交、差操作</span><br><span class="line">        list2.stream().flatMap(s-&gt;s.stream().map(word -&gt; Integer.parseInt(word))).sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>distinct、filter、sorted、peek、limit、skip（数据处理）</li></ol><ul><li>distinct列表去重；</li><li>filter 用于数据过滤，支持自定义比较器</li><li>sorted 数据排序</li><li>peek debug时用于输出，peek 操作接收的是一个 Consumer<t> 函数。顾名思义 peek 操作会按照 Consumer<t> 函数提供的逻辑去消费流中的每一个元素，同时有可能改变元素内部的一些属性</t></t></li><li>limit、skip 用于实现分页</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">     List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">     list.add(&quot;2&quot;);</span><br><span class="line">     list.add(&quot;2&quot;);</span><br><span class="line">     list.add(&quot;22&quot;);</span><br><span class="line">     list.add(&quot;222&quot;);</span><br><span class="line">     list.add(&quot;222&quot;);</span><br><span class="line">     list.add(&quot;12&quot;);</span><br><span class="line">     list.add(&quot;23&quot;);</span><br><span class="line">     list.stream().peek(new Consumer&lt;String&gt;() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void accept(String s) &#123;</span><br><span class="line">             System.out.println(&quot;数据起始状态：&quot;+s);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;).mapToInt(Integer::parseInt).distinct().sorted().forEach(System.out::println);</span><br><span class="line">     System.out.println(&quot;分页示例：&quot;);</span><br><span class="line">     list.stream().mapToInt(Integer::parseInt).distinct().sorted().skip(2).limit(2).forEach(System.out::println);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>forEach、forEachOrdered、toArray<br>forEachOrdered 并行流下保证有序，而forEach是无序的；toArray用于转换为数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(&quot;2&quot;);</span><br><span class="line">        list.add(&quot;22&quot;);</span><br><span class="line">        list.add(&quot;222&quot;);</span><br><span class="line">        list.add(&quot;12&quot;);</span><br><span class="line">        list.add(&quot;23&quot;);</span><br><span class="line">        list.stream().parallel().forEach(System.out::println);</span><br><span class="line">        System.out.println(&quot;forEachOrdered 并行流下是有序的：&quot;);</span><br><span class="line">        list.stream().parallel().forEachOrdered(System.out::println);</span><br><span class="line">//        转换为数组</span><br><span class="line">        list.stream().toArray();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>聚合运算（reduce、max、min、count）</p></li></ol><ul><li>reduce 用于对stream中元素进行聚合求值；</li><li>max 用于对stream中元素求最大值</li><li>min 用于对stream中元素求最小值</li><li>count 用于获取stream元素总个数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">    list.add(&quot;2&quot;);</span><br><span class="line">    list.add(&quot;3&quot;);</span><br><span class="line">    list.add(&quot;6&quot;);</span><br><span class="line">    list.add(&quot;4&quot;);</span><br><span class="line">    list.add(&quot;5&quot;);</span><br><span class="line">    int res = list.stream().mapToInt(Integer::parseInt).reduce((a,b)-&gt;a*b).getAsInt();</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;max:&quot;+list.stream().mapToInt(Integer::parseInt).max().getAsInt());</span><br><span class="line">    System.out.println(&quot;min:&quot;+list.stream().mapToInt(Integer::parseInt).min().getAsInt());</span><br><span class="line">    System.out.println(&quot;count:&quot;+list.stream().mapToInt(Integer::parseInt).count());</span><br><span class="line">    System.out.println(&quot;reduce:&quot;+res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>anyMatch、allMatch、noneMatch、findFirst、findAny</li></ol><p>boolean anyMatch(Predicate&lt;? super T&gt; predicate)</p><ul><li>只要有一个条件满足即返回true</li></ul><p>boolean allMatch(Predicate&lt;? super T&gt; predicate)</p><ul><li>必须全部都满足才会返回true</li></ul><p>boolean noneMatch(Predicate&lt;? super T&gt; predicate)</p><ul><li>全都不满足才会返回true</li></ul><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph.nodes().stream().filter(n -&gt; n instanceof FMUProxy)</span><br><span class="line">.noneMatch(n -&gt; n instanceof FMU3Proxy) ? stepperV2() : stepperV3();</span><br></pre></td></tr></table></figure><p>以上的lamda表达式做了以下几件事：</p><ul><li>将List转换为stream流</li><li>过滤非FMUProxy接口的顶点</li><li>如果都不是FMU3Proxy接口（v3）,noneMatch返回true（运行stepperV2()）；否则返回false（运行stepperV3()）</li></ul><p>findFirst用于返回第一个元素；findAny在使用过滤器后（无论存在任何剩余元素），都可以（随机）返回该元素中的任何元素，尤其是在并行流操作中 。</p><ol start="7"><li>其余方法</li></ol><ul><li>builder 用于生成流</li><li>empty 返回空的顺序流</li><li>of 返回包含元素的顺序流</li><li>iterate 用于创建无限流</li><li>generate 返回无限顺序无序流</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Stream.iterate(1, n-&gt;n*2).limit(10).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    Stream.generate(new Random()::nextInt)</span><br><span class="line">            .limit(5).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Java 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据。Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。&lt;/p&gt;
&lt;h1 id=&quot;一、相关源码&quot;&gt;&lt;a href=&quot;#一</summary>
      
    
    
    
    
    <category term="java" scheme="http://zws6672.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>tarjin算法</title>
    <link href="http://zws6672.top/2021/05/18/daccosim-tarjin/"/>
    <id>http://zws6672.top/2021/05/18/daccosim-tarjin/</id>
    <published>2021-05-18T03:45:51.000Z</published>
    <updated>2021-05-26T03:44:59.008Z</updated>
    
    <content type="html"><![CDATA[<p>daccosim运行功能相关源码中使用了tarjin算法；该算法包含了一种求解有向图强连通分量的线性时间的算法，该算法也可以在线性时间内求出无向图的割点与桥。</p><h1 id="一、Tarjan"><a href="#一、Tarjan" class="headerlink" title="一、Tarjan"></a>一、Tarjan</h1><ol><li>Tarjan 算法</li></ol><p>Tarjan 算法是一种由Robert Tarjan提出的求解有向图强连通分量的线性时间的算法。Tarjan 算法是图论中非常实用 / 常用的算法之一，能解决强连通分量，双连通分量，割点和桥，求最近公共祖先（LCA）等问题。</p><p>Tarjan 算法是基于深度优先搜索的算法，用于求解图的连通性问题。Tarjan 算法可以在线性时间内求出无向图的割点与桥，进一步地可以求解无向图的双连通分量；同时，也可以求解有向图的强连通分量、必经点与必经边。</p><ol start="2"><li>强连通</li></ol><p>如果两个顶点可以相互通达，则称两个顶点强连通(strongly connected)。如果有向图G的每两个顶点都强连通，称G是一个强连通图。有向图的极大强连通子图，称为强连通分量(strongly connected components)。</p><p>如果非强连通图有向图的极大强连通子图，称为强连通重量(strongly connected components)</p><ol start="3"><li>相关定义</li></ol><ul><li><p>割点：若从图中删除节点 x 以及所有与 x 关联的边之后，图将被分成两个或两个以上的不相连的子图，那么称 x 为图的割点。</p></li><li><p>桥：若从图中删除边 e 之后，图将分裂成两个不相连的子图，那么称 e 为图的桥或割边。</p></li><li><p>时间戳：用来标记图中每个节点在进行深度优先搜索时被访问的时间顺序，定义DFN(u)为节点u搜索的次序编号(时间戳)。</p></li><li><p>追溯值：追溯值用来表示从当前节点作为搜索树的根节点出发，能够访问到的所有节点中，时间戳最小的值，定义Low(u)为u或u的子树能够追溯到的最早的栈中节点的次序号</p></li></ul><p>当DFN(u)=Low(u)时，以u为根的搜索子树上所有节点是一个强连通分量。</p><ol start="4"><li>求解割点和割边</li></ol><p>对于图G(V,E)，根据定义，如果要求解割点则需要三步：</p><ul><li>BFS跑一遍图，记录下G(V,E)的连通分量为C。</li><li>枚举所有顶点v_i并删除，再用BFS跑一边删除顶点后的子图，求出子图的连通分量C_i。</li><li>比较C和C_i，如果C_i &lt; C则说明v_i是割点，反之不是</li></ul><ol start="4"><li>算法内容</li></ol><p>Tarjan算法是基于对图深度优先搜索的算法，每个强连通分量为搜索树中的一棵子树。搜索时，把当前搜索树中未处理的节点加入一个堆栈，回溯时可以判断栈顶到栈中的节点是否为一个强连通分量。相关步骤如下：</p><ul><li>当首次搜寻到点u时DFN[u]=LOW[u]=time;</li><li>每当搜寻到一个点，把该点压入栈顶;</li><li>当u和v有边相连时:<ul><li>如果v不在栈中（树枝边），DFS(v)，并且LOW[u] = min{LOW(u),LOW(v)};</li><li>如果v在栈中（前向边/后向边），此时LOW[u] = min{LOW[u],DFN[v]}</li></ul></li><li>当DFN[u]=LOW[u]时，将它以及在它之上的元素弹出栈，此时，弹出栈的结点形成一个强连通重量;</li><li>持续搜寻，晓得图被遍历结束。</li><li>因为在这个过程中每个点只被拜访一次，每条边也只被拜访一次，所以Tarjan算法的工夫复杂度是O(n+m).</li></ul><p>例如下图所示<br><img src="/image/co-simulation/tarjin.png" alt="tarjin算法"></p><ul><li>从节点1开始DFS，把遍历到的节点加入栈中。搜索到节点u=6时，DFN[6]=LOW[6]，找到了一个强连通分量。退栈到u=v为止，{6}为一个强连通分量。</li><li>返回节点5，发现DFN[5]=LOW[5]，退栈后{5}为一个强连通分量。</li><li>返回节点3，继续搜索到节点4，把4加入堆栈。发现节点4向节点1有后向边，节点1还在栈中，所以LOW[4]=1。节点6已经出栈，(4,6)是横叉边，返回3，(3,4)为树枝边，所以LOW[3]=LOW[4]=1。</li><li>继续回到节点1，最后访问节点2。访问边(2,4)，4还在栈中，所以LOW[2]=DFN[4]=5。返回1后，发现DFN[1]=LOW[1]，把栈中节点全部取出，组成一个连通分量{1,3,4,2}。</li><li>至此，算法结束。经过该算法，求出了图中全部的三个强连通分量{1,3,4,2},{5},{6}。</li><li>可以发现，运行Tarjan算法的过程中，每个顶点都被访问了一次，且只进出了一次堆栈，每条边也只被访问了一次，所以该算法的时间复杂度为O(N+M)。</li></ul><ol start="5"><li>相关代码<br>以下的代码是daccosim源码中，为求解强联通分量定义的相关类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Author zws</span><br><span class="line"> * @Description （源码解读）Tarjan 算法：一种由Robert Tarjan提出的求解有向图强连通分量的算法</span><br><span class="line"> * @Date 10:01 2021/5/18</span><br><span class="line"> **/</span><br><span class="line">private static class Tarjan &#123;</span><br><span class="line">private int V, preCount;</span><br><span class="line">private int[] low;</span><br><span class="line">private boolean[] visited;</span><br><span class="line">private List&lt;Integer&gt;[] graph;</span><br><span class="line">//强连通分量</span><br><span class="line">private List&lt;List&lt;Integer&gt;&gt; sccComp;</span><br><span class="line">private Stack&lt;Integer&gt; stack;</span><br><span class="line"></span><br><span class="line">List&lt;List&lt;Arrow&gt;&gt; getSCComponents(Graph graph) &#123;</span><br><span class="line">V = graph.nodes().size();</span><br><span class="line">this.graph = toTarjanGraph(graph);</span><br><span class="line">low = new int[V];</span><br><span class="line">//visited 表示已遍历的顶点</span><br><span class="line">visited = new boolean[V];</span><br><span class="line">stack = new Stack&lt;&gt;();</span><br><span class="line">sccComp = new ArrayList&lt;&gt;();</span><br><span class="line">for (int v = 0; v &lt; V; v++)</span><br><span class="line">if (!visited[v])</span><br><span class="line">dfs(v);</span><br><span class="line"></span><br><span class="line">return toArrows(graph, sccComp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author zws</span><br><span class="line"> * @Description （源码解读）强连通分量转换为Arrow</span><br><span class="line"> * @Date 11:25 2021/5/18</span><br><span class="line"> * @Param graph</span><br><span class="line"> * @Param sccComp 强连通分量</span><br><span class="line"> * @return List&lt;List&lt;Arrow&gt;&gt;</span><br><span class="line"> **/</span><br><span class="line">private List&lt;List&lt;Arrow&gt;&gt; toArrows(Graph graph, List&lt;List&lt;Integer&gt;&gt; sccComp) &#123;</span><br><span class="line">List&lt;List&lt;Arrow&gt;&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">Map&lt;GraphNode, Integer&gt; nodeIndex = range(0, graph.nodes().size()).boxed().collect(toMap(i -&gt; graph.nodes().get(i), i -&gt; i));</span><br><span class="line">for (int i = 0; i &lt; sccComp.size(); i++) &#123;</span><br><span class="line">result.add(new ArrayList&lt;&gt;());</span><br><span class="line">for (Arrow arrow : graph.arrows()) &#123;</span><br><span class="line">if (sccComp.get(i).contains(nodeIndex.get(arrow.fromNode())) &amp;&amp;</span><br><span class="line">sccComp.get(i).contains(nodeIndex.get(arrow.toNode())))</span><br><span class="line">result.get(i).add(arrow);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return result.stream().filter(l -&gt; !l.isEmpty()).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author zws</span><br><span class="line"> * @Description （源码解读） Graph --&gt; Tarjan图</span><br><span class="line"> * @Date 10:12 2021/5/18</span><br><span class="line"> * @Param graph</span><br><span class="line"> * @return List&lt;Integer&gt;[]</span><br><span class="line"> **/</span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">private List&lt;Integer&gt;[] toTarjanGraph(Graph graph) &#123;</span><br><span class="line">List&lt;Integer&gt;[] result = new List[graph.nodes().size()];</span><br><span class="line">//&lt;顶点，序列号&gt;</span><br><span class="line">Map&lt;GraphNode, Integer&gt; nodeIndex = range(0, graph.nodes().size()).boxed().collect(toMap(i -&gt; graph.nodes().get(i), i -&gt; i));</span><br><span class="line">range(0, graph.nodes().size()).forEach(i -&gt; result[i] = new ArrayList&lt;&gt;());</span><br><span class="line">//list[i] 表示顶点；list[i].get(0) 表达顶点指向的第一个顶点</span><br><span class="line">for (Arrow arrow : graph.arrows())</span><br><span class="line">result[nodeIndex.get(arrow.fromNode())].add(nodeIndex.get(arrow.toNode()));</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author zws</span><br><span class="line"> * @Description （源码解读）tarjin图-深度搜索</span><br><span class="line"> * 时间戳：用来标记图中每个节点在进行深度优先搜索时被访问的时间顺序，定义DFN(u)为节点u搜索的次序编号(时间戳)。</span><br><span class="line"> * 追溯值：追溯值用来表示从当前节点作为搜索树的根节点出发，能够访问到的所有节点中，时间戳最小的值，定义Low(u)为u或u的子树能够追溯到的最早的栈中节点的次序号</span><br><span class="line"> * graph[v] 联通的顶点</span><br><span class="line"> * @Date 10:13 2021/5/18</span><br><span class="line"> * @Param v</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">private void dfs(int v) &#123;</span><br><span class="line">low[v] = preCount++;</span><br><span class="line">visited[v] = true;</span><br><span class="line">stack.push(v);</span><br><span class="line">int min = low[v];</span><br><span class="line">for (int w : graph[v]) &#123;</span><br><span class="line">if (!visited[w])</span><br><span class="line">dfs(w);</span><br><span class="line">if (low[w] &lt; min)</span><br><span class="line">min = low[w];</span><br><span class="line">&#125;</span><br><span class="line">if (min &lt; low[v]) &#123;</span><br><span class="line">low[v] = min;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Integer&gt; component = new ArrayList&lt;&gt;();</span><br><span class="line">int w;</span><br><span class="line">do &#123;</span><br><span class="line">w = stack.pop();</span><br><span class="line">component.add(w);</span><br><span class="line">low[w] = V;</span><br><span class="line">&#125; while (w != v);</span><br><span class="line">sccComp.add(component);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="二、参考资料"><a href="#二、参考资料" class="headerlink" title="二、参考资料"></a>二、参考资料</h1><blockquote><p><a href="https://www.cnblogs.com/shadowland/p/5872257.html" target="_blank" rel="noopener">Tarjan 算法&amp;模板</a><br><a href="https://baike.baidu.com/item/tarjan%E7%AE%97%E6%B3%95/10687825?fr=aladdin#1" target="_blank" rel="noopener">tarjan算法</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;daccosim运行功能相关源码中使用了tarjin算法；该算法包含了一种求解有向图强连通分量的线性时间的算法，该算法也可以在线性时间内求出无向图的割点与桥。&lt;/p&gt;
&lt;h1 id=&quot;一、Tarjan&quot;&gt;&lt;a href=&quot;#一、Tarjan&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="co-simulation" scheme="http://zws6672.top/tags/co-simulation/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 优化(一)设计与功能优化</title>
    <link href="http://zws6672.top/2021/05/16/mysql-opt/"/>
    <id>http://zws6672.top/2021/05/16/mysql-opt/</id>
    <published>2021-05-16T05:56:21.000Z</published>
    <updated>2021-05-16T05:57:12.405Z</updated>
    
    <content type="html"><![CDATA[<p>MYSQL优化包括设计、功能、架构与高性能SQL几个方面。Mysql优化，一方面是找出系统的瓶颈，提高mysql数据库整体的性能，另外一个方面需要合理的结构设计和参数调整，以提高用户操作响应的速度。同时还要尽可能节省系统资源，以便系统可以提供更大负荷的服务。mysql数据库优化是多方面的，原则是减少系统的瓶颈，减少资源的占用，增加系统反应的速度。</p><ul><li>设计：存储引擎，字段类型，范式与逆范式</li><li>功能：索引，缓存，分区分表</li><li>高性能SQL：SQL优化、explain</li><li>架构：主从复制，读写分离，负载均衡。</li></ul><h1 id="一、设计优化"><a href="#一、设计优化" class="headerlink" title="一、设计优化"></a>一、设计优化</h1><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>存储引擎是一种用来存储MySQL中对象（记录和索引）的一种特定的结构（文件结构），处于MySQL服务器的最底层，直接存储数据</p><p>指定存储引擎：<code>Create table tableName () engine=myisam|innodb</code></p><ol><li>查询支持的引擎</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show engines;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Engine</th><th align="left">Support</th><th align="left">Comment</th><th align="left">Transactions</th><th align="left">XA</th><th align="left">Savepoints</th></tr></thead><tbody><tr><td align="left">MEMORY</td><td align="left">YES</td><td align="left">基于哈希的，存储在内存中，对临时表有用</td><td align="left">NO</td><td align="left">NO</td><td align="left">NO</td></tr><tr><td align="left">MRG_MYISAM</td><td align="left">YES</td><td align="left">与MyISAM表相同的集合</td><td align="left">NO</td><td align="left">NO</td><td align="left">NO</td></tr><tr><td align="left">CSV</td><td align="left">YES</td><td align="left">CSV存储引擎</td><td align="left">NO</td><td align="left">NO</td><td align="left">NO</td></tr><tr><td align="left">FEDERATED</td><td align="left">NO</td><td align="left">联合MySQL存储引擎</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">PERFORMANCE_SCHEMA</td><td align="left">YES</td><td align="left">性能模式</td><td align="left">NO</td><td align="left">NO</td><td align="left">NO</td></tr><tr><td align="left">MyISAM</td><td align="left">YES</td><td align="left">MyISAM存储引擎</td><td align="left">NO</td><td align="left">NO</td><td align="left">NO</td></tr><tr><td align="left">InnoDB</td><td align="left">DEFAULT</td><td align="left">支持事务、行级锁定和外键</td><td align="left">YES</td><td align="left">YES</td><td align="left">YES</td></tr><tr><td align="left">BLACKHOLE</td><td align="left">YES</td><td align="left">/dev/null存储引擎（您向其写入的任何内容都将消失）</td><td align="left">NO</td><td align="left">NO</td><td align="left">NO</td></tr><tr><td align="left">ARCHIVE</td><td align="left">YES</td><td align="left">存档存储引擎</td><td align="left">NO</td><td align="left">NO</td><td align="left">NO</td></tr></tbody></table><blockquote><p>注：engine：引擎名称<br>suppot：MySQL数据库是否支持<br>comment：说明<br>transactions：是够支持事务<br>xa：是否支持XA事务（分布式事务）<br>savepoints：是否支持保存savepoints之间的内容</p></blockquote><ol start="2"><li>InnoDB存储引擎</li></ol><p>Mysql版本&gt;=5.5 默认的存储引擎，MySQL推荐使用的存储引擎。支持事务，行级锁定，外键约束。事务安全型存储引擎。更加注重数据的完整性和安全性。innodb擅长事务、数据的完整性及高并发处理，不擅长快速插入（插入前要排序，消耗时间）和检索</p><p>创建数据库表后生成如下文件：</p><ul><li>db.opt存放了数据库的配置信息，比如数据库的字符集还有编码格式</li><li>XX.frm是表结构文件，仅存储了表的结构、元数据(meta)，包括表结构定义信息等；表引擎都会有一个frm文件。</li><li>XX.ibd是表索引文件，包括了单独一个表的数据及索引内容。</li></ul><p>共享表空间<br>    +    Innodb的所有数据保存在一个单独的表空间里面，而这个表空间可以由很多个文件组成，一个表可以跨多个文件存在，所以其大小限制不再是文件大小的限制，而是其自身的限制。其表空间的最大限制为64TB，也就是说，Innodb的单表限制基本上也在64TB左右。<br>    +    优点：表空间可以分成多个文件存放到各个磁盘，所以表也就可以分成多个文件存放在磁盘上，表的大小不受磁盘大小的限制<br>    +    缺点：所有的数据和索引存放到一个文件，虽然可以把一个大文件分成多个小文件，但是多个表及索引在表空间中混合存储，当数据量非常大的时候，表做了大量删除操作后表空间中将会有大量的空隙，特别是对于统计分析，对于经常删除操作的这类应用最不适合用共享表空间；共享表空间分配后不能回缩：当出现临时建索引或是创建一个临时表的操作表空间扩大后，就是删除相关的表也没办法回缩那部分空间了。<br>独立表空间<br>    +    独立表空间是把每个表的数据和表文件放在一起，每表对应一个 idb文件<br>    +    优点：每个表都有自已独立的表空间，每个表的数据和索引都会存在自已的表空间中，可以实现单表在不同的数据库中移动。<br>    +    缺点：单表增加过大，当单表占用空间过大时，存储空间不足，只能从操作系统层面思考解决方法</p><p>InnoDB采用按表空间（tablespace)的方式进行存储数据, 默认配置情况下会有一个初始大小为10MB， 名字为ibdata1的文件， 该文件就是默认的表空间文件（tablespce file），用户可以通过参数innodb_data_file_path对其进行设置，可以有多个数据文件，如果没有设置innodb_file_per_table的话， 那些Innodb存储类型的表的数据都放在这个共享表空间中，而系统变量innodb_file_per_table=1的话，那么InnoDB存储引擎类型的表就会产生一个独立表空间，独立表空间的命名规则为：表名.idb. 这些单独的表空间文件仅存储该表的数据、索引和插入缓冲BITMAP等信息，其它信息还是存放在共享表空间中。</p><p>查看是否开启独立表空间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;innodb_file_per_table&apos;</span><br><span class="line">innodb_file_per_tableON  </span><br><span class="line">OFF 代表mysql是共享表空间，也就是所有库的数据都存放在一个ibdate1文件中</span><br><span class="line">ON 表示mysql是独立表空间</span><br></pre></td></tr></table></figure><p>开启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在my.conf文件中[mysqld] 顶点下添加innodb_file_per_table=1</span><br><span class="line"></span><br><span class="line">或者通过命令：set global innodb_file_per_table=1;</span><br><span class="line">innodb_file_per_table=1 为使用独占表空间</span><br><span class="line">innodb_file_per_table=0 为使用共享表空间</span><br><span class="line">innodb_data_home_dir = &quot;C:\mysql\data\&quot;</span><br><span class="line"></span><br><span class="line">show variables like &apos;innodb_data_home_dir&apos; --数据库文件所存放的目录</span><br><span class="line">show variables like &apos;innodb_log_group_home_dir&apos; --日志存放目录</span><br><span class="line">show variables like &apos;innodb_data_file_path&apos; --指定innodb 共享 表空间文件</span><br><span class="line">innodb_data_file_pathibdata1:12M:autoextend（存储到 ibdata1 初始大小为12M 自动扩容）</span><br></pre></td></tr></table></figure><blockquote><p>注：InnoDB不创建目录，所以在启动服务器之前请确认”所配置的路径目录”的确存在。这对你配置的任何日志文件目录来说也是真实的。使用Unix或DOS的mkdir命令来创建任何必需的目录。通过把innodb_data_home_dir的值原原本本地部署到数据文件名，并在需要的地方添加斜杠或反斜杠，InnoDB为每个数据文件形成目录路径</p></blockquote><ol start="3"><li>MyISAM 存储引擎<br>MySQL&lt;= 5.5 MySQL默认的存储引擎；擅长与处理，高速读与写。<br>特点：</li></ol><ul><li>数据和索引分别存储于不同的文件中。</li><li>数据的存储顺序为插入顺序（没有经过排序、插入速度快，空间占用量小）</li><li>功能<ul><li>全文索引支持</li><li>数据的压缩存储（myisamPack）</li><li>并发性<ul><li>仅仅支持表级锁定，不支持高并发。</li><li>支持并发插入。写操作中的插入操作，不会阻塞读操作（其他操作）</li></ul></li></ul></li></ul><p>Innodb 和 MyISAM 比较：</p><ul><li>Innodb ：数据完整性，并发性处理，擅长更新，删除。</li><li>myisam：高速查询及插入。擅长插入和查询。</li></ul><p>其他存储引擎：</p><ul><li>Archive：存档型，仅提供插入和查询操作。非常高效阻塞的插入和查询。</li><li>Memory：内存型，数据存储于内存中，存储引擎。缓存型存储引擎。</li><li>插件式存储引擎：用C和C++开发的存储引擎。</li></ul><ol start="4"><li>数据库锁</li></ol><p>当客户端操作表（记录）时，为了保证操作的隔离性（多个客户端操作不能互相影响），通过加锁来处理。</p><h3 id="字段类型选择"><a href="#字段类型选择" class="headerlink" title="字段类型选择"></a>字段类型选择</h3><p>类型取值如下：</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">数值类型<br></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">TINYINT</td><td align="left">1 byte</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4 bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left">浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left">浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr><tr><td align="left">日期和时间类型<br></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01/9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’/‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901/2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">1970-01-01 00:00:00/2038</td><td align="left">YYYYMMDD HHMMSS</td><td align="left">混合日期和时间值，时间戳</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">字符串类型<br></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">CHAR</td><td align="left">0-255 bytes</td><td align="left"></td><td align="left"></td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left"></td><td align="left"></td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left"></td><td align="left"></td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left"></td><td align="left"></td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left"></td><td align="left"></td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 bytes</td><td align="left"></td><td align="left"></td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left"></td><td align="left"></td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left"></td><td align="left"></td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left"></td><td align="left"></td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left"></td><td align="left"></td><td align="left">极大文本数据</td></tr></tbody></table><p>选择优化的数据类型原则：</p><ul><li>更小的通常更好</li><li>简单数据类型需要更少的CPU周期（用MySQL内建的类型(date, time, datetime)来存储时间和日期、使用整型存储IP地址）</li><li>指定列为NOT NULL（可为NULL的列使得索引、索引统计和值比较都更复杂）</li></ul><p>分类：</p><ul><li>整数类型<ul><li>TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT分别使用8,16,24,32,64位存储空间。它们可以存储的值得范围从-2(N-1)到2(N-1)-1，如果是UNSIGNED，表示不允许负值，那正数的上限提高一倍</li></ul></li><li>浮点类型<ul><li>FLOAT、DOUBLE、DECIMAL（高精度） 分别使用4字节、8字节、可变个字节存储</li></ul></li><li>字符串类型<ul><li>VARCHAR比CHAR更节省空间，VARCHAR会使用1或2个额外的字节记录字符串的长度。如果使用UTF8字符集，应该选择VARCHAR类型。CHAR适合存储很短的字符串，或者所有值都接近同一个长度。比如MD5加密后的值。对于经常变更的数据，CHAR比VARCHAR更好，因为CHAR类型不易产生碎片</li></ul></li><li>日期和时间类型<ul><li>DATETIME使用8个字节的存储空间，TIMESTAMP使用4个字节，一般情况下尽量选择TIMESTAMP类型</li></ul></li></ul><p>TIMESTAMP 特点：</p><ul><li>当更新一条数据的时候，设置此类型根据当前系统更新可自动更新时间</li><li>如果插入一条NULL，也会自动插入当前系统时间</li><li>创建时，自动设置默认值</li><li>会根据当前时区来存储和查询时间，存储时对当前时区进行转换，查询时再转换为当前的时区</li></ul><h3 id="范式与逆范式"><a href="#范式与逆范式" class="headerlink" title="范式与逆范式"></a>范式与逆范式</h3><p>为了建立冗余较小、结构合理的数据库，设计数据库时必须遵循一定的规则。在关系型数据库中这种规则就称为范式。范式是符合某一种设计要求的总结。要想设计一个结构合理的关系型数据库，必须满足一定的范式。逆范式是指打破范式，通过增加冗余或重复的数据来提高数据库的性能。</p><p>三大范式：</p><ul><li>第一范式1NF，原子性；段值都是不可分解</li><li>第二范式2NF，消除部分依赖；表中的每列都和主键相关</li><li>第三范式3NF，消除传递依赖；表中非主键列不依赖于其它非主键列</li><li>优点<ul><li>范式可以避免数据冗余，减少数据库的空间，减轻维护数据完整性的麻烦。</li></ul></li><li>缺点<ul><li>所用的范式越高，对数据操作的性能越低。所以我们在利用范式设计表的时候，要根据具体的需求再去权衡是否使用更高范式去设计表。</li></ul></li></ul><h1 id="二、功能优化"><a href="#二、功能优化" class="headerlink" title="二、功能优化"></a>二、功能优化</h1><p>功能优化包含索引，缓存，分区分表等部分。</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>在关系数据库中，索引是一种单独的、物理的对数据库表中一列或多列的值进行排序的一种存储结构，它是某个表中一列或若干列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单。索引的关键字一定是排序的。索引本质上是表字段的有序子集，类似于一个目录，通过它可以快速定位数据。</p><ol><li>分类</li></ol><ul><li>种类<ul><li>聚集索引(clustered index)：子顶点存储行记录，有且只有一个聚焦索引。存在主键，则主键是聚焦索引；否则第一个not NULL unique列是聚集索引；否则，InnoDB会创建一个隐藏的row-id作为聚集索引。</li><li>普通索引(secondary index)</li></ul></li><li>类型<ul><li>主键索引,primary key：要求关键字不能重复，也不能为NULL。同时增加主键约束</li><li>唯一索引,unique index：要求关键字不能重复。同时增加唯一约束</li><li>普通索引(secondary index)</li><li>普通索引,index：对关键字没有要求</li><li>全文索引,fulltext key：关键字的来源不是所有字段的数据，而是从字段中提取的特别关键词。该类型的索引特殊在：关键字的创建上。是为了解决 like&lsquo;%keyword%&rsquo;这类查询的匹配问题。（mysql的全文索引几乎不用，因为它不支持中文，应该使用<code>sphinx全文索引</code>）。</li></ul></li></ul><pre><code>+    复合索引：如果一个索引通过在多个字段上提取的关键字，称之为复合索引</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 主键索引</span><br><span class="line">ALTER TABLE student ADD PRIMARY KEY  (id);</span><br><span class="line">-- 普通索引</span><br><span class="line">ALTER TABLE student ADD INDEX index_stu (`name`);</span><br><span class="line">-- 删除普通索引</span><br><span class="line">ALTER TABLE student drop INDEX index_stu;</span><br><span class="line">-- 唯一索引</span><br><span class="line">ALTER TABLE student  ADD UNIQUE idx_uq_name (`name`)</span><br><span class="line">-- 全文索引</span><br><span class="line">ALTER TABLE student ADD FULLTEXT idx_ft_name (`name`)</span><br><span class="line">-- 复合索引</span><br><span class="line">ALTER TABLE student ADD INDEX idx_fh ( `name`,school_id)</span><br></pre></td></tr></table></figure><ol start="2"><li>最左匹配原则</li></ol><p>最左匹配原则都是针对联合索引来说的，构建一颗 B+ 树只能根据一个值来构建，因此数据库依据联合索引最左的字段来构建 B+ 树。在 InnoDB 中联合索引只有先确定了前一个（左侧的值）后，才能确定下一个值。如果有范围查询的话，那么联合索引中使用范围查询的字段后的索引在该条 SQL 中都不会起作用。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-- 定义 a b c 的联合索引</span><br><span class="line">-- a. 生效的例子</span><br><span class="line">-- eg1</span><br><span class="line">select * from t where a=1 and b=1 and c=1;</span><br><span class="line"></span><br><span class="line">-- eg2</span><br><span class="line">select * from t where a=1 and c=1 and b=1;</span><br><span class="line">==经过优化器转换==&gt; </span><br><span class="line">select * from t where a=1 and b=1 and c=1;</span><br><span class="line"></span><br><span class="line">-- eg3</span><br><span class="line">select * from t where a=1 and b=1 and c&gt;1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- b. 未生效的例子</span><br><span class="line">-- eg1</span><br><span class="line">select * from t where a=1 and b&gt;1 and c=1;（只有ab用上索引）</span><br><span class="line"></span><br><span class="line">-- eg2</span><br><span class="line">select * from t where a=1 and c=1;（只有a用上索引）</span><br></pre></td></tr></table></figure><blockquote><p>注：mysql的执行计划和查询的实际执行过程并不完全吻合，所以参数的查询也会经过优化。</p></blockquote><ol start="3"><li>使用OR<br>必须要保证 OR 两端的条件都存在可以用的索引，该查询才可以使用索引。</li></ol><ol start="4"><li>索引覆盖<br>索引拥有的关键字内容，覆盖了查询所需要的全部数据。此时，就不需要在数据区获取数据，仅仅在索引区即可。覆盖就是直接在索引区获取内容，而不需要在数据区获取。explain的输出结果Extra字段为Using index时，能够触发索引覆盖。即查询字段都为索引字段，通过索引直接就可以获取数据，而不需要再查询表。</li></ol><p>使用场景：</p><ul><li>全表count查询优化</li><li>列查询回表优化（建立联合索引（name+sex），<code>select id,name,sex ... where name=&#39;shenjian&#39;</code>）</li><li>分页查询</li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>MySQL 缓存机制就是缓存sql 文本及缓存结果，用KV形式保存再服务器内存中，如果运行相同的sql,服务器直接从缓存中去获取结果，不需要在再去解析、优化、执行sql。如果表修改了（如insert,update,delete,truncate,alter table,drop table或者是drop database 等命令），那么该表的所有索引都不会生效，查询缓存值得相关条目将被清空。对于更新频繁的表，查询缓存并不合适；对于不变的数据以及查询sql大都相似的表，查询缓存会提高很大性能。</p><ol><li>命中条件</li></ol><p>缓存存在于一个hash表中，通过查询SQL，查询数据库，客户端协议等作为key,在判断命中前，mysql不会解析SQL，而是使用SQL去查询缓存，SQL上的任何字符的不同，如空格、注释，都会导致缓存不命中。如果查询有不确定的数据like now(),current_date()，那么查询完成后结果者不会被缓存，包含不确定的数的是不会放置到缓存中。</p><ol start="2"><li>工作流程</li></ol><ul><li>服务器接收SQL，如果涉及表的库有启动缓存，根据SQL及其他条件查找缓存表；</li><li>如果找到了缓存，则直接返回缓存；</li><li>如果没有找到缓存，则执行SQL查询，包括原来的SQL解析，优化等；</li><li>执行完SQL查询结果以后，将SQL查询结果缓存入缓存表。</li></ul><ol start="3"><li>缓存失败</li></ol><p>当某个表正在写入数据，则这个表的缓存（命中缓存，缓存写入等）将会处于失效状态，在Innodb中，如果某个事务修改了这张表，则这个表的缓存在事务提交前都会处于失效状态，在这个事务提交前，这个表的相关查询都无法被缓存。</p><ol start="4"><li>缓存参数配置</li></ol><ul><li>query_cache_type: 是否打开缓存<ul><li>OFF: 关闭</li><li>ON: 总是打开</li><li>DEMAND: 只有明确写了SQL_CACHE的查询才会吸入缓存</li></ul></li><li>query_cache_size: 缓存使用的总内存空间大小,单位是字节,这个值必须是1024的整数倍,否则MySQL实际分配可能跟这个数值不同(感觉这个应该跟文件系统的blcok大小有关)</li><li>query_cache_min_res_unit: 分配内存块时的最小单位大小</li><li>query_cache_limit: MySQL能够缓存的最大结果,如果超出,则增加 Qcache_not_cached的值,并删除查询结果</li><li>query_cache_wlock_invalidate: 如果某个数据表被锁住,是否仍然从缓存中返回数据,默认是OFF,表示仍然可以返回</li></ul><blockquote><p>注：这里的缓存仅当数据表的记录改变时，缓存才会被删除，而不是依靠过期时间的。如果存在不想使用缓存的SQL执行，则可以使用 SQL_NO_CACHE语法</p></blockquote><h3 id="分区分表"><a href="#分区分表" class="headerlink" title="分区分表"></a>分区分表</h3><p>日常开发中经常会遇到大表的情况，所谓的大表是指存储了百万级乃至千万级条记录的表。这样的表过于庞大，导致数据库在查询和插入的时候耗时太长，性能低下，如果涉及联合查询的情况，性能会更加糟糕。分表和表分区的目的就是减少数据库的负担，提高数据库的效率，通常点来讲就是提高表的增删改查效率。</p><ol><li>分区</li></ol><p>分区，partition，分区是将数据分段划分在多个位置存放，可以是同一块磁盘也可以在不同的机器。分区后，表面上还是一张表，但数据散列到多个位置了。app读写的时候操作的还是大表名字，db自动去组织分区的数据。</p><p>MySQL提供4种分区算法：</p><ul><li>取余<ul><li>Key</li><li>hash </li></ul></li><li>条件<ul><li>List</li><li>range</li></ul></li></ul><p>实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">-- 查看是否支持分区</span><br><span class="line">show VARIABLES like &apos;have_partitioning&apos;</span><br><span class="line"></span><br><span class="line">-- 取余：Key</span><br><span class="line">CREATE TABLE partition_1 (</span><br><span class="line">id  int PRIMARY key AUTO_INCREMENT,</span><br><span class="line">title VARCHAR(255)</span><br><span class="line">)</span><br><span class="line">partition by key(id) PARTITIONS 3;</span><br><span class="line"></span><br><span class="line">分区会生成以下三个文件：</span><br><span class="line">partition_1#p#p0.ibd</span><br><span class="line">partition_1#p#p1.ibd</span><br><span class="line">partition_1#p#p2.ibd</span><br><span class="line">分区与存储引擎无关，是MySQL逻辑层完成的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 取余：hash;，按照某个表达式的值进行取余</span><br><span class="line">CREATE TABLE partition_2 (</span><br><span class="line">id int UNSIGNED  AUTO_INCREMENT,</span><br><span class="line">birthday date,</span><br><span class="line">pname VARCHAR(255),</span><br><span class="line">PRIMARY KEY (id, birthday)</span><br><span class="line">)</span><br><span class="line">partition by hash(month(birthday)) PARTITIONS 12;</span><br><span class="line"></span><br><span class="line">-- 条件：List</span><br><span class="line">CREATE TABLE partition_4 (</span><br><span class="line">id int UNSIGNED  AUTO_INCREMENT,</span><br><span class="line">birthday date,</span><br><span class="line">pname VARCHAR(255),</span><br><span class="line">PRIMARY KEY (id, birthday)</span><br><span class="line">)</span><br><span class="line">partition by list(month(birthday)) (</span><br><span class="line">partition spring VALUES IN(3, 4, 5),</span><br><span class="line">partition summer VALUES IN(6, 7, 8),</span><br><span class="line">partition autumn VALUES IN(9, 10, 11),</span><br><span class="line">partition winter VALUES IN(12, 1, 2)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 条件：range</span><br><span class="line"></span><br><span class="line">CREATE TABLE partition_5 (</span><br><span class="line">id int UNSIGNED  AUTO_INCREMENT,</span><br><span class="line">birthday date,</span><br><span class="line">pname VARCHAR(255),</span><br><span class="line">PRIMARY KEY (id, birthday)</span><br><span class="line">)</span><br><span class="line">partition by range(year(birthday)) (</span><br><span class="line">partition p_90 VALUES LESS THAN (2000),</span><br><span class="line">partition p_00 VALUES LESS THAN (2010),</span><br><span class="line">partition P_10 VALUES LESS THAN (2020),</span><br><span class="line">partition p_20 VALUES LESS THAN MAXVALUE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>1.2. 其它语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 取余</span><br><span class="line">-- 增加分区数量</span><br><span class="line">Alter TABLE TABLE_NAME add partition partitions N</span><br><span class="line">-- 减少分区数量</span><br><span class="line">Alter TABLE TABLE_NAME COALESCE partition N</span><br><span class="line"></span><br><span class="line">-- 条件</span><br><span class="line">-- 添加分区</span><br><span class="line">Alter TABLE TABLE_NAME add partition (</span><br><span class="line">partition P_10 VALUES LESS THAN (2020)</span><br><span class="line">)</span><br><span class="line">-- 删除</span><br><span class="line">Alter TABLE TABLE_NAME drop partition P_10</span><br><span class="line"></span><br><span class="line">删除条件算法的分区，会导致分区数据丢失。添加分区不会。</span><br></pre></td></tr></table></figure><ol start="2"><li>分表<br>分表是将一个大表按照一定的规则分解成多张具有独立存储空间的实体表，我们可以称为子表，每个表都对应三个文件，MYD数据文件，.MYI索引文件，.frm表结构文件。这些子表可以分布在同一块磁盘上，也可以在不同的机器上。app读写的时候根据事先定义好的规则得到对应的子表名，然后去操作它。分表技术是比较麻烦的，需要手动去创建子表，app服务端读写时候需要计算子表名。采用merge好一些，但也要创建子表和配置子表间的union关系。（需要手动分表）</li></ol><ul><li>水平分表：通过结构相同的N个表存储数据，MySQL提供了一个可以将多个结构相同的myisam表合并到一起的存储引擎mrg_myisam。</li><li>垂直分表：一张表中存在多个字段。这些字段可以分为常用字段和非常用字段，为了提高查表速度，我们可以把这两类字段分开来存储。主要目的，减少每条记录的长度</li></ul><blockquote><p><a href="https://www.cnblogs.com/kerrycode/p/9515200.html" target="_blank" rel="noopener">MySQL如何判别InnoDB表是独立表空间还是共享表空间</a><br><a href="https://blog.csdn.net/qzqanzc/article/details/80418125" target="_blank" rel="noopener">mysql 缓存机制</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;MYSQL优化包括设计、功能、架构与高性能SQL几个方面。Mysql优化，一方面是找出系统的瓶颈，提高mysql数据库整体的性能，另外一个方面需要合理的结构设计和参数调整，以提高用户操作响应的速度。同时还要尽可能节省系统资源，以便系统可以提供更大负荷的服务。mysql数据库</summary>
      
    
    
    
    
    <category term="mysql" scheme="http://zws6672.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>UML中类的关系</title>
    <link href="http://zws6672.top/2021/05/16/tool-uml/"/>
    <id>http://zws6672.top/2021/05/16/tool-uml/</id>
    <published>2021-05-16T05:42:35.000Z</published>
    <updated>2021-05-17T06:33:24.168Z</updated>
    
    <content type="html"><![CDATA[<ol><li>依赖（Dependency）：A类中存在方法形参为B类</li></ol><p>实体之间一个“使用”关系暗示一个实体的规范发生变化后，可能影响依赖于它的其他实例（图D）。更具体地说，它可转换为对不在实例作用域内的一个类或对象的任何类型的引用。其中包括一个局部变量，对通过方法调用而获得的一个对象的引用（如下例所示），或者对一个类的静态方法的引用（同时不存在那个类的一个实例）</p><ol start="2"><li>关联（Association）：A类有成员变量是B类</li></ol><p>实体之间的一个结构化关系表明对象是相互连接的。UML箭头是可选的，它用于指定导航能力。如果没有箭头，暗示是一种双向的导航能力。在Java中，关联（图E）转换为一个实例作用域的变量，就像图E的“Java”区域所展示的代码那样。可为一个关联附加其他修饰符。</p><ul><li>合成/组合（Composition）：A类的成员变量是B类，且必定存在<ul><li>合成（图G）是聚合的一种特殊形式，UML箭头暗示“局部”在“整体”内部的生存期职责。合成也是非共享的。所以，虽然局部不一定要随整体的销毁而被销毁，但整体要么负责保持局部的存活状态，要么负责将其销毁。局部不可与其他整体共享。但是，整体可将所有权转交给另一个对象，后者随即将承担生存期职责。</li></ul></li><li>聚合（Aggregation）：A类通过存在数组之类的结构存放B类<ul><li>聚合（图F）是关联的一种形式，UML箭头代表两个类之间的整体/局部关系。聚合暗示着整体在概念上处于比局部更高的一个级别，而关联暗示两个类在概念上位于相同的级别。聚合也转换成Java中的一个实例作用域变量。</li></ul></li><li>合成与聚合的区别：聚合即A中可能有B对象，B对象不是A的一部分；合成即A中一定有B对象，并且生成A对象的同时一定生成B对象。</li></ul><ol start="3"><li>泛化（Generalization）：A类继承于B类</li></ol><p>泛化（图H）表示一个更泛化的元素和一个更具体的元素之间的关系。泛化是用于对继承进行建模的UML元素。</p><ol start="4"><li>实现（Realization）：A类实现了B接口</li></ol><p>面向对象中表示接口的实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;依赖（Dependency）：A类中存在方法形参为B类&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实体之间一个“使用”关系暗示一个实体的规范发生变化后，可能影响依赖于它的其他实例（图D）。更具体地说，它可转换为对不在实例作用域内的一个类或对象的任何类型的引用。其中包括一个局部</summary>
      
    
    
    
    
    <category term="soft-skills" scheme="http://zws6672.top/tags/soft-skills/"/>
    
  </entry>
  
</feed>
